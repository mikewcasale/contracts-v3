{
  "address": "0x395eD9ffd32b255dBD128092ABa40200159d664b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IBancorNetwork",
          "name": "initNetwork",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "initBNT",
          "type": "address"
        },
        {
          "internalType": "contract INetworkSettings",
          "name": "initNetworkSettings",
          "type": "address"
        },
        {
          "internalType": "contract IMasterVault",
          "name": "initMasterVault",
          "type": "address"
        },
        {
          "internalType": "contract IBNTPool",
          "name": "initBNTPool",
          "type": "address"
        },
        {
          "internalType": "contract IExternalProtectionVault",
          "name": "initExternalProtectionVault",
          "type": "address"
        },
        {
          "internalType": "contract IPoolTokenFactory",
          "name": "initPoolTokenFactory",
          "type": "address"
        },
        {
          "internalType": "contract IPoolMigrator",
          "name": "initPoolMigrator",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "initNetworkFeePPM",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessDenied",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AlreadyEnabled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AlreadyExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DepositingDisabled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FundingLimitTooHigh",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientLiquidity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientSourceAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientTargetAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidFee",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidFraction",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidParam",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidRate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidStakedBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotWhitelisted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Overflow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PoolCollectionWithdrawalInputInvalid",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RateUnstable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SameOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TradingDisabled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroValue",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "prevFeePPM",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "newFeePPM",
          "type": "uint32"
        }
      ],
      "name": "DefaultTradingFeePPMUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract Token",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "newStatus",
          "type": "bool"
        }
      ],
      "name": "DepositingEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "prevOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnerUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "contextId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract Token",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "baseTokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolTokenAmount",
          "type": "uint256"
        }
      ],
      "name": "TokensDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "contextId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract Token",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "baseTokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolTokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "externalProtectionBaseTokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bntAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdrawalFeeAmount",
          "type": "uint256"
        }
      ],
      "name": "TokensWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "contextId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "contract Token",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakedBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolTokenSupply",
          "type": "uint256"
        }
      ],
      "name": "TotalLiquidityUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract Token",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "newStatus",
          "type": "bool"
        },
        {
          "indexed": true,
          "internalType": "uint8",
          "name": "reason",
          "type": "uint8"
        }
      ],
      "name": "TradingEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract Token",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "prevFeePPM",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "newFeePPM",
          "type": "uint32"
        }
      ],
      "name": "TradingFeePPMUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "contextId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "contract Token",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract Token",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prevLiquidity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newLiquidity",
          "type": "uint256"
        }
      ],
      "name": "TradingLiquidityUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Token",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "createPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultTradingFeePPM",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "contextId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "internalType": "contract Token",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "baseTokenAmount",
          "type": "uint256"
        }
      ],
      "name": "depositFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Token",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "depositingEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Token",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "disableTrading",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Token",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "enableDepositing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "enableProtection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Token",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "bntVirtualBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "baseTokenVirtualBalance",
          "type": "uint256"
        }
      ],
      "name": "enableTrading",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Token",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "isPoolStable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Token",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "isPoolValid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Token",
          "name": "pool",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "contract IPoolToken",
              "name": "poolToken",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "tradingFeePPM",
              "type": "uint32"
            },
            {
              "internalType": "bool",
              "name": "tradingEnabled",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "depositingEnabled",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "uint32",
                  "name": "blockNumber",
                  "type": "uint32"
                },
                {
                  "components": [
                    {
                      "internalType": "uint112",
                      "name": "n",
                      "type": "uint112"
                    },
                    {
                      "internalType": "uint112",
                      "name": "d",
                      "type": "uint112"
                    }
                  ],
                  "internalType": "struct Fraction112",
                  "name": "rate",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint112",
                      "name": "n",
                      "type": "uint112"
                    },
                    {
                      "internalType": "uint112",
                      "name": "d",
                      "type": "uint112"
                    }
                  ],
                  "internalType": "struct Fraction112",
                  "name": "invRate",
                  "type": "tuple"
                }
              ],
              "internalType": "struct AverageRates",
              "name": "averageRates",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint128",
                  "name": "bntTradingLiquidity",
                  "type": "uint128"
                },
                {
                  "internalType": "uint128",
                  "name": "baseTokenTradingLiquidity",
                  "type": "uint128"
                },
                {
                  "internalType": "uint256",
                  "name": "stakedBalance",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PoolLiquidity",
              "name": "liquidity",
              "type": "tuple"
            }
          ],
          "internalType": "struct Pool",
          "name": "data",
          "type": "tuple"
        }
      ],
      "name": "migratePoolIn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Token",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "contract IPoolCollection",
          "name": "targetPoolCollection",
          "type": "address"
        }
      ],
      "name": "migratePoolOut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "networkFeePPM",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "newOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Token",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "feeAmount",
          "type": "uint256"
        }
      ],
      "name": "onFeesCollected",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Token",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "poolData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "contract IPoolToken",
              "name": "poolToken",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "tradingFeePPM",
              "type": "uint32"
            },
            {
              "internalType": "bool",
              "name": "tradingEnabled",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "depositingEnabled",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "uint32",
                  "name": "blockNumber",
                  "type": "uint32"
                },
                {
                  "components": [
                    {
                      "internalType": "uint112",
                      "name": "n",
                      "type": "uint112"
                    },
                    {
                      "internalType": "uint112",
                      "name": "d",
                      "type": "uint112"
                    }
                  ],
                  "internalType": "struct Fraction112",
                  "name": "rate",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint112",
                      "name": "n",
                      "type": "uint112"
                    },
                    {
                      "internalType": "uint112",
                      "name": "d",
                      "type": "uint112"
                    }
                  ],
                  "internalType": "struct Fraction112",
                  "name": "invRate",
                  "type": "tuple"
                }
              ],
              "internalType": "struct AverageRates",
              "name": "averageRates",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint128",
                  "name": "bntTradingLiquidity",
                  "type": "uint128"
                },
                {
                  "internalType": "uint128",
                  "name": "baseTokenTradingLiquidity",
                  "type": "uint128"
                },
                {
                  "internalType": "uint256",
                  "name": "stakedBalance",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PoolLiquidity",
              "name": "liquidity",
              "type": "tuple"
            }
          ],
          "internalType": "struct Pool",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Token",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "poolLiquidity",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "bntTradingLiquidity",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "baseTokenTradingLiquidity",
              "type": "uint128"
            },
            {
              "internalType": "uint256",
              "name": "stakedBalance",
              "type": "uint256"
            }
          ],
          "internalType": "struct PoolLiquidity",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Token",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "poolToken",
      "outputs": [
        {
          "internalType": "contract IPoolToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Token",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "baseTokenAmountToDistribute",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "protocolPoolTokenAmount",
          "type": "uint256"
        }
      ],
      "name": "poolTokenAmountToBurn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Token",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "poolTokenAmount",
          "type": "uint256"
        }
      ],
      "name": "poolTokenToUnderlying",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolType",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pools",
      "outputs": [
        {
          "internalType": "contract Token[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protectionEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "newDefaultTradingFeePPM",
          "type": "uint32"
        }
      ],
      "name": "setDefaultTradingFeePPM",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Token",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "newTradingFeePPM",
          "type": "uint32"
        }
      ],
      "name": "setTradingFeePPM",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "contextId",
          "type": "bytes32"
        },
        {
          "internalType": "contract Token",
          "name": "sourceToken",
          "type": "address"
        },
        {
          "internalType": "contract Token",
          "name": "targetToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "sourceAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minReturnAmount",
          "type": "uint256"
        }
      ],
      "name": "tradeBySourceAmount",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tradingFeeAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "networkFeeAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct TradeAmountAndFee",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "contextId",
          "type": "bytes32"
        },
        {
          "internalType": "contract Token",
          "name": "sourceToken",
          "type": "address"
        },
        {
          "internalType": "contract Token",
          "name": "targetToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "targetAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxSourceAmount",
          "type": "uint256"
        }
      ],
      "name": "tradeByTargetAmount",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tradingFeeAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "networkFeeAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct TradeAmountAndFee",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Token",
          "name": "sourceToken",
          "type": "address"
        },
        {
          "internalType": "contract Token",
          "name": "targetToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "targetAmount",
          "type": "uint256"
        }
      ],
      "name": "tradeInputAndFeeByTargetAmount",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tradingFeeAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "networkFeeAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct TradeAmountAndFee",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Token",
          "name": "sourceToken",
          "type": "address"
        },
        {
          "internalType": "contract Token",
          "name": "targetToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "sourceAmount",
          "type": "uint256"
        }
      ],
      "name": "tradeOutputAndFeeBySourceAmount",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tradingFeeAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "networkFeeAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct TradeAmountAndFee",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Token",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "tradingEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Token",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "tradingFeePPM",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ownerCandidate",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Token",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "baseTokenAmount",
          "type": "uint256"
        }
      ],
      "name": "underlyingToPoolToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "contextId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "internalType": "contract Token",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "poolTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "baseTokenAmount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Token",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "poolTokenAmount",
          "type": "uint256"
        }
      ],
      "name": "withdrawalAmounts",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "baseTokenAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "bntAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct WithdrawalAmounts",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xebcf66aed7de8d2ba9761fa461df10bf48906c9f21da26adb25a21e65b6cd71b",
  "receipt": {
    "to": null,
    "from": "0x5bEBA4D3533a963Dedb270a95ae5f7752fA0Fe22",
    "contractAddress": "0x395eD9ffd32b255dBD128092ABa40200159d664b",
    "transactionIndex": 194,
    "gasUsed": "5106843",
    "logsBloom": "0x
    "blockHash": "0x97db527bd58c3c91a0acef8ddca92b1f2c99bf202f64d3e94f7fd4d3d2b08eca",
    "transactionHash": "0xebcf66aed7de8d2ba9761fa461df10bf48906c9f21da26adb25a21e65b6cd71b",
    "logs": [
      {
        "transactionIndex": 194,
        "blockNumber": 15051504,
        "transactionHash": "0xebcf66aed7de8d2ba9761fa461df10bf48906c9f21da26adb25a21e65b6cd71b",
        "address": "0x395eD9ffd32b255dBD128092ABa40200159d664b",
        "topics": [
          "0x343765429aea5a34b3ff6a3785a98a5abb2597aca87bfbb58632c173d585373a",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005beba4d3533a963dedb270a95ae5f7752fa0fe22"
        ],
        "data": "0x",
        "logIndex": 334,
        "blockHash": "0x97db527bd58c3c91a0acef8ddca92b1f2c99bf202f64d3e94f7fd4d3d2b08eca"
      },
      {
        "transactionIndex": 194,
        "blockNumber": 15051504,
        "transactionHash": "0xebcf66aed7de8d2ba9761fa461df10bf48906c9f21da26adb25a21e65b6cd71b",
        "address": "0x395eD9ffd32b255dBD128092ABa40200159d664b",
        "topics": [
          "0xb804b0ec3f0ea43004870df377170ce44cb789adca16d23286e337605558117f"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007d0",
        "logIndex": 335,
        "blockHash": "0x97db527bd58c3c91a0acef8ddca92b1f2c99bf202f64d3e94f7fd4d3d2b08eca"
      }
    ],
    "blockNumber": 15051504,
    "cumulativeGasUsed": "20882509",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xeEF417e1D5CC832e619ae18D2F140De2999dD4fB",
    "0x1F573D6Fb3F13d689FF844B4cE37794d79a7FF1C",
    "0x83E1814ba31F7ea95D216204BB45FE75Ce09b14F",
    "0x649765821D9f64198c905eC0B2B037a4a52Bc373",
    "0x02651E355D26f3506C1E644bA393FDD9Ac95EaCa",
    "0xFd31662b3d54eddE9B6Bdd32c9c27C8E292cAD57",
    "0x9E912953DB31fE933BDa43374208E967058D9d5F",
    "0x97CeC0F2D355BF073619A5093F989709caE4a191",
    150000
  ],
  "numDeployments": 1,
  "solcInputHash": "f07a18391b227db772e627d1d5a370c5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IBancorNetwork\",\"name\":\"initNetwork\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"initBNT\",\"type\":\"address\"},{\"internalType\":\"contract INetworkSettings\",\"name\":\"initNetworkSettings\",\"type\":\"address\"},{\"internalType\":\"contract IMasterVault\",\"name\":\"initMasterVault\",\"type\":\"address\"},{\"internalType\":\"contract IBNTPool\",\"name\":\"initBNTPool\",\"type\":\"address\"},{\"internalType\":\"contract IExternalProtectionVault\",\"name\":\"initExternalProtectionVault\",\"type\":\"address\"},{\"internalType\":\"contract IPoolTokenFactory\",\"name\":\"initPoolTokenFactory\",\"type\":\"address\"},{\"internalType\":\"contract IPoolMigrator\",\"name\":\"initPoolMigrator\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"initNetworkFeePPM\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessDenied\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyEnabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DepositingDisabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FundingLimitTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientLiquidity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientSourceAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientTargetAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFraction\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidParam\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStakedBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotWhitelisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Overflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolCollectionWithdrawalInputInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RateUnstable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SameOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TradingDisabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroValue\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"prevFeePPM\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newFeePPM\",\"type\":\"uint32\"}],\"name\":\"DefaultTradingFeePPMUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract Token\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"newStatus\",\"type\":\"bool\"}],\"name\":\"DepositingEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"contextId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract Token\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolTokenAmount\",\"type\":\"uint256\"}],\"name\":\"TokensDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"contextId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract Token\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"externalProtectionBaseTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bntAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawalFeeAmount\",\"type\":\"uint256\"}],\"name\":\"TokensWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"contextId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"contract Token\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakedBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolTokenSupply\",\"type\":\"uint256\"}],\"name\":\"TotalLiquidityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract Token\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"newStatus\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"reason\",\"type\":\"uint8\"}],\"name\":\"TradingEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract Token\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"prevFeePPM\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newFeePPM\",\"type\":\"uint32\"}],\"name\":\"TradingFeePPMUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"contextId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"contract Token\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract Token\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevLiquidity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLiquidity\",\"type\":\"uint256\"}],\"name\":\"TradingLiquidityUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Token\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"createPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultTradingFeePPM\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"contextId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"contract Token\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseTokenAmount\",\"type\":\"uint256\"}],\"name\":\"depositFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Token\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"depositingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Token\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"disableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Token\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"enableDepositing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"enableProtection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Token\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bntVirtualBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseTokenVirtualBalance\",\"type\":\"uint256\"}],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Token\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"isPoolStable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Token\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"isPoolValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Token\",\"name\":\"pool\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IPoolToken\",\"name\":\"poolToken\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"tradingFeePPM\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"tradingEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"depositingEnabled\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint112\",\"name\":\"n\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"d\",\"type\":\"uint112\"}],\"internalType\":\"struct Fraction112\",\"name\":\"rate\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint112\",\"name\":\"n\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"d\",\"type\":\"uint112\"}],\"internalType\":\"struct Fraction112\",\"name\":\"invRate\",\"type\":\"tuple\"}],\"internalType\":\"struct AverageRates\",\"name\":\"averageRates\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"bntTradingLiquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"baseTokenTradingLiquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"stakedBalance\",\"type\":\"uint256\"}],\"internalType\":\"struct PoolLiquidity\",\"name\":\"liquidity\",\"type\":\"tuple\"}],\"internalType\":\"struct Pool\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"migratePoolIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Token\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IPoolCollection\",\"name\":\"targetPoolCollection\",\"type\":\"address\"}],\"name\":\"migratePoolOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"networkFeePPM\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Token\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"onFeesCollected\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Token\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"poolData\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IPoolToken\",\"name\":\"poolToken\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"tradingFeePPM\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"tradingEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"depositingEnabled\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint112\",\"name\":\"n\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"d\",\"type\":\"uint112\"}],\"internalType\":\"struct Fraction112\",\"name\":\"rate\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint112\",\"name\":\"n\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"d\",\"type\":\"uint112\"}],\"internalType\":\"struct Fraction112\",\"name\":\"invRate\",\"type\":\"tuple\"}],\"internalType\":\"struct AverageRates\",\"name\":\"averageRates\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"bntTradingLiquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"baseTokenTradingLiquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"stakedBalance\",\"type\":\"uint256\"}],\"internalType\":\"struct PoolLiquidity\",\"name\":\"liquidity\",\"type\":\"tuple\"}],\"internalType\":\"struct Pool\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Token\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"poolLiquidity\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"bntTradingLiquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"baseTokenTradingLiquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"stakedBalance\",\"type\":\"uint256\"}],\"internalType\":\"struct PoolLiquidity\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Token\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"poolToken\",\"outputs\":[{\"internalType\":\"contract IPoolToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Token\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseTokenAmountToDistribute\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolPoolTokenAmount\",\"type\":\"uint256\"}],\"name\":\"poolTokenAmountToBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Token\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolTokenAmount\",\"type\":\"uint256\"}],\"name\":\"poolTokenToUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolType\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"contract Token[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protectionEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"newDefaultTradingFeePPM\",\"type\":\"uint32\"}],\"name\":\"setDefaultTradingFeePPM\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Token\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"newTradingFeePPM\",\"type\":\"uint32\"}],\"name\":\"setTradingFeePPM\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"contextId\",\"type\":\"bytes32\"},{\"internalType\":\"contract Token\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"contract Token\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sourceAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturnAmount\",\"type\":\"uint256\"}],\"name\":\"tradeBySourceAmount\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tradingFeeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"networkFeeAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct TradeAmountAndFee\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"contextId\",\"type\":\"bytes32\"},{\"internalType\":\"contract Token\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"contract Token\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"targetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSourceAmount\",\"type\":\"uint256\"}],\"name\":\"tradeByTargetAmount\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tradingFeeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"networkFeeAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct TradeAmountAndFee\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Token\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"contract Token\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"targetAmount\",\"type\":\"uint256\"}],\"name\":\"tradeInputAndFeeByTargetAmount\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tradingFeeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"networkFeeAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct TradeAmountAndFee\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Token\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"contract Token\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sourceAmount\",\"type\":\"uint256\"}],\"name\":\"tradeOutputAndFeeBySourceAmount\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tradingFeeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"networkFeeAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct TradeAmountAndFee\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Token\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"tradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Token\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"tradingFeePPM\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerCandidate\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Token\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseTokenAmount\",\"type\":\"uint256\"}],\"name\":\"underlyingToPoolToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"contextId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"contract Token\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseTokenAmount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Token\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolTokenAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawalAmounts\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bntAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct WithdrawalAmounts\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Pool Collection contract notes: - the address of reserve token serves as the pool unique ID in both contract functions and events\",\"events\":{\"DefaultTradingFeePPMUpdated(uint32,uint32)\":{\"details\":\"triggered when the default trading fee is updated\"},\"DepositingEnabled(address,bool)\":{\"details\":\"triggered when depositing into a specific pool is enabled/disabled\"},\"TokensDeposited(bytes32,address,address,uint256,uint256)\":{\"details\":\"triggered when new liquidity is deposited into a pool\"},\"TokensWithdrawn(bytes32,address,address,uint256,uint256,uint256,uint256,uint256)\":{\"details\":\"triggered when existing liquidity is withdrawn from a pool\"},\"TotalLiquidityUpdated(bytes32,address,uint256,uint256,uint256)\":{\"details\":\"triggered when the total liquidity in a pool is updated\"},\"TradingEnabled(address,bool,uint8)\":{\"details\":\"triggered when trading in a specific pool is enabled/disabled\"},\"TradingFeePPMUpdated(address,uint32,uint32)\":{\"details\":\"triggered when a specific pool's trading fee is updated\"},\"TradingLiquidityUpdated(bytes32,address,address,uint256,uint256)\":{\"details\":\"triggered when the trading liquidity in a pool is updated\"}},\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"used by a new owner to accept an ownership transfer\"},\"constructor\":{\"details\":\"initializes a new PoolCollection contract\"},\"createPool(address)\":{\"details\":\"creates a new pool requirements: - the caller must be the network contract - the pool should have been whitelisted - the pool isn't already defined in the collection\"},\"defaultTradingFeePPM()\":{\"details\":\"returns the default trading fee (in units of PPM)\"},\"depositFor(bytes32,address,address,uint256)\":{\"details\":\"deposits base token liquidity on behalf of a specific provider and returns the respective pool token amount requirements: - the caller must be the network contract - assumes that the base token has been already deposited in the vault\"},\"depositingEnabled(address)\":{\"details\":\"returns whether depositing is enabled\"},\"disableTrading(address)\":{\"details\":\"disables trading in a given pool requirements: - the caller must be the owner of the contract\"},\"enableDepositing(address,bool)\":{\"details\":\"enables/disables depositing into a given pool requirements: - the caller must be the owner of the contract\"},\"enableProtection(bool)\":{\"details\":\"enables/disables protection requirements: - the caller must be the owner of the contract\"},\"enableTrading(address,uint256,uint256)\":{\"details\":\"enables trading in a given pool, by providing the funding rate as two virtual balances, and updates its trading liquidity please note that the virtual balances should be derived from token prices, normalized to the smallest unit of tokens. In other words, the ratio between BNT and TKN virtual balances should be the ratio between the $ value of 1 wei of TKN and 1 wei of BNT, taking both of their decimals into account. For example: - if the price of one (10**18 wei) BNT is $X and the price of one (10**18 wei) TKN is $Y, then the virtual balances   should represent a ratio of X to Y - if the price of one (10**18 wei) BNT is $X and the price of one (10**6 wei) USDC is $Y, then the virtual balances   should represent a ratio of X to Y*10**12 requirements: - the caller must be the owner of the contract\"},\"isPoolStable(address)\":{\"details\":\"returns whether the pool is stable\"},\"isPoolValid(address)\":{\"details\":\"returns whether a pool is valid\"},\"migratePoolIn(address,(address,uint32,bool,bool,(uint32,(uint112,uint112),(uint112,uint112)),(uint128,uint128,uint256)))\":{\"details\":\"migrates a pool to this pool collection requirements: - the caller must be the pool migrator contract\"},\"migratePoolOut(address,address)\":{\"details\":\"migrates a pool from this pool collection requirements: - the caller must be the pool migrator contract\"},\"networkFeePPM()\":{\"details\":\"returns the network fee (in units of PPM)\"},\"newOwner()\":{\"details\":\"returns the address of the new owner candidate\"},\"onFeesCollected(address,uint256)\":{\"details\":\"notifies the pool of accrued fees requirements: - the caller must be the network contract\"},\"owner()\":{\"details\":\"returns the address of the current owner\"},\"poolCount()\":{\"details\":\"returns the number of all the pools which are managed by this pool collection\"},\"poolData(address)\":{\"details\":\"returns specific pool's data notes: - there is no guarantee that this function will remains forward compatible, so please avoid relying on it and   rely on specific getters from the IPoolCollection interface instead\"},\"poolLiquidity(address)\":{\"details\":\"returns the overall liquidity in the pool\"},\"poolToken(address)\":{\"details\":\"returns the pool token of the pool\"},\"poolTokenAmountToBurn(address,uint256,uint256)\":{\"details\":\"returns the number of pool token to burn in order to increase everyone's underlying value by the specified amount\"},\"poolTokenToUnderlying(address,uint256)\":{\"details\":\"converts the specified pool token amount to the underlying base token amount\"},\"poolType()\":{\"details\":\"returns the type of the pool\"},\"pools()\":{\"details\":\"returns all the pools which are managed by this pool collection\"},\"protectionEnabled()\":{\"details\":\"returns the status of the protection\"},\"setDefaultTradingFeePPM(uint32)\":{\"details\":\"sets the default trading fee (in units of PPM) requirements: - the caller must be the owner of the contract\"},\"setTradingFeePPM(address,uint32)\":{\"details\":\"sets the trading fee of a given pool requirements: - the caller must be the owner of the contract\"},\"tradeBySourceAmount(bytes32,address,address,uint256,uint256)\":{\"details\":\"performs a trade by providing the source amount and returns the target amount and the associated fee requirements: - the caller must be the network contract\"},\"tradeByTargetAmount(bytes32,address,address,uint256,uint256)\":{\"details\":\"performs a trade by providing the target amount and returns the required source amount and the associated fee requirements: - the caller must be the network contract\"},\"tradeInputAndFeeByTargetAmount(address,address,uint256)\":{\"details\":\"returns the input amount and fee when trading by providing the target amount\"},\"tradeOutputAndFeeBySourceAmount(address,address,uint256)\":{\"details\":\"returns the output amount and fee when trading by providing the source amount\"},\"tradingEnabled(address)\":{\"details\":\"returns whether trading is enabled\"},\"tradingFeePPM(address)\":{\"details\":\"returns the trading fee (in units of PPM)\"},\"transferOwnership(address)\":{\"details\":\"allows transferring the contract ownership requirements: - the caller must be the owner of the contract - the new owner still needs to accept the transfer\"},\"underlyingToPoolToken(address,uint256)\":{\"details\":\"converts the specified underlying base token amount to pool token amount\"},\"withdraw(bytes32,address,address,uint256,uint256)\":{\"details\":\"handles some of the withdrawal-related actions and returns the withdrawn base token amount requirements: - the caller must be the network contract - the caller must have approved the collection to transfer/burn the pool token amount on its behalf\"},\"withdrawalAmounts(address,uint256)\":{\"details\":\"returns the amounts that would be returned if the position is currently withdrawn, along with the breakdown of the base token and the BNT compensation\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/pools/PoolCollection.sol\":\"PoolCollection\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7acbc538aad6eb4614e26612a8c5c0149bb8808db95e2638d245a8365f63e572\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xdadd41acb749920eccf40aeaa8d291adf9751399a7343561bad13e7a8d99be0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x5c6caab697d302ad7eb59c234a4d2dbc965c1bae87709bd2850060b7695b28c7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"contracts/network/interfaces/IBancorNetwork.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.13;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { IUpgradeable } from \\\"../../utility/interfaces/IUpgradeable.sol\\\";\\n\\nimport { Token } from \\\"../../token/Token.sol\\\";\\n\\nimport { IPoolCollection } from \\\"../../pools/interfaces/IPoolCollection.sol\\\";\\nimport { IPoolToken } from \\\"../../pools/interfaces/IPoolToken.sol\\\";\\n\\n/**\\n * @dev Flash-loan recipient interface\\n */\\ninterface IFlashLoanRecipient {\\n    /**\\n     * @dev a flash-loan recipient callback after each the caller must return the borrowed amount and an additional fee\\n     */\\n    function onFlashLoan(\\n        address caller,\\n        IERC20 erc20Token,\\n        uint256 amount,\\n        uint256 feeAmount,\\n        bytes memory data\\n    ) external;\\n}\\n\\n/**\\n * @dev Bancor Network interface\\n */\\ninterface IBancorNetwork is IUpgradeable {\\n    /**\\n     * @dev returns the set of all valid pool collections\\n     */\\n    function poolCollections() external view returns (IPoolCollection[] memory);\\n\\n    /**\\n     * @dev returns the set of all liquidity pools\\n     */\\n    function liquidityPools() external view returns (Token[] memory);\\n\\n    /**\\n     * @dev returns the respective pool collection for the provided pool\\n     */\\n    function collectionByPool(Token pool) external view returns (IPoolCollection);\\n\\n    /**\\n     * @dev creates new pools\\n     *\\n     * requirements:\\n     *\\n     * - none of the pools already exists\\n     */\\n    function createPools(Token[] calldata tokens, IPoolCollection poolCollection) external;\\n\\n    /**\\n     * @dev migrates a list of pools between pool collections\\n     *\\n     * notes:\\n     *\\n     * - invalid or incompatible pools will be skipped gracefully\\n     */\\n    function migratePools(Token[] calldata pools, IPoolCollection newPoolCollection) external;\\n\\n    /**\\n     * @dev deposits liquidity for the specified provider and returns the respective pool token amount\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have approved the network to transfer the tokens on its behalf (except for in the\\n     *   native token case)\\n     */\\n    function depositFor(\\n        address provider,\\n        Token pool,\\n        uint256 tokenAmount\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @dev deposits liquidity for the current provider and returns the respective pool token amount\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have approved the network to transfer the tokens on its behalf (except for in the\\n     *   native token case)\\n     */\\n    function deposit(Token pool, uint256 tokenAmount) external payable returns (uint256);\\n\\n    /**\\n     * @dev initiates liquidity withdrawal\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have approved the contract to transfer the pool token amount on its behalf\\n     */\\n    function initWithdrawal(IPoolToken poolToken, uint256 poolTokenAmount) external returns (uint256);\\n\\n    /**\\n     * @dev cancels a withdrawal request, and returns the number of pool token amount associated with the withdrawal\\n     * request\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have already initiated a withdrawal and received the specified id\\n     */\\n    function cancelWithdrawal(uint256 id) external returns (uint256);\\n\\n    /**\\n     * @dev withdraws liquidity and returns the withdrawn amount\\n     *\\n     * requirements:\\n     *\\n     * - the provider must have already initiated a withdrawal and received the specified id\\n     * - the specified withdrawal request is eligible for completion\\n     * - the provider must have approved the network to transfer vBNT amount on its behalf, when withdrawing BNT\\n     * liquidity\\n     */\\n    function withdraw(uint256 id) external returns (uint256);\\n\\n    /**\\n     * @dev performs a trade by providing the input source amount, sends the proceeds to the optional beneficiary (or\\n     * to the address of the caller, in case it's not supplied), and returns the trade target amount\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have approved the network to transfer the source tokens on its behalf (except for in the\\n     *   native token case)\\n     */\\n    function tradeBySourceAmount(\\n        Token sourceToken,\\n        Token targetToken,\\n        uint256 sourceAmount,\\n        uint256 minReturnAmount,\\n        uint256 deadline,\\n        address beneficiary\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @dev performs a trade by providing the output target amount, sends the proceeds to the optional beneficiary (or\\n     * to the address of the caller, in case it's not supplied), and returns the trade source amount\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have approved the network to transfer the source tokens on its behalf (except for in the\\n     *   native token case)\\n     */\\n    function tradeByTargetAmount(\\n        Token sourceToken,\\n        Token targetToken,\\n        uint256 targetAmount,\\n        uint256 maxSourceAmount,\\n        uint256 deadline,\\n        address beneficiary\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @dev provides a flash-loan\\n     *\\n     * requirements:\\n     *\\n     * - the recipient's callback must return *at least* the borrowed amount and fee back to the specified return address\\n     */\\n    function flashLoan(\\n        Token token,\\n        uint256 amount,\\n        IFlashLoanRecipient recipient,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev deposits liquidity during a migration\\n     */\\n    function migrateLiquidity(\\n        Token token,\\n        address provider,\\n        uint256 amount,\\n        uint256 availableAmount,\\n        uint256 originalAmount\\n    ) external payable;\\n\\n    /**\\n     * @dev withdraws pending network fees, and returns the amount of fees withdrawn\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have the ROLE_NETWORK_FEE_MANAGER privilege\\n     */\\n    function withdrawNetworkFees(address recipient) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x30069819ffc1c8fcfbaa0da2308f256efffcfc217aa83b61313342e82342d346\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/network/interfaces/INetworkSettings.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.13;\\n\\nimport { IUpgradeable } from \\\"../../utility/interfaces/IUpgradeable.sol\\\";\\n\\nimport { Token } from \\\"../../token/Token.sol\\\";\\n\\nerror NotWhitelisted();\\n\\nstruct VortexRewards {\\n    // the percentage of converted BNT to be sent to the initiator of the burning event (in units of PPM)\\n    uint32 burnRewardPPM;\\n    // the maximum burn reward to be sent to the initiator of the burning event\\n    uint256 burnRewardMaxAmount;\\n}\\n\\n/**\\n * @dev Network Settings interface\\n */\\ninterface INetworkSettings is IUpgradeable {\\n    /**\\n     * @dev returns the protected tokens whitelist\\n     */\\n    function protectedTokenWhitelist() external view returns (Token[] memory);\\n\\n    /**\\n     * @dev checks whether a given token is whitelisted\\n     */\\n    function isTokenWhitelisted(Token pool) external view returns (bool);\\n\\n    /**\\n     * @dev returns the BNT funding limit for a given pool\\n     */\\n    function poolFundingLimit(Token pool) external view returns (uint256);\\n\\n    /**\\n     * @dev returns the minimum BNT trading liquidity required before the system enables trading in the relevant pool\\n     */\\n    function minLiquidityForTrading() external view returns (uint256);\\n\\n    /**\\n     * @dev returns the withdrawal fee (in units of PPM)\\n     */\\n    function withdrawalFeePPM() external view returns (uint32);\\n\\n    /**\\n     * @dev returns the default flash-loan fee (in units of PPM)\\n     */\\n    function defaultFlashLoanFeePPM() external view returns (uint32);\\n\\n    /**\\n     * @dev returns the flash-loan fee (in units of PPM) of a pool\\n     */\\n    function flashLoanFeePPM(Token pool) external view returns (uint32);\\n\\n    /**\\n     * @dev returns the vortex settings\\n     */\\n    function vortexRewards() external view returns (VortexRewards memory);\\n}\\n\",\"keccak256\":\"0x92ef678ce3b9dbb2ff12c2bfb59277456ed3e385260f860a81b920439c5252fe\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/pools/PoolCollection.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.13;\\nimport { EnumerableSet } from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nimport { Token } from \\\"../token/Token.sol\\\";\\nimport { TokenLibrary } from \\\"../token/TokenLibrary.sol\\\";\\n\\nimport { IMasterVault } from \\\"../vaults/interfaces/IMasterVault.sol\\\";\\nimport { IExternalProtectionVault } from \\\"../vaults/interfaces/IExternalProtectionVault.sol\\\";\\n\\nimport { IVersioned } from \\\"../utility/interfaces/IVersioned.sol\\\";\\n\\nimport { PPM_RESOLUTION } from \\\"../utility/Constants.sol\\\";\\nimport { Owned } from \\\"../utility/Owned.sol\\\";\\nimport { BlockNumber } from \\\"../utility/BlockNumber.sol\\\";\\nimport { Fraction, Fraction112, FractionLibrary, zeroFraction, zeroFraction112 } from \\\"../utility/FractionLibrary.sol\\\";\\nimport { Sint256, MathEx } from \\\"../utility/MathEx.sol\\\";\\n\\n// prettier-ignore\\nimport {\\n    Utils,\\n    AlreadyExists,\\n    DoesNotExist,\\n    InvalidParam,\\n    InvalidPoolCollection,\\n    InvalidStakedBalance\\n} from \\\"../utility/Utils.sol\\\";\\n\\nimport { INetworkSettings, NotWhitelisted } from \\\"../network/interfaces/INetworkSettings.sol\\\";\\nimport { IBancorNetwork } from \\\"../network/interfaces/IBancorNetwork.sol\\\";\\n\\nimport { IPoolToken } from \\\"./interfaces/IPoolToken.sol\\\";\\nimport { IPoolTokenFactory } from \\\"./interfaces/IPoolTokenFactory.sol\\\";\\nimport { IPoolMigrator } from \\\"./interfaces/IPoolMigrator.sol\\\";\\n\\n// prettier-ignore\\nimport {\\n    AverageRates,\\n    IPoolCollection,\\n    PoolLiquidity,\\n    Pool,\\n    TRADING_STATUS_UPDATE_DEFAULT,\\n    TRADING_STATUS_UPDATE_ADMIN,\\n    TRADING_STATUS_UPDATE_MIN_LIQUIDITY,\\n    TRADING_STATUS_UPDATE_INVALID_STATE,\\n    TradeAmountAndFee,\\n    WithdrawalAmounts\\n} from \\\"./interfaces/IPoolCollection.sol\\\";\\n\\nimport { IBNTPool } from \\\"./interfaces/IBNTPool.sol\\\";\\n\\nimport { PoolCollectionWithdrawal } from \\\"./PoolCollectionWithdrawal.sol\\\";\\n\\n// base token withdrawal output amounts\\nstruct InternalWithdrawalAmounts {\\n    uint256 baseTokensToTransferFromMasterVault; // base token amount to transfer from the master vault to the provider\\n    uint256 bntToMintForProvider; // BNT amount to mint directly for the provider\\n    uint256 baseTokensToTransferFromEPV; // base token amount to transfer from the external protection vault to the provider\\n    Sint256 baseTokensTradingLiquidityDelta; // base token amount to add to the trading liquidity\\n    Sint256 bntTradingLiquidityDelta; // BNT amount to add to the trading liquidity and to the master vault\\n    Sint256 bntProtocolHoldingsDelta; // BNT amount add to the protocol equity\\n    uint256 baseTokensWithdrawalFee; // base token amount to keep in the pool as a withdrawal fee\\n    uint256 baseTokensWithdrawalAmount; // base token amount equivalent to the base pool token's withdrawal amount\\n    uint256 poolTokenAmount; // base pool token\\n    uint256 poolTokenTotalSupply; // base pool token's total supply\\n    uint256 newBaseTokenTradingLiquidity; // new base token trading liquidity\\n    uint256 newBNTTradingLiquidity; // new BNT trading liquidity\\n}\\n\\nstruct TradingLiquidityAction {\\n    bool update;\\n    uint256 newBNTTradingLiquidity;\\n    uint256 newBaseTokenTradingLiquidity;\\n}\\n\\nenum PoolRateState {\\n    Uninitialized,\\n    Unstable,\\n    Stable\\n}\\n\\n/**\\n * @dev Pool Collection contract\\n *\\n * notes:\\n *\\n * - the address of reserve token serves as the pool unique ID in both contract functions and events\\n */\\ncontract PoolCollection is IPoolCollection, Owned, BlockNumber, Utils {\\n    using TokenLibrary for Token;\\n    using FractionLibrary for Fraction;\\n    using FractionLibrary for Fraction112;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using SafeCast for uint256;\\n\\n    error AlreadyEnabled();\\n    error DepositingDisabled();\\n    error InsufficientLiquidity();\\n    error InsufficientSourceAmount();\\n    error InsufficientTargetAmount();\\n    error InvalidRate();\\n    error RateUnstable();\\n    error TradingDisabled();\\n    error FundingLimitTooHigh();\\n\\n    uint16 private constant POOL_TYPE = 1;\\n    uint256 private constant LIQUIDITY_GROWTH_FACTOR = 2;\\n    uint256 private constant BOOTSTRAPPING_LIQUIDITY_BUFFER_FACTOR = 2;\\n    uint32 private constant DEFAULT_TRADING_FEE_PPM = 2_000; // 0.2%\\n    uint32 private constant RATE_MAX_DEVIATION_PPM = 10_000; // %1\\n    uint32 private constant RATE_RESET_BLOCK_THRESHOLD = 100;\\n\\n    // the average rate is recalculated based on the ratio between the weights of the rates the smaller the weights are,\\n    // the larger the supported range of each one of the rates is\\n    uint256 private constant EMA_AVERAGE_RATE_WEIGHT = 4;\\n    uint256 private constant EMA_SPOT_RATE_WEIGHT = 1;\\n\\n    struct TradeIntermediateResult {\\n        uint256 sourceAmount;\\n        uint256 targetAmount;\\n        uint256 limit;\\n        uint256 tradingFeeAmount;\\n        uint256 networkFeeAmount;\\n        uint256 sourceBalance;\\n        uint256 targetBalance;\\n        uint256 stakedBalance;\\n        Token pool;\\n        bool isSourceBNT;\\n        bool bySourceAmount;\\n        uint32 tradingFeePPM;\\n        bytes32 contextId;\\n    }\\n\\n    struct TradeAmountAndTradingFee {\\n        uint256 amount;\\n        uint256 tradingFeeAmount;\\n    }\\n\\n    // the network contract\\n    IBancorNetwork private immutable _network;\\n\\n    // the address of the BNT token\\n    IERC20 private immutable _bnt;\\n\\n    // the network settings contract\\n    INetworkSettings private immutable _networkSettings;\\n\\n    // the master vault contract\\n    IMasterVault private immutable _masterVault;\\n\\n    // the BNT pool contract\\n    IBNTPool internal immutable _bntPool;\\n\\n    // the address of the external protection vault\\n    IExternalProtectionVault private immutable _externalProtectionVault;\\n\\n    // the pool token factory contract\\n    IPoolTokenFactory private immutable _poolTokenFactory;\\n\\n    // the pool migrator contract\\n    IPoolMigrator private immutable _poolMigrator;\\n\\n    // the global network fee (in units of PPM)\\n    uint32 private immutable _networkFeePPM;\\n\\n    // a mapping between tokens and their pools\\n    mapping(Token => Pool) internal _poolData;\\n\\n    // the set of all pools which are managed by this pool collection\\n    EnumerableSet.AddressSet private _pools;\\n\\n    // the default trading fee (in units of PPM)\\n    uint32 private _defaultTradingFeePPM;\\n\\n    bool private _protectionEnabled = true;\\n\\n    /**\\n     * @dev triggered when the default trading fee is updated\\n     */\\n    event DefaultTradingFeePPMUpdated(uint32 prevFeePPM, uint32 newFeePPM);\\n\\n    /**\\n     * @dev triggered when a specific pool's trading fee is updated\\n     */\\n    event TradingFeePPMUpdated(Token indexed pool, uint32 prevFeePPM, uint32 newFeePPM);\\n\\n    /**\\n     * @dev triggered when trading in a specific pool is enabled/disabled\\n     */\\n    event TradingEnabled(Token indexed pool, bool indexed newStatus, uint8 indexed reason);\\n\\n    /**\\n     * @dev triggered when depositing into a specific pool is enabled/disabled\\n     */\\n    event DepositingEnabled(Token indexed pool, bool indexed newStatus);\\n\\n    /**\\n     * @dev triggered when new liquidity is deposited into a pool\\n     */\\n    event TokensDeposited(\\n        bytes32 indexed contextId,\\n        address indexed provider,\\n        Token indexed token,\\n        uint256 baseTokenAmount,\\n        uint256 poolTokenAmount\\n    );\\n\\n    /**\\n     * @dev triggered when existing liquidity is withdrawn from a pool\\n     */\\n    event TokensWithdrawn(\\n        bytes32 indexed contextId,\\n        address indexed provider,\\n        Token indexed token,\\n        uint256 baseTokenAmount,\\n        uint256 poolTokenAmount,\\n        uint256 externalProtectionBaseTokenAmount,\\n        uint256 bntAmount,\\n        uint256 withdrawalFeeAmount\\n    );\\n\\n    /**\\n     * @dev triggered when the trading liquidity in a pool is updated\\n     */\\n    event TradingLiquidityUpdated(\\n        bytes32 indexed contextId,\\n        Token indexed pool,\\n        Token indexed token,\\n        uint256 prevLiquidity,\\n        uint256 newLiquidity\\n    );\\n\\n    /**\\n     * @dev triggered when the total liquidity in a pool is updated\\n     */\\n    event TotalLiquidityUpdated(\\n        bytes32 indexed contextId,\\n        Token indexed pool,\\n        uint256 liquidity,\\n        uint256 stakedBalance,\\n        uint256 poolTokenSupply\\n    );\\n\\n    /**\\n     * @dev initializes a new PoolCollection contract\\n     */\\n    constructor(\\n        IBancorNetwork initNetwork,\\n        IERC20 initBNT,\\n        INetworkSettings initNetworkSettings,\\n        IMasterVault initMasterVault,\\n        IBNTPool initBNTPool,\\n        IExternalProtectionVault initExternalProtectionVault,\\n        IPoolTokenFactory initPoolTokenFactory,\\n        IPoolMigrator initPoolMigrator,\\n        uint32 initNetworkFeePPM\\n    ) {\\n        _validAddress(address(initNetwork));\\n        _validAddress(address(initBNT));\\n        _validAddress(address(initNetworkSettings));\\n        _validAddress(address(initMasterVault));\\n        _validAddress(address(initBNTPool));\\n        _validAddress(address(initExternalProtectionVault));\\n        _validAddress(address(initPoolTokenFactory));\\n        _validAddress(address(initPoolMigrator));\\n        _validFee(initNetworkFeePPM);\\n\\n        _network = initNetwork;\\n        _bnt = initBNT;\\n        _networkSettings = initNetworkSettings;\\n        _masterVault = initMasterVault;\\n        _bntPool = initBNTPool;\\n        _externalProtectionVault = initExternalProtectionVault;\\n        _poolTokenFactory = initPoolTokenFactory;\\n        _poolMigrator = initPoolMigrator;\\n        _networkFeePPM = initNetworkFeePPM;\\n\\n        _setDefaultTradingFeePPM(DEFAULT_TRADING_FEE_PPM);\\n    }\\n\\n    /**\\n     * @inheritdoc IVersioned\\n     */\\n    function version() external view virtual returns (uint16) {\\n        return 7;\\n    }\\n\\n    /**\\n     * @inheritdoc IPoolCollection\\n     */\\n    function poolType() external view virtual returns (uint16) {\\n        return POOL_TYPE;\\n    }\\n\\n    /**\\n     * @inheritdoc IPoolCollection\\n     */\\n    function defaultTradingFeePPM() external view returns (uint32) {\\n        return _defaultTradingFeePPM;\\n    }\\n\\n    /**\\n     * @inheritdoc IPoolCollection\\n     */\\n    function networkFeePPM() external view returns (uint32) {\\n        return _networkFeePPM;\\n    }\\n\\n    /**\\n     * @inheritdoc IPoolCollection\\n     */\\n    function pools() external view returns (Token[] memory) {\\n        uint256 length = _pools.length();\\n        Token[] memory list = new Token[](length);\\n        for (uint256 i = 0; i < length; i++) {\\n            list[i] = Token(_pools.at(i));\\n        }\\n        return list;\\n    }\\n\\n    /**\\n     * @inheritdoc IPoolCollection\\n     */\\n    function poolCount() external view returns (uint256) {\\n        return _pools.length();\\n    }\\n\\n    /**\\n     * @dev sets the default trading fee (in units of PPM)\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the owner of the contract\\n     */\\n    function setDefaultTradingFeePPM(uint32 newDefaultTradingFeePPM)\\n        external\\n        onlyOwner\\n        validFee(newDefaultTradingFeePPM)\\n    {\\n        _setDefaultTradingFeePPM(newDefaultTradingFeePPM);\\n    }\\n\\n    /**\\n     * @dev enables/disables protection\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the owner of the contract\\n     */\\n    function enableProtection(bool status) external onlyOwner {\\n        if (_protectionEnabled == status) {\\n            return;\\n        }\\n\\n        _protectionEnabled = status;\\n    }\\n\\n    /**\\n     * @dev returns the status of the protection\\n     */\\n    function protectionEnabled() external view returns (bool) {\\n        return _protectionEnabled;\\n    }\\n\\n    /**\\n     * @inheritdoc IPoolCollection\\n     */\\n    function createPool(Token token) external only(address(_network)) {\\n        if (!_networkSettings.isTokenWhitelisted(token)) {\\n            revert NotWhitelisted();\\n        }\\n\\n        IPoolToken newPoolToken = IPoolToken(_poolTokenFactory.createPoolToken(token));\\n\\n        newPoolToken.acceptOwnership();\\n\\n        Pool memory newPool = Pool({\\n            poolToken: newPoolToken,\\n            tradingFeePPM: _defaultTradingFeePPM,\\n            tradingEnabled: false,\\n            depositingEnabled: true,\\n            averageRates: AverageRates({ blockNumber: 0, rate: zeroFraction112(), invRate: zeroFraction112() }),\\n            liquidity: PoolLiquidity({ bntTradingLiquidity: 0, baseTokenTradingLiquidity: 0, stakedBalance: 0 })\\n        });\\n\\n        _addPool(token, newPool);\\n\\n        emit TradingEnabled({ pool: token, newStatus: newPool.tradingEnabled, reason: TRADING_STATUS_UPDATE_DEFAULT });\\n        emit TradingFeePPMUpdated({ pool: token, prevFeePPM: 0, newFeePPM: newPool.tradingFeePPM });\\n        emit DepositingEnabled({ pool: token, newStatus: newPool.depositingEnabled });\\n    }\\n\\n    /**\\n     * @inheritdoc IPoolCollection\\n     */\\n    function isPoolValid(Token pool) external view returns (bool) {\\n        return address(_poolData[pool].poolToken) != address(0);\\n    }\\n\\n    /**\\n     * @dev returns specific pool's data\\n     *\\n     * notes:\\n     *\\n     * - there is no guarantee that this function will remains forward compatible, so please avoid relying on it and\\n     *   rely on specific getters from the IPoolCollection interface instead\\n     */\\n    function poolData(Token pool) external view returns (Pool memory) {\\n        return _poolData[pool];\\n    }\\n\\n    /**\\n     * @inheritdoc IPoolCollection\\n     */\\n    function poolLiquidity(Token pool) external view returns (PoolLiquidity memory) {\\n        return _poolData[pool].liquidity;\\n    }\\n\\n    /**\\n     * @inheritdoc IPoolCollection\\n     */\\n    function poolToken(Token pool) external view returns (IPoolToken) {\\n        return _poolData[pool].poolToken;\\n    }\\n\\n    /**\\n     * @inheritdoc IPoolCollection\\n     */\\n    function tradingFeePPM(Token pool) external view returns (uint32) {\\n        return _poolData[pool].tradingFeePPM;\\n    }\\n\\n    /**\\n     * @inheritdoc IPoolCollection\\n     */\\n    function tradingEnabled(Token pool) external view returns (bool) {\\n        return _poolData[pool].tradingEnabled;\\n    }\\n\\n    /**\\n     * @inheritdoc IPoolCollection\\n     */\\n    function depositingEnabled(Token pool) external view returns (bool) {\\n        return _poolData[pool].depositingEnabled;\\n    }\\n\\n    /**\\n     * @inheritdoc IPoolCollection\\n     */\\n    function poolTokenToUnderlying(Token pool, uint256 poolTokenAmount) external view returns (uint256) {\\n        Pool storage data = _poolData[pool];\\n\\n        return _poolTokenToUnderlying(poolTokenAmount, data.poolToken.totalSupply(), data.liquidity.stakedBalance);\\n    }\\n\\n    /**\\n     * @inheritdoc IPoolCollection\\n     */\\n    function underlyingToPoolToken(Token pool, uint256 baseTokenAmount) external view returns (uint256) {\\n        Pool storage data = _poolData[pool];\\n\\n        return _underlyingToPoolToken(baseTokenAmount, data.poolToken.totalSupply(), data.liquidity.stakedBalance);\\n    }\\n\\n    /**\\n     * @inheritdoc IPoolCollection\\n     */\\n    function poolTokenAmountToBurn(\\n        Token pool,\\n        uint256 baseTokenAmountToDistribute,\\n        uint256 protocolPoolTokenAmount\\n    ) external view returns (uint256) {\\n        if (baseTokenAmountToDistribute == 0) {\\n            return 0;\\n        }\\n\\n        Pool storage data = _poolData[pool];\\n\\n        uint256 poolTokenSupply = data.poolToken.totalSupply();\\n        uint256 val = baseTokenAmountToDistribute * poolTokenSupply;\\n\\n        return\\n            MathEx.mulDivF(\\n                val,\\n                poolTokenSupply,\\n                val + data.liquidity.stakedBalance * (poolTokenSupply - protocolPoolTokenAmount)\\n            );\\n    }\\n\\n    /**\\n     * @inheritdoc IPoolCollection\\n     */\\n    function isPoolStable(Token pool) external view returns (bool) {\\n        Pool storage data = _poolData[pool];\\n\\n        return _poolRateState(data) == PoolRateState.Stable;\\n    }\\n\\n    /**\\n     * @dev sets the trading fee of a given pool\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the owner of the contract\\n     */\\n    function setTradingFeePPM(Token pool, uint32 newTradingFeePPM) external onlyOwner validFee(newTradingFeePPM) {\\n        Pool storage data = _poolStorage(pool);\\n\\n        uint32 prevTradingFeePPM = data.tradingFeePPM;\\n        if (prevTradingFeePPM == newTradingFeePPM) {\\n            return;\\n        }\\n\\n        data.tradingFeePPM = newTradingFeePPM;\\n\\n        emit TradingFeePPMUpdated({ pool: pool, prevFeePPM: prevTradingFeePPM, newFeePPM: newTradingFeePPM });\\n    }\\n\\n    /**\\n     * @dev enables trading in a given pool, by providing the funding rate as two virtual balances, and updates its\\n     * trading liquidity\\n     *\\n     * please note that the virtual balances should be derived from token prices, normalized to the smallest unit of\\n     * tokens. In other words, the ratio between BNT and TKN virtual balances should be the ratio between the $ value\\n     * of 1 wei of TKN and 1 wei of BNT, taking both of their decimals into account. For example:\\n     *\\n     * - if the price of one (10**18 wei) BNT is $X and the price of one (10**18 wei) TKN is $Y, then the virtual balances\\n     *   should represent a ratio of X to Y\\n     * - if the price of one (10**18 wei) BNT is $X and the price of one (10**6 wei) USDC is $Y, then the virtual balances\\n     *   should represent a ratio of X to Y*10**12\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the owner of the contract\\n     */\\n    function enableTrading(\\n        Token pool,\\n        uint256 bntVirtualBalance,\\n        uint256 baseTokenVirtualBalance\\n    ) external onlyOwner {\\n        Fraction memory fundingRate = Fraction({ n: bntVirtualBalance, d: baseTokenVirtualBalance });\\n        _validRate(fundingRate);\\n\\n        Pool storage data = _poolStorage(pool);\\n\\n        if (data.tradingEnabled) {\\n            revert AlreadyEnabled();\\n        }\\n\\n        // adjust the trading liquidity based on the base token vault balance and funding limits\\n        bytes32 contextId = keccak256(abi.encodePacked(msg.sender, pool, bntVirtualBalance, baseTokenVirtualBalance));\\n        uint256 minLiquidityForTrading = _networkSettings.minLiquidityForTrading();\\n        _updateTradingLiquidity(contextId, pool, data, fundingRate, minLiquidityForTrading);\\n\\n        // verify that the BNT trading liquidity is equal or greater than the minimum liquidity for trading\\n        if (data.liquidity.bntTradingLiquidity < minLiquidityForTrading) {\\n            revert InsufficientLiquidity();\\n        }\\n\\n        Fraction112 memory fundingRate112 = fundingRate.toFraction112();\\n        data.averageRates = AverageRates({\\n            blockNumber: _blockNumber(),\\n            rate: fundingRate112,\\n            invRate: fundingRate112.inverse()\\n        });\\n\\n        data.tradingEnabled = true;\\n\\n        emit TradingEnabled({ pool: pool, newStatus: true, reason: TRADING_STATUS_UPDATE_ADMIN });\\n    }\\n\\n    /**\\n     * @dev disables trading in a given pool\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the owner of the contract\\n     */\\n    function disableTrading(Token pool) external onlyOwner {\\n        Pool storage data = _poolStorage(pool);\\n\\n        _resetTradingLiquidity(bytes32(0), pool, data, TRADING_STATUS_UPDATE_ADMIN);\\n    }\\n\\n    /**\\n     * @dev enables/disables depositing into a given pool\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the owner of the contract\\n     */\\n    function enableDepositing(Token pool, bool status) external onlyOwner {\\n        Pool storage data = _poolStorage(pool);\\n\\n        if (data.depositingEnabled == status) {\\n            return;\\n        }\\n\\n        data.depositingEnabled = status;\\n\\n        emit DepositingEnabled({ pool: pool, newStatus: status });\\n    }\\n\\n    /**\\n     * @inheritdoc IPoolCollection\\n     */\\n    function depositFor(\\n        bytes32 contextId,\\n        address provider,\\n        Token pool,\\n        uint256 baseTokenAmount\\n    ) external only(address(_network)) validAddress(provider) greaterThanZero(baseTokenAmount) returns (uint256) {\\n        Pool storage data = _poolStorage(pool);\\n\\n        if (!data.depositingEnabled) {\\n            revert DepositingDisabled();\\n        }\\n\\n        PoolLiquidity memory prevLiquidity = data.liquidity;\\n        uint256 currentStakedBalance = prevLiquidity.stakedBalance;\\n\\n        // if there are no pool tokens available to support the staked balance - reset the\\n        // trading liquidity and the staked balance\\n        // in addition, get the effective average rates\\n        uint256 prevPoolTokenTotalSupply = data.poolToken.totalSupply();\\n        AverageRates memory effectiveAverageRates;\\n        if (prevPoolTokenTotalSupply == 0 && currentStakedBalance != 0) {\\n            currentStakedBalance = 0;\\n\\n            _resetTradingLiquidity(contextId, pool, data, TRADING_STATUS_UPDATE_INVALID_STATE);\\n            effectiveAverageRates = AverageRates({\\n                blockNumber: 0,\\n                rate: zeroFraction112(),\\n                invRate: zeroFraction112()\\n            });\\n        } else {\\n            effectiveAverageRates = _effectiveAverageRates(\\n                data.averageRates,\\n                Fraction({ n: prevLiquidity.bntTradingLiquidity, d: prevLiquidity.baseTokenTradingLiquidity })\\n            );\\n        }\\n\\n        // calculate the pool token amount to mint\\n        uint256 poolTokenAmount = _underlyingToPoolToken(\\n            baseTokenAmount,\\n            prevPoolTokenTotalSupply,\\n            currentStakedBalance\\n        );\\n\\n        // update the staked balance with the full base token amount\\n        data.liquidity.stakedBalance = currentStakedBalance + baseTokenAmount;\\n\\n        // mint pool tokens to the provider\\n        data.poolToken.mint(provider, poolTokenAmount);\\n\\n        // adjust the trading liquidity based on the base token vault balance and funding limits\\n        _updateTradingLiquidity(\\n            contextId,\\n            pool,\\n            data,\\n            effectiveAverageRates.rate.fromFraction112(),\\n            _networkSettings.minLiquidityForTrading()\\n        );\\n\\n        // if trading is enabled, then update the recent average rates\\n        if (data.tradingEnabled) {\\n            _updateAverageRates(\\n                data,\\n                Fraction({ n: data.liquidity.bntTradingLiquidity, d: data.liquidity.baseTokenTradingLiquidity })\\n            );\\n        }\\n\\n        emit TokensDeposited({\\n            contextId: contextId,\\n            provider: provider,\\n            token: pool,\\n            baseTokenAmount: baseTokenAmount,\\n            poolTokenAmount: poolTokenAmount\\n        });\\n\\n        _dispatchTradingLiquidityEvents(\\n            contextId,\\n            pool,\\n            prevPoolTokenTotalSupply + poolTokenAmount,\\n            prevLiquidity,\\n            data.liquidity\\n        );\\n\\n        return poolTokenAmount;\\n    }\\n\\n    /**\\n     * @inheritdoc IPoolCollection\\n     */\\n    function withdraw(\\n        bytes32 contextId,\\n        address provider,\\n        Token pool,\\n        uint256 poolTokenAmount,\\n        uint256 baseTokenAmount\\n    )\\n        external\\n        only(address(_network))\\n        validAddress(provider)\\n        greaterThanZero(poolTokenAmount)\\n        greaterThanZero(baseTokenAmount)\\n        returns (uint256)\\n    {\\n        Pool storage data = _poolStorage(pool);\\n        PoolLiquidity memory liquidity = data.liquidity;\\n\\n        uint256 poolTokenTotalSupply = data.poolToken.totalSupply();\\n        uint256 underlyingAmount = _poolTokenToUnderlying(\\n            poolTokenAmount,\\n            poolTokenTotalSupply,\\n            liquidity.stakedBalance\\n        );\\n\\n        if (baseTokenAmount > underlyingAmount) {\\n            revert InvalidParam();\\n        }\\n\\n        if (_poolRateState(data) == PoolRateState.Unstable) {\\n            revert RateUnstable();\\n        }\\n\\n        // obtain the withdrawal amounts\\n        InternalWithdrawalAmounts memory amounts = _poolWithdrawalAmounts(\\n            pool,\\n            poolTokenAmount,\\n            baseTokenAmount,\\n            liquidity,\\n            data.tradingFeePPM,\\n            poolTokenTotalSupply\\n        );\\n\\n        // execute the actual withdrawal\\n        _executeWithdrawal(contextId, provider, pool, data, amounts);\\n\\n        // if trading is enabled, then update the recent average rates\\n        if (data.tradingEnabled) {\\n            _updateAverageRates(\\n                data,\\n                Fraction({ n: data.liquidity.bntTradingLiquidity, d: data.liquidity.baseTokenTradingLiquidity })\\n            );\\n        }\\n\\n        return amounts.baseTokensToTransferFromMasterVault;\\n    }\\n\\n    /**\\n     * @inheritdoc IPoolCollection\\n     */\\n    function withdrawalAmounts(Token pool, uint256 poolTokenAmount)\\n        external\\n        view\\n        validAddress(address(pool))\\n        greaterThanZero(poolTokenAmount)\\n        returns (WithdrawalAmounts memory)\\n    {\\n        Pool storage data = _poolData[pool];\\n        PoolLiquidity memory liquidity = data.liquidity;\\n\\n        uint256 poolTokenTotalSupply = data.poolToken.totalSupply();\\n        uint256 underlyingAmount = _poolTokenToUnderlying(\\n            poolTokenAmount,\\n            poolTokenTotalSupply,\\n            liquidity.stakedBalance\\n        );\\n\\n        InternalWithdrawalAmounts memory amounts = _poolWithdrawalAmounts(\\n            pool,\\n            poolTokenAmount,\\n            underlyingAmount,\\n            liquidity,\\n            data.tradingFeePPM,\\n            poolTokenTotalSupply\\n        );\\n\\n        return\\n            WithdrawalAmounts({\\n                totalAmount: amounts.baseTokensWithdrawalAmount - amounts.baseTokensWithdrawalFee,\\n                baseTokenAmount: amounts.baseTokensToTransferFromMasterVault + amounts.baseTokensToTransferFromEPV,\\n                bntAmount: _protectionEnabled ? amounts.bntToMintForProvider : 0\\n            });\\n    }\\n\\n    /**\\n     * @inheritdoc IPoolCollection\\n     */\\n    function tradeBySourceAmount(\\n        bytes32 contextId,\\n        Token sourceToken,\\n        Token targetToken,\\n        uint256 sourceAmount,\\n        uint256 minReturnAmount\\n    )\\n        external\\n        only(address(_network))\\n        greaterThanZero(sourceAmount)\\n        greaterThanZero(minReturnAmount)\\n        returns (TradeAmountAndFee memory)\\n    {\\n        TradeIntermediateResult memory result = _initTrade(\\n            contextId,\\n            sourceToken,\\n            targetToken,\\n            sourceAmount,\\n            minReturnAmount,\\n            true\\n        );\\n\\n        _performTrade(result);\\n\\n        return\\n            TradeAmountAndFee({\\n                amount: result.targetAmount,\\n                tradingFeeAmount: result.tradingFeeAmount,\\n                networkFeeAmount: result.networkFeeAmount\\n            });\\n    }\\n\\n    /**\\n     * @inheritdoc IPoolCollection\\n     */\\n    function tradeByTargetAmount(\\n        bytes32 contextId,\\n        Token sourceToken,\\n        Token targetToken,\\n        uint256 targetAmount,\\n        uint256 maxSourceAmount\\n    )\\n        external\\n        only(address(_network))\\n        greaterThanZero(targetAmount)\\n        greaterThanZero(maxSourceAmount)\\n        returns (TradeAmountAndFee memory)\\n    {\\n        TradeIntermediateResult memory result = _initTrade(\\n            contextId,\\n            sourceToken,\\n            targetToken,\\n            targetAmount,\\n            maxSourceAmount,\\n            false\\n        );\\n\\n        _performTrade(result);\\n\\n        return\\n            TradeAmountAndFee({\\n                amount: result.sourceAmount,\\n                tradingFeeAmount: result.tradingFeeAmount,\\n                networkFeeAmount: result.networkFeeAmount\\n            });\\n    }\\n\\n    /**\\n     * @inheritdoc IPoolCollection\\n     */\\n    function tradeOutputAndFeeBySourceAmount(\\n        Token sourceToken,\\n        Token targetToken,\\n        uint256 sourceAmount\\n    ) external view greaterThanZero(sourceAmount) returns (TradeAmountAndFee memory) {\\n        TradeIntermediateResult memory result = _initTrade(bytes32(0), sourceToken, targetToken, sourceAmount, 1, true);\\n\\n        _processTrade(result);\\n\\n        return\\n            TradeAmountAndFee({\\n                amount: result.targetAmount,\\n                tradingFeeAmount: result.tradingFeeAmount,\\n                networkFeeAmount: result.networkFeeAmount\\n            });\\n    }\\n\\n    /**\\n     * @inheritdoc IPoolCollection\\n     */\\n    function tradeInputAndFeeByTargetAmount(\\n        Token sourceToken,\\n        Token targetToken,\\n        uint256 targetAmount\\n    ) external view greaterThanZero(targetAmount) returns (TradeAmountAndFee memory) {\\n        TradeIntermediateResult memory result = _initTrade(\\n            bytes32(0),\\n            sourceToken,\\n            targetToken,\\n            targetAmount,\\n            type(uint256).max,\\n            false\\n        );\\n\\n        _processTrade(result);\\n\\n        return\\n            TradeAmountAndFee({\\n                amount: result.sourceAmount,\\n                tradingFeeAmount: result.tradingFeeAmount,\\n                networkFeeAmount: result.networkFeeAmount\\n            });\\n    }\\n\\n    /**\\n     * @inheritdoc IPoolCollection\\n     */\\n    function onFeesCollected(Token pool, uint256 feeAmount) external only(address(_network)) {\\n        if (feeAmount == 0) {\\n            return;\\n        }\\n\\n        Pool storage data = _poolStorage(pool);\\n\\n        // increase the staked balance by the given amount\\n        data.liquidity.stakedBalance += feeAmount;\\n    }\\n\\n    /**\\n     * @inheritdoc IPoolCollection\\n     */\\n    function migratePoolIn(Token pool, Pool calldata data)\\n        external\\n        validAddress(address(pool))\\n        only(address(_poolMigrator))\\n    {\\n        _addPool(pool, data);\\n\\n        data.poolToken.acceptOwnership();\\n    }\\n\\n    /**\\n     * @inheritdoc IPoolCollection\\n     */\\n    function migratePoolOut(Token pool, IPoolCollection targetPoolCollection)\\n        external\\n        validAddress(address(targetPoolCollection))\\n        only(address(_poolMigrator))\\n    {\\n        IPoolToken cachedPoolToken = _poolData[pool].poolToken;\\n\\n        _removePool(pool);\\n\\n        cachedPoolToken.transferOwnership(address(targetPoolCollection));\\n    }\\n\\n    /**\\n     * @dev adds a pool\\n     */\\n    function _addPool(Token pool, Pool memory data) private {\\n        if (!_pools.add(address(pool))) {\\n            revert AlreadyExists();\\n        }\\n\\n        _poolData[pool] = data;\\n    }\\n\\n    /**\\n     * @dev removes a pool\\n     */\\n    function _removePool(Token pool) private {\\n        if (!_pools.remove(address(pool))) {\\n            revert DoesNotExist();\\n        }\\n\\n        delete _poolData[pool];\\n    }\\n\\n    /**\\n     * @dev returns withdrawal amounts\\n     */\\n    function _poolWithdrawalAmounts(\\n        Token pool,\\n        uint256 poolTokenAmount,\\n        uint256 baseTokensWithdrawalAmount,\\n        PoolLiquidity memory liquidity,\\n        uint32 poolTradingFeePPM,\\n        uint256 poolTokenTotalSupply\\n    ) internal view returns (InternalWithdrawalAmounts memory) {\\n        // the base token trading liquidity of a given pool can never be higher than the base token balance of the vault\\n        // whenever the base token trading liquidity is updated, it is set to at most the base token balance of the vault\\n        uint256 baseTokenExcessAmount = pool.balanceOf(address(_masterVault)) - liquidity.baseTokenTradingLiquidity;\\n\\n        PoolCollectionWithdrawal.Output memory output = PoolCollectionWithdrawal.calculateWithdrawalAmounts(\\n            liquidity.bntTradingLiquidity,\\n            liquidity.baseTokenTradingLiquidity,\\n            baseTokenExcessAmount,\\n            liquidity.stakedBalance,\\n            pool.balanceOf(address(_externalProtectionVault)),\\n            poolTradingFeePPM,\\n            _networkSettings.withdrawalFeePPM(),\\n            baseTokensWithdrawalAmount\\n        );\\n\\n        return\\n            InternalWithdrawalAmounts({\\n                baseTokensToTransferFromMasterVault: output.s,\\n                bntToMintForProvider: output.t,\\n                baseTokensToTransferFromEPV: output.u,\\n                baseTokensTradingLiquidityDelta: output.r,\\n                bntTradingLiquidityDelta: output.p,\\n                bntProtocolHoldingsDelta: output.q,\\n                baseTokensWithdrawalFee: output.v,\\n                baseTokensWithdrawalAmount: baseTokensWithdrawalAmount,\\n                poolTokenAmount: poolTokenAmount,\\n                poolTokenTotalSupply: poolTokenTotalSupply,\\n                newBaseTokenTradingLiquidity: output.r.isNeg\\n                    ? liquidity.baseTokenTradingLiquidity - output.r.value\\n                    : liquidity.baseTokenTradingLiquidity + output.r.value,\\n                newBNTTradingLiquidity: output.p.isNeg\\n                    ? liquidity.bntTradingLiquidity - output.p.value\\n                    : liquidity.bntTradingLiquidity + output.p.value\\n            });\\n    }\\n\\n    /**\\n     * @dev executes the following actions:\\n     *\\n     * - burn the network's base pool tokens\\n     * - update the pool's base token staked balance\\n     * - update the pool's base token trading liquidity\\n     * - update the pool's BNT trading liquidity\\n     * - update the pool's trading liquidity product\\n     * - emit an event if the pool's BNT trading liquidity has crossed the minimum threshold\\n     *   (either above the threshold or below the threshold)\\n     */\\n    function _executeWithdrawal(\\n        bytes32 contextId,\\n        address provider,\\n        Token pool,\\n        Pool storage data,\\n        InternalWithdrawalAmounts memory amounts\\n    ) private {\\n        PoolLiquidity storage liquidity = data.liquidity;\\n        PoolLiquidity memory prevLiquidity = liquidity;\\n\\n        data.poolToken.burn(amounts.poolTokenAmount);\\n\\n        uint256 newPoolTokenTotalSupply = amounts.poolTokenTotalSupply - amounts.poolTokenAmount;\\n\\n        liquidity.stakedBalance = MathEx.mulDivF(\\n            liquidity.stakedBalance,\\n            newPoolTokenTotalSupply,\\n            amounts.poolTokenTotalSupply\\n        );\\n\\n        // trading liquidity is assumed to never exceed 128 bits (the cast below will revert otherwise)\\n        liquidity.baseTokenTradingLiquidity = amounts.newBaseTokenTradingLiquidity.toUint128();\\n        liquidity.bntTradingLiquidity = amounts.newBNTTradingLiquidity.toUint128();\\n\\n        if (amounts.bntProtocolHoldingsDelta.value > 0) {\\n            assert(amounts.bntProtocolHoldingsDelta.isNeg); // currently no support for requesting funding here\\n\\n            _bntPool.renounceFunding(contextId, pool, amounts.bntProtocolHoldingsDelta.value);\\n        } else if (amounts.bntTradingLiquidityDelta.value > 0) {\\n            if (amounts.bntTradingLiquidityDelta.isNeg) {\\n                _bntPool.burnFromVault(amounts.bntTradingLiquidityDelta.value);\\n            } else {\\n                _bntPool.mint(address(_masterVault), amounts.bntTradingLiquidityDelta.value);\\n            }\\n        }\\n\\n        // if the provider should receive some BNT - ask the BNT pool to mint BNT to the provider\\n        bool isProtectionEnabled = _protectionEnabled;\\n        if (amounts.bntToMintForProvider > 0 && isProtectionEnabled) {\\n            _bntPool.mint(address(provider), amounts.bntToMintForProvider);\\n        }\\n\\n        // if the provider should receive some base tokens from the external protection vault - remove the tokens from\\n        // the external protection vault and send them to the master vault\\n        if (amounts.baseTokensToTransferFromEPV > 0) {\\n            _externalProtectionVault.withdrawFunds(\\n                pool,\\n                payable(address(_masterVault)),\\n                amounts.baseTokensToTransferFromEPV\\n            );\\n            amounts.baseTokensToTransferFromMasterVault += amounts.baseTokensToTransferFromEPV;\\n        }\\n\\n        // if the provider should receive some base tokens from the master vault - remove the tokens from the master\\n        // vault and send them to the provider\\n        if (amounts.baseTokensToTransferFromMasterVault > 0) {\\n            _masterVault.withdrawFunds(pool, payable(provider), amounts.baseTokensToTransferFromMasterVault);\\n        }\\n\\n        // ensure that the average rate is reset when the pool is being emptied\\n        if (amounts.newBaseTokenTradingLiquidity == 0) {\\n            data.averageRates.rate = zeroFraction112();\\n            data.averageRates.invRate = zeroFraction112();\\n        }\\n\\n        // if the new BNT trading liquidity is below the minimum liquidity for trading - reset the liquidity\\n        if (amounts.newBNTTradingLiquidity < _networkSettings.minLiquidityForTrading()) {\\n            _resetTradingLiquidity(\\n                contextId,\\n                pool,\\n                data,\\n                amounts.newBNTTradingLiquidity,\\n                TRADING_STATUS_UPDATE_MIN_LIQUIDITY\\n            );\\n        }\\n\\n        emit TokensWithdrawn({\\n            contextId: contextId,\\n            provider: provider,\\n            token: pool,\\n            baseTokenAmount: amounts.baseTokensToTransferFromMasterVault,\\n            poolTokenAmount: amounts.poolTokenAmount,\\n            externalProtectionBaseTokenAmount: amounts.baseTokensToTransferFromEPV,\\n            bntAmount: isProtectionEnabled ? amounts.bntToMintForProvider : 0,\\n            withdrawalFeeAmount: amounts.baseTokensWithdrawalFee\\n        });\\n\\n        _dispatchTradingLiquidityEvents(contextId, pool, newPoolTokenTotalSupply, prevLiquidity, data.liquidity);\\n    }\\n\\n    /**\\n     * @dev sets the default trading fee (in units of PPM)\\n     */\\n    function _setDefaultTradingFeePPM(uint32 newDefaultTradingFeePPM) private {\\n        uint32 prevDefaultTradingFeePPM = _defaultTradingFeePPM;\\n        if (prevDefaultTradingFeePPM == newDefaultTradingFeePPM) {\\n            return;\\n        }\\n\\n        _defaultTradingFeePPM = newDefaultTradingFeePPM;\\n\\n        emit DefaultTradingFeePPMUpdated({ prevFeePPM: prevDefaultTradingFeePPM, newFeePPM: newDefaultTradingFeePPM });\\n    }\\n\\n    /**\\n     * @dev returns a storage reference to pool data\\n     */\\n    function _poolStorage(Token pool) private view returns (Pool storage) {\\n        Pool storage data = _poolData[pool];\\n        if (address(data.poolToken) == address(0)) {\\n            revert DoesNotExist();\\n        }\\n\\n        return data;\\n    }\\n\\n    /**\\n     * @dev calculates base tokens amount\\n     */\\n    function _poolTokenToUnderlying(\\n        uint256 poolTokenAmount,\\n        uint256 poolTokenSupply,\\n        uint256 stakedBalance\\n    ) private pure returns (uint256) {\\n        if (poolTokenSupply == 0) {\\n            // if this is the initial liquidity provision - use a one-to-one pool token to base token rate\\n            if (stakedBalance > 0) {\\n                revert InvalidStakedBalance();\\n            }\\n\\n            return poolTokenAmount;\\n        }\\n\\n        return MathEx.mulDivF(poolTokenAmount, stakedBalance, poolTokenSupply);\\n    }\\n\\n    /**\\n     * @dev calculates pool tokens amount\\n     */\\n    function _underlyingToPoolToken(\\n        uint256 baseTokenAmount,\\n        uint256 poolTokenSupply,\\n        uint256 stakedBalance\\n    ) private pure returns (uint256) {\\n        if (poolTokenSupply == 0) {\\n            // if this is the initial liquidity provision - use a one-to-one pool token to base token rate\\n            if (stakedBalance > 0) {\\n                revert InvalidStakedBalance();\\n            }\\n\\n            return baseTokenAmount;\\n        }\\n\\n        return MathEx.mulDivC(baseTokenAmount, poolTokenSupply, stakedBalance);\\n    }\\n\\n    /**\\n     * @dev calculates the target trading liquidities, taking into account the total out-of-curve base token liquidity,\\n     * and the deltas between the new and the previous states\\n     */\\n    function _calcTargetTradingLiquidity(\\n        uint256 totalBaseTokenReserveAmount,\\n        uint256 availableFunding,\\n        PoolLiquidity memory liquidity,\\n        Fraction memory fundingRate,\\n        uint256 minLiquidityForTrading\\n    ) private pure returns (TradingLiquidityAction memory) {\\n        // calculate the target BNT trading liquidity delta based on the smaller between the following:\\n        // - BNT liquidity required to match the total out-of-curve based token liquidity\\n        // - available BNT funding\\n        uint256 totalTokenDeltaAmount = totalBaseTokenReserveAmount - liquidity.baseTokenTradingLiquidity;\\n        uint256 targetBNTTradingLiquidityDelta = Math.min(\\n            MathEx.mulDivF(totalTokenDeltaAmount, fundingRate.n, fundingRate.d),\\n            availableFunding\\n        );\\n        uint256 targetBNTTradingLiquidity = liquidity.bntTradingLiquidity + targetBNTTradingLiquidityDelta;\\n\\n        // ensure that the target is above the minimum liquidity for trading\\n        if (targetBNTTradingLiquidity < minLiquidityForTrading) {\\n            return TradingLiquidityAction({ update: true, newBNTTradingLiquidity: 0, newBaseTokenTradingLiquidity: 0 });\\n        }\\n\\n        // calculate the new BNT trading liquidity and cap it by the growth factor\\n        if (liquidity.bntTradingLiquidity == 0) {\\n            // if the current BNT trading liquidity is 0, set it to the minimum liquidity for trading (with an\\n            // additional buffer so that initial trades will be less likely to trigger disabling of trading)\\n            uint256 newTargetBNTTradingLiquidity = minLiquidityForTrading * BOOTSTRAPPING_LIQUIDITY_BUFFER_FACTOR;\\n\\n            // ensure that we're not allocating more than the previously established limits\\n            if (newTargetBNTTradingLiquidity > targetBNTTradingLiquidity) {\\n                return\\n                    TradingLiquidityAction({\\n                        update: false,\\n                        newBNTTradingLiquidity: 0,\\n                        newBaseTokenTradingLiquidity: 0\\n                    });\\n            }\\n\\n            targetBNTTradingLiquidity = newTargetBNTTradingLiquidity;\\n        } else if (targetBNTTradingLiquidity >= liquidity.bntTradingLiquidity) {\\n            // if the target is above the current trading liquidity, limit it by factoring the current value up. Please\\n            // note that if the target is below the current trading liquidity - it will be reduced to it immediately\\n            targetBNTTradingLiquidity = Math.min(\\n                targetBNTTradingLiquidity,\\n                liquidity.bntTradingLiquidity * LIQUIDITY_GROWTH_FACTOR\\n            );\\n        }\\n\\n        // calculate the base token trading liquidity based on the delta between the new and the previous BNT trading\\n        // liquidity and the effective funding rate (please note that the effective funding rate is always the rate\\n        // between BNT and the base token)\\n        uint256 bntTradingLiquidityDelta = targetBNTTradingLiquidity - liquidity.bntTradingLiquidity;\\n        uint256 baseTokenTradingLiquidityDelta = bntTradingLiquidityDelta == 0\\n            ? 0\\n            : MathEx.mulDivF(bntTradingLiquidityDelta, fundingRate.d, fundingRate.n);\\n\\n        return\\n            TradingLiquidityAction({\\n                update: true,\\n                newBNTTradingLiquidity: targetBNTTradingLiquidity,\\n                newBaseTokenTradingLiquidity: liquidity.baseTokenTradingLiquidity + baseTokenTradingLiquidityDelta\\n            });\\n    }\\n\\n    /**\\n     * @dev adjusts the trading liquidity based on the newly added tokens delta amount, and funding limits\\n     */\\n    function _updateTradingLiquidity(\\n        bytes32 contextId,\\n        Token pool,\\n        Pool storage data,\\n        Fraction memory fundingRate,\\n        uint256 minLiquidityForTrading\\n    ) private {\\n        // ensure that the base token reserve isn't empty\\n        uint256 totalBaseTokenReserveAmount = pool.balanceOf(address(_masterVault));\\n        if (totalBaseTokenReserveAmount == 0) {\\n            revert InsufficientLiquidity();\\n        }\\n\\n        PoolLiquidity memory liquidity = data.liquidity;\\n\\n        if (_poolRateState(data) == PoolRateState.Unstable) {\\n            return;\\n        }\\n\\n        if (!fundingRate.isPositive()) {\\n            _resetTradingLiquidity(contextId, pool, data, TRADING_STATUS_UPDATE_MIN_LIQUIDITY);\\n\\n            return;\\n        }\\n\\n        TradingLiquidityAction memory action = _calcTargetTradingLiquidity(\\n            totalBaseTokenReserveAmount,\\n            _bntPool.availableFunding(pool),\\n            liquidity,\\n            fundingRate,\\n            minLiquidityForTrading\\n        );\\n\\n        if (!action.update) {\\n            return;\\n        }\\n\\n        if (action.newBNTTradingLiquidity == 0 || action.newBaseTokenTradingLiquidity == 0) {\\n            _resetTradingLiquidity(contextId, pool, data, TRADING_STATUS_UPDATE_MIN_LIQUIDITY);\\n\\n            return;\\n        }\\n\\n        // update funding from the BNT pool\\n        if (action.newBNTTradingLiquidity > liquidity.bntTradingLiquidity) {\\n            _bntPool.requestFunding(contextId, pool, action.newBNTTradingLiquidity - liquidity.bntTradingLiquidity);\\n        } else if (action.newBNTTradingLiquidity < liquidity.bntTradingLiquidity) {\\n            _bntPool.renounceFunding(contextId, pool, liquidity.bntTradingLiquidity - action.newBNTTradingLiquidity);\\n        }\\n\\n        // trading liquidity is assumed to never exceed 128 bits (the cast below will revert otherwise)\\n        PoolLiquidity memory newLiquidity = PoolLiquidity({\\n            bntTradingLiquidity: action.newBNTTradingLiquidity.toUint128(),\\n            baseTokenTradingLiquidity: action.newBaseTokenTradingLiquidity.toUint128(),\\n            stakedBalance: liquidity.stakedBalance\\n        });\\n\\n        // update the liquidity data of the pool\\n        data.liquidity = newLiquidity;\\n\\n        _dispatchTradingLiquidityEvents(contextId, pool, data.poolToken.totalSupply(), liquidity, newLiquidity);\\n    }\\n\\n    function _dispatchTradingLiquidityEvents(\\n        bytes32 contextId,\\n        Token pool,\\n        PoolLiquidity memory prevLiquidity,\\n        PoolLiquidity memory newLiquidity\\n    ) private {\\n        if (newLiquidity.bntTradingLiquidity != prevLiquidity.bntTradingLiquidity) {\\n            emit TradingLiquidityUpdated({\\n                contextId: contextId,\\n                pool: pool,\\n                token: Token(address(_bnt)),\\n                prevLiquidity: prevLiquidity.bntTradingLiquidity,\\n                newLiquidity: newLiquidity.bntTradingLiquidity\\n            });\\n        }\\n\\n        if (newLiquidity.baseTokenTradingLiquidity != prevLiquidity.baseTokenTradingLiquidity) {\\n            emit TradingLiquidityUpdated({\\n                contextId: contextId,\\n                pool: pool,\\n                token: pool,\\n                prevLiquidity: prevLiquidity.baseTokenTradingLiquidity,\\n                newLiquidity: newLiquidity.baseTokenTradingLiquidity\\n            });\\n        }\\n    }\\n\\n    function _dispatchTradingLiquidityEvents(\\n        bytes32 contextId,\\n        Token pool,\\n        uint256 poolTokenTotalSupply,\\n        PoolLiquidity memory prevLiquidity,\\n        PoolLiquidity memory newLiquidity\\n    ) private {\\n        _dispatchTradingLiquidityEvents(contextId, pool, prevLiquidity, newLiquidity);\\n\\n        if (newLiquidity.stakedBalance != prevLiquidity.stakedBalance) {\\n            emit TotalLiquidityUpdated({\\n                contextId: contextId,\\n                pool: pool,\\n                liquidity: pool.balanceOf(address(_masterVault)),\\n                stakedBalance: newLiquidity.stakedBalance,\\n                poolTokenSupply: poolTokenTotalSupply\\n            });\\n        }\\n    }\\n\\n    /**\\n     * @dev resets trading liquidity and renounces any remaining BNT funding\\n     */\\n    function _resetTradingLiquidity(\\n        bytes32 contextId,\\n        Token pool,\\n        Pool storage data,\\n        uint8 reason\\n    ) private {\\n        _resetTradingLiquidity(contextId, pool, data, data.liquidity.bntTradingLiquidity, reason);\\n    }\\n\\n    /**\\n     * @dev resets trading liquidity and renounces any remaining BNT funding\\n     */\\n    function _resetTradingLiquidity(\\n        bytes32 contextId,\\n        Token pool,\\n        Pool storage data,\\n        uint256 currentBNTTradingLiquidity,\\n        uint8 reason\\n    ) private {\\n        // reset the network and base token trading liquidities\\n        data.liquidity.bntTradingLiquidity = 0;\\n        data.liquidity.baseTokenTradingLiquidity = 0;\\n\\n        // reset the recent average rage\\n        data.averageRates = AverageRates({ blockNumber: 0, rate: zeroFraction112(), invRate: zeroFraction112() });\\n\\n        // ensure that trading is disabled\\n        if (data.tradingEnabled) {\\n            data.tradingEnabled = false;\\n\\n            emit TradingEnabled({ pool: pool, newStatus: false, reason: reason });\\n        }\\n\\n        // renounce all network liquidity\\n        if (currentBNTTradingLiquidity > 0) {\\n            _bntPool.renounceFunding(contextId, pool, currentBNTTradingLiquidity);\\n        }\\n    }\\n\\n    /**\\n     * @dev returns initial trading params\\n     */\\n    function _initTrade(\\n        bytes32 contextId,\\n        Token sourceToken,\\n        Token targetToken,\\n        uint256 amount,\\n        uint256 limit,\\n        bool bySourceAmount\\n    ) private view returns (TradeIntermediateResult memory result) {\\n        // ensure that BNT is either the source or the target token\\n        bool isSourceBNT = sourceToken.isEqual(_bnt);\\n        bool isTargetBNT = targetToken.isEqual(_bnt);\\n\\n        if (isSourceBNT && !isTargetBNT) {\\n            result.isSourceBNT = true;\\n            result.pool = targetToken;\\n        } else if (!isSourceBNT && isTargetBNT) {\\n            result.isSourceBNT = false;\\n            result.pool = sourceToken;\\n        } else {\\n            // BNT isn't one of the tokens or is both of them\\n            revert DoesNotExist();\\n        }\\n\\n        Pool storage data = _poolStorage(result.pool);\\n\\n        // verify that trading is enabled\\n        if (!data.tradingEnabled) {\\n            revert TradingDisabled();\\n        }\\n\\n        result.contextId = contextId;\\n        result.bySourceAmount = bySourceAmount;\\n\\n        if (result.bySourceAmount) {\\n            result.sourceAmount = amount;\\n        } else {\\n            result.targetAmount = amount;\\n        }\\n\\n        result.limit = limit;\\n        result.tradingFeePPM = data.tradingFeePPM;\\n\\n        PoolLiquidity memory liquidity = data.liquidity;\\n        if (result.isSourceBNT) {\\n            result.sourceBalance = liquidity.bntTradingLiquidity;\\n            result.targetBalance = liquidity.baseTokenTradingLiquidity;\\n        } else {\\n            result.sourceBalance = liquidity.baseTokenTradingLiquidity;\\n            result.targetBalance = liquidity.bntTradingLiquidity;\\n        }\\n\\n        result.stakedBalance = liquidity.stakedBalance;\\n    }\\n\\n    /**\\n     * @dev returns trade amount and fee by providing the source amount\\n     */\\n    function _tradeAmountAndFeeBySourceAmount(\\n        uint256 sourceBalance,\\n        uint256 targetBalance,\\n        uint32 feePPM,\\n        uint256 sourceAmount\\n    ) private pure returns (TradeAmountAndTradingFee memory) {\\n        if (sourceBalance == 0 || targetBalance == 0) {\\n            revert InsufficientLiquidity();\\n        }\\n\\n        uint256 targetAmount = MathEx.mulDivF(targetBalance, sourceAmount, sourceBalance + sourceAmount);\\n        uint256 tradingFeeAmount = MathEx.mulDivF(targetAmount, feePPM, PPM_RESOLUTION);\\n\\n        return\\n            TradeAmountAndTradingFee({ amount: targetAmount - tradingFeeAmount, tradingFeeAmount: tradingFeeAmount });\\n    }\\n\\n    /**\\n     * @dev returns trade amount and fee by providing either the target amount\\n     */\\n    function _tradeAmountAndFeeByTargetAmount(\\n        uint256 sourceBalance,\\n        uint256 targetBalance,\\n        uint32 feePPM,\\n        uint256 targetAmount\\n    ) private pure returns (TradeAmountAndTradingFee memory) {\\n        if (sourceBalance == 0) {\\n            revert InsufficientLiquidity();\\n        }\\n\\n        uint256 tradingFeeAmount = MathEx.mulDivF(targetAmount, feePPM, PPM_RESOLUTION - feePPM);\\n        uint256 fullTargetAmount = targetAmount + tradingFeeAmount;\\n        uint256 sourceAmount = MathEx.mulDivF(sourceBalance, fullTargetAmount, targetBalance - fullTargetAmount);\\n\\n        return TradeAmountAndTradingFee({ amount: sourceAmount, tradingFeeAmount: tradingFeeAmount });\\n    }\\n\\n    /**\\n     * @dev processes a trade by providing either the source or the target amount and updates the in-memory intermediate\\n     * result\\n     */\\n    function _processTrade(TradeIntermediateResult memory result) private view {\\n        TradeAmountAndTradingFee memory tradeAmountAndFee;\\n\\n        if (result.bySourceAmount) {\\n            tradeAmountAndFee = _tradeAmountAndFeeBySourceAmount(\\n                result.sourceBalance,\\n                result.targetBalance,\\n                result.tradingFeePPM,\\n                result.sourceAmount\\n            );\\n\\n            result.targetAmount = tradeAmountAndFee.amount;\\n\\n            // ensure that the target amount is above the requested minimum return amount\\n            if (result.targetAmount < result.limit) {\\n                revert InsufficientTargetAmount();\\n            }\\n        } else {\\n            tradeAmountAndFee = _tradeAmountAndFeeByTargetAmount(\\n                result.sourceBalance,\\n                result.targetBalance,\\n                result.tradingFeePPM,\\n                result.targetAmount\\n            );\\n\\n            result.sourceAmount = tradeAmountAndFee.amount;\\n\\n            // ensure that the user has provided enough tokens to make the trade\\n            if (result.sourceAmount == 0 || result.sourceAmount > result.limit) {\\n                revert InsufficientSourceAmount();\\n            }\\n        }\\n\\n        result.tradingFeeAmount = tradeAmountAndFee.tradingFeeAmount;\\n\\n        // sync the trading and staked balance\\n        result.sourceBalance += result.sourceAmount;\\n        result.targetBalance -= result.targetAmount;\\n\\n        if (result.isSourceBNT) {\\n            result.stakedBalance += result.tradingFeeAmount;\\n        }\\n\\n        _processNetworkFee(result);\\n    }\\n\\n    /**\\n     * @dev processes the network fee and updates the in-memory intermediate result\\n     */\\n    function _processNetworkFee(TradeIntermediateResult memory result) private view {\\n        if (_networkFeePPM == 0) {\\n            return;\\n        }\\n\\n        // calculate the target network fee amount\\n        uint256 targetNetworkFeeAmount = MathEx.mulDivF(result.tradingFeeAmount, _networkFeePPM, PPM_RESOLUTION);\\n\\n        // update the target balance (but don't deduct it from the full trading fee amount)\\n        result.targetBalance -= targetNetworkFeeAmount;\\n\\n        if (!result.isSourceBNT) {\\n            result.networkFeeAmount = targetNetworkFeeAmount;\\n\\n            return;\\n        }\\n\\n        // trade the network fee (taken from the base token) to BNT\\n        result.networkFeeAmount = _tradeAmountAndFeeBySourceAmount(\\n            result.targetBalance,\\n            result.sourceBalance,\\n            0,\\n            targetNetworkFeeAmount\\n        ).amount;\\n\\n        // since we have received the network fee in base tokens and have traded them for BNT (so that the network fee\\n        // is always kept in BNT), we'd need to adapt the trading liquidity and the staked balance accordingly\\n        result.targetBalance += targetNetworkFeeAmount;\\n        result.sourceBalance -= result.networkFeeAmount;\\n        result.stakedBalance -= targetNetworkFeeAmount;\\n    }\\n\\n    /**\\n     * @dev performs a trade\\n     */\\n    function _performTrade(TradeIntermediateResult memory result) private {\\n        Pool storage data = _poolData[result.pool];\\n        PoolLiquidity memory prevLiquidity = data.liquidity;\\n\\n        // update the recent average rate\\n        _updateAverageRates(\\n            data,\\n            Fraction({ n: prevLiquidity.bntTradingLiquidity, d: prevLiquidity.baseTokenTradingLiquidity })\\n        );\\n\\n        _processTrade(result);\\n\\n        // trading liquidity is assumed to never exceed 128 bits (the cast below will revert otherwise)\\n        PoolLiquidity memory newLiquidity = PoolLiquidity({\\n            bntTradingLiquidity: (result.isSourceBNT ? result.sourceBalance : result.targetBalance).toUint128(),\\n            baseTokenTradingLiquidity: (result.isSourceBNT ? result.targetBalance : result.sourceBalance).toUint128(),\\n            stakedBalance: result.stakedBalance\\n        });\\n\\n        _dispatchTradingLiquidityEvents(result.contextId, result.pool, prevLiquidity, newLiquidity);\\n\\n        // update the liquidity data of the pool\\n        data.liquidity = newLiquidity;\\n    }\\n\\n    /**\\n     * @dev returns the state of a pool's rate\\n     */\\n    function _poolRateState(Pool storage data) internal view returns (PoolRateState) {\\n        Fraction memory spotRate = Fraction({\\n            n: data.liquidity.bntTradingLiquidity,\\n            d: data.liquidity.baseTokenTradingLiquidity\\n        });\\n\\n        AverageRates memory averageRates = data.averageRates;\\n        Fraction112 memory rate = averageRates.rate;\\n        if (!spotRate.isPositive() || !rate.isPositive()) {\\n            return PoolRateState.Uninitialized;\\n        }\\n\\n        Fraction memory invSpotRate = spotRate.inverse();\\n        Fraction112 memory invRate = averageRates.invRate;\\n        if (!invSpotRate.isPositive() || !invRate.isPositive()) {\\n            return PoolRateState.Uninitialized;\\n        }\\n\\n        AverageRates memory effectiveAverageRates = _effectiveAverageRates(averageRates, spotRate);\\n\\n        if (\\n            MathEx.isInRange(effectiveAverageRates.rate.fromFraction112(), spotRate, RATE_MAX_DEVIATION_PPM) &&\\n            MathEx.isInRange(effectiveAverageRates.invRate.fromFraction112(), invSpotRate, RATE_MAX_DEVIATION_PPM)\\n        ) {\\n            return PoolRateState.Stable;\\n        }\\n\\n        return PoolRateState.Unstable;\\n    }\\n\\n    /**\\n     * @dev updates the average rates\\n     */\\n    function _updateAverageRates(Pool storage data, Fraction memory spotRate) private {\\n        data.averageRates = _effectiveAverageRates(data.averageRates, spotRate);\\n    }\\n\\n    /**\\n     * @dev returns the effective average rates\\n     */\\n    function _effectiveAverageRates(AverageRates memory averageRates, Fraction memory spotRate)\\n        private\\n        view\\n        returns (AverageRates memory)\\n    {\\n        uint32 blockNumber = _blockNumber();\\n\\n        // can only be updated once in a single block\\n        uint32 prevUpdateBlock = averageRates.blockNumber;\\n        if (prevUpdateBlock == blockNumber) {\\n            return averageRates;\\n        }\\n\\n        // if sufficient blocks have passed, or if one of the rates isn't positive,\\n        // reset the average rates\\n        if (\\n            blockNumber - prevUpdateBlock >= RATE_RESET_BLOCK_THRESHOLD ||\\n            !averageRates.rate.isPositive() ||\\n            !averageRates.invRate.isPositive()\\n        ) {\\n            if (spotRate.isPositive()) {\\n                return\\n                    AverageRates({\\n                        blockNumber: blockNumber,\\n                        rate: spotRate.toFraction112(),\\n                        invRate: spotRate.inverse().toFraction112()\\n                    });\\n            }\\n\\n            return AverageRates({ blockNumber: 0, rate: zeroFraction112(), invRate: zeroFraction112() });\\n        }\\n\\n        return\\n            AverageRates({\\n                blockNumber: blockNumber,\\n                rate: _calcAverageRate(averageRates.rate, spotRate),\\n                invRate: _calcAverageRate(averageRates.invRate, spotRate.inverse())\\n            });\\n    }\\n\\n    /**\\n     * @dev calculates the average rate\\n     */\\n    function _calcAverageRate(Fraction112 memory averageRate, Fraction memory rate)\\n        private\\n        pure\\n        returns (Fraction112 memory)\\n    {\\n        if (rate.n * averageRate.d == rate.d * averageRate.n) {\\n            return averageRate;\\n        }\\n\\n        return\\n            MathEx\\n                .weightedAverage(averageRate.fromFraction112(), rate, EMA_AVERAGE_RATE_WEIGHT, EMA_SPOT_RATE_WEIGHT)\\n                .toFraction112();\\n    }\\n\\n    /**\\n     * @dev verifies if the provided rate is valid\\n     */\\n    function _validRate(Fraction memory rate) internal pure {\\n        if (!rate.isPositive()) {\\n            revert InvalidRate();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c93ed65e0f92ae5f8a8db73efcffd581b1b95db00f4a93310b66e58785ebe32\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/pools/PoolCollectionWithdrawal.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.13;\\n\\nimport { PPM_RESOLUTION as M } from \\\"../utility/Constants.sol\\\";\\nimport { Sint256, Uint512, MathEx } from \\\"../utility/MathEx.sol\\\";\\n\\nerror PoolCollectionWithdrawalInputInvalid();\\n\\n/**\\n * @dev This library implements the mathematics behind base-token withdrawal.\\n * It exposes a single function which takes the following input values:\\n * `a` - BNT trading liquidity\\n * `b` - base token trading liquidity\\n * `c` - base token excess amount\\n * `e` - base token staked amount\\n * `w` - base token external protection vault balance\\n * `m` - trading fee in PPM units\\n * `n` - withdrawal fee in PPM units\\n * `x` - base token withdrawal amount\\n * And returns the following output values:\\n * `p` - BNT amount to add to the trading liquidity and to the master vault\\n * `q` - BNT amount to add to the protocol equity\\n * `r` - base token amount to add to the trading liquidity\\n * `s` - base token amount to transfer from the master vault to the provider\\n * `t` - BNT amount to mint directly for the provider\\n * `u` - base token amount to transfer from the external protection vault to the provider\\n * `v` - base token amount to keep in the pool as a withdrawal fee\\n * The following table depicts the actual formulae based on the current state of the system:\\n * +-----------+---------------------------------------------------------+----------------------------------------------------------+\\n * |           |                         Deficit                         |                       Surplus                            |\\n * +-----------+---------------------------------------------------------+----------------------------------------------------------+\\n * |           | p = a*x*(e*(1-n)-b-c)*(1-m)/(b*e-x*(e*(1-n)-b-c)*(1-m)) | p = -a*x*(b+c-e*(1-n))/(b*e*(1-m)+x*(b+c-e*(1-n))*(1-m)) |\\n * |           | q = 0                                                   | q = 0                                                    |\\n * |           | r = -x*(e*(1-n)-b-c)/e                                  | r = x*(b+c-e*(1-n))/e                                    |\\n * | Arbitrage | s = x*(1-n)                                             | s = x*(1-n)                                              |\\n * |           | t = 0                                                   | t = 0                                                    |\\n * |           | u = 0                                                   | u = 0                                                    |\\n * |           | v = x*n                                                 | v = x*n                                                  |\\n * +-----------+---------------------------------------------------------+----------------------------------------------------------+\\n * |           | p = -a*z/(b*e) where z = max(x*(1-n)*b-c*(e-x*(1-n)),0) | p = -a*z/b where z = max(x*(1-n)-c,0)                    |\\n * |           | q = -a*z/(b*e) where z = max(x*(1-n)*b-c*(e-x*(1-n)),0) | q = -a*z/b where z = max(x*(1-n)-c,0)                    |\\n * |           | r = -z/e       where z = max(x*(1-n)*b-c*(e-x*(1-n)),0) | r = -z     where z = max(x*(1-n)-c,0)                    |\\n * | Default   | s = x*(1-n)*(b+c)/e                                     | s = x*(1-n)                                              |\\n * |           | t = see function `externalProtection`                   | t = 0                                                    |\\n * |           | u = see function `externalProtection`                   | u = 0                                                    |\\n * |           | v = x*n                                                 | v = x*n                                                  |\\n * +-----------+---------------------------------------------------------+----------------------------------------------------------+\\n * |           | p = 0                                                   | p = 0                                                    |\\n * |           | q = 0                                                   | q = 0                                                    |\\n * |           | r = 0                                                   | r = 0                                                    |\\n * | Bootstrap | s = x*(1-n)*c/e                                         | s = x*(1-n)                                              |\\n * |           | t = see function `externalProtection`                   | t = 0                                                    |\\n * |           | u = see function `externalProtection`                   | u = 0                                                    |\\n * |           | v = x*n                                                 | v = x*n                                                  |\\n * +-----------+---------------------------------------------------------+----------------------------------------------------------+\\n * Note that for the sake of illustration, both `m` and `n` are assumed normalized (between 0 and 1).\\n * During runtime, it is taken into account that they are given in PPM units (between 0 and 1000000).\\n */\\nlibrary PoolCollectionWithdrawal {\\n    using MathEx for uint256;\\n\\n    struct Output {\\n        Sint256 p;\\n        Sint256 q;\\n        Sint256 r;\\n        uint256 s;\\n        uint256 t;\\n        uint256 u;\\n        uint256 v;\\n    }\\n\\n    /**\\n     * @dev returns `p`, `q`, `r`, `s`, `t`, `u` and `v` according to the current state:\\n     * +-------------------+-----------------------------------------------------------+\\n     * | `e > (b+c)/(1-n)` | bootstrap deficit or default deficit or arbitrage deficit |\\n     * +-------------------+-----------------------------------------------------------+\\n     * | `e < (b+c)`       | bootstrap surplus or default surplus or arbitrage surplus |\\n     * +-------------------+-----------------------------------------------------------+\\n     * | otherwise         | bootstrap surplus or default surplus                      |\\n     * +-------------------+-----------------------------------------------------------+\\n     */\\n    function calculateWithdrawalAmounts(\\n        uint256 a, // <= 2**128-1\\n        uint256 b, // <= 2**128-1\\n        uint256 c, // <= 2**128-1\\n        uint256 e, // <= 2**128-1\\n        uint256 w, // <= 2**128-1\\n        uint256 m, // <= M == 1000000\\n        uint256 n, // <= M == 1000000\\n        uint256 x /// <= e <= 2**128-1\\n    ) internal pure returns (Output memory output) {\\n        if (\\n            a > type(uint128).max ||\\n            b > type(uint128).max ||\\n            c > type(uint128).max ||\\n            e > type(uint128).max ||\\n            w > type(uint128).max ||\\n            m > M ||\\n            n > M ||\\n            x > e\\n        ) {\\n            revert PoolCollectionWithdrawalInputInvalid();\\n        }\\n\\n        uint256 y = (x * (M - n)) / M;\\n\\n        if ((e * (M - n)) / M > b + c) {\\n            uint256 f = (e * (M - n)) / M - (b + c);\\n            uint256 g = e - (b + c);\\n            if (isStable(b, c, e, x) && affordableDeficit(b, e, f, g, m, n, x)) {\\n                output = arbitrageDeficit(a, b, e, f, m, x, y);\\n            } else if (a > 0) {\\n                output = defaultDeficit(a, b, c, e, y);\\n                (output.t, output.u) = externalProtection(a, b, e, g, y, w);\\n            } else {\\n                output.s = (y * c) / e;\\n                (output.t, output.u) = externalProtection(a, b, e, g, y, w);\\n            }\\n        } else {\\n            uint256 f = MathEx.subMax0(b + c, e);\\n            if (f > 0 && isStable(b, c, e, x) && affordableSurplus(b, e, f, m, n, x)) {\\n                output = arbitrageSurplus(a, b, e, f, m, n, x, y);\\n            } else if (a > 0) {\\n                output = defaultSurplus(a, b, c, y);\\n            } else {\\n                output.s = y;\\n            }\\n        }\\n\\n        output.v = x - y;\\n    }\\n\\n    /**\\n     * @dev returns `x < e*c/(b+c)`\\n     */\\n    function isStable(\\n        uint256 b, // <= 2**128-1\\n        uint256 c, // <= 2**128-1\\n        uint256 e, // <= 2**128-1\\n        uint256 x /// <= e <= 2**128-1\\n    ) private pure returns (bool) {\\n        return b * x < c * (e - x);\\n    }\\n\\n    /**\\n     * @dev returns `b*e*((e*(1-n)-b-c)*m+e*n) > (e*(1-n)-b-c)*x*(e-b-c)*(1-m)`\\n     */\\n    function affordableDeficit(\\n        uint256, /*b*/ // <= 2**128-1\\n        uint256, /*e*/ // <= 2**128-1\\n        uint256, /*f*/ // == e*(1-n)-b-c <= e <= 2**128-1\\n        uint256, /*g*/ // == e-b-c <= e <= 2**128-1\\n        uint256, /*m*/ // <= M == 1000000\\n        uint256, /*n*/ // <= M == 1000000\\n        uint256 /*x*/ /// <  e*c/(b+c) <= e <= 2**128-1\\n    ) private pure returns (bool) {\\n        // temporarily disabled\\n        //Uint512 memory lhs = MathEx.mul512(b * e, f * m + e * n);\\n        //Uint512 memory rhs = MathEx.mul512(f * x, g * (M - m));\\n        //return MathEx.gt512(lhs, rhs);\\n        return false;\\n    }\\n\\n    /**\\n     * @dev returns `b*e*((b+c-e)*m+e*n) > (b+c-e)*x*(b+c-e*(1-n))*(1-m)`\\n     */\\n    function affordableSurplus(\\n        uint256 b, // <= 2**128-1\\n        uint256 e, // <= 2**128-1\\n        uint256 f, // == b+c-e <= 2**129-2\\n        uint256 m, // <= M == 1000000\\n        uint256 n, // <= M == 1000000\\n        uint256 x /// <  e*c/(b+c) <= e <= 2**128-1\\n    ) private pure returns (bool) {\\n        Uint512 memory lhs = MathEx.mul512(b * e, (f * m + e * n) * M);\\n        Uint512 memory rhs = MathEx.mul512(f * x, (f * M + e * n) * (M - m));\\n        return MathEx.gt512(lhs, rhs); // `x < e*c/(b+c)` --> `f*x < e*c*(b+c-e)/(b+c) <= e*c <= 2**256-1`\\n    }\\n\\n    /**\\n     * @dev returns:\\n     * `p = a*x*(e*(1-n)-b-c)*(1-m)/(b*e-x*(e*(1-n)-b-c)*(1-m))`\\n     * `q = 0`\\n     * `r = -x*(e*(1-n)-b-c)/e`\\n     * `s = x*(1-n)`\\n     */\\n    function arbitrageDeficit(\\n        uint256 a, // <= 2**128-1\\n        uint256 b, // <= 2**128-1\\n        uint256 e, // <= 2**128-1\\n        uint256 f, // == e*(1-n)-b-c <= e <= 2**128-1\\n        uint256 m, // <= M == 1000000\\n        uint256 x, // <= e <= 2**128-1\\n        uint256 y /// == x*(1-n) <= x <= e <= 2**128-1\\n    ) private pure returns (Output memory output) {\\n        uint256 i = f * (M - m);\\n        uint256 j = mulSubMulDivF(b, e * M, x, i, 1);\\n        output.p = MathEx.mulDivF(a * x, i, j).toPos256();\\n        output.r = MathEx.mulDivF(x, f, e).toNeg256();\\n        output.s = y;\\n    }\\n\\n    /**\\n     * @dev returns:\\n     * `p = -a*x*(b+c-e*(1-n))/(b*e*(1-m)+x*(b+c-e*(1-n))*(1-m))`\\n     * `q = 0`\\n     * `r = x*(b+c-e*(1-n))/e`\\n     * `s = x*(1-n)`\\n     */\\n    function arbitrageSurplus(\\n        uint256 a, // <= 2**128-1\\n        uint256 b, // <= 2**128-1\\n        uint256 e, // <= 2**128-1\\n        uint256 f, // == b+c-e <= 2**129-2\\n        uint256 m, // <= M == 1000000\\n        uint256 n, // <= M == 1000000\\n        uint256 x, // <= e <= 2**128-1\\n        uint256 y /// == x*(1-n) <= x <= e <= 2**128-1\\n    ) private pure returns (Output memory output) {\\n        uint256 i = f * M + e * n;\\n        uint256 j = mulAddMulDivF(b, e * (M - m), x, i * (M - m), M);\\n        output.p = MathEx.mulDivF(a * x, i, j).toNeg256();\\n        output.r = MathEx.mulDivF(x, i, e * M).toPos256();\\n        output.s = y;\\n    }\\n\\n    /**\\n     * @dev returns:\\n     * `p = -a*z/(b*e)` where `z = max(x*(1-n)*b-c*(e-x*(1-n)),0)`\\n     * `q = -a*z/(b*e)` where `z = max(x*(1-n)*b-c*(e-x*(1-n)),0)`\\n     * `r = -z/e` where `z = max(x*(1-n)*b-c*(e-x*(1-n)),0)`\\n     * `s = x*(1-n)*(b+c)/e`\\n     */\\n    function defaultDeficit(\\n        uint256 a, // <= 2**128-1\\n        uint256 b, // <= 2**128-1\\n        uint256 c, // <= 2**128-1\\n        uint256 e, // <= 2**128-1\\n        uint256 y /// == x*(1-n) <= x <= e <= 2**128-1\\n    ) private pure returns (Output memory output) {\\n        uint256 z = MathEx.subMax0(y * b, c * (e - y));\\n        output.p = MathEx.mulDivF(a, z, b * e).toNeg256();\\n        output.q = output.p;\\n        output.r = (z / e).toNeg256();\\n        output.s = MathEx.mulDivF(y, b + c, e);\\n    }\\n\\n    /**\\n     * @dev returns:\\n     * `p = -a*z/b` where `z = max(x*(1-n)-c,0)`\\n     * `q = -a*z/b` where `z = max(x*(1-n)-c,0)`\\n     * `r = -z` where `z = max(x*(1-n)-c,0)`\\n     * `s = x*(1-n)`\\n     */\\n    function defaultSurplus(\\n        uint256 a, // <= 2**128-1\\n        uint256 b, // <= 2**128-1\\n        uint256 c, // <= 2**128-1\\n        uint256 y /// == x*(1-n) <= x <= e <= 2**128-1\\n    ) private pure returns (Output memory output) {\\n        uint256 z = MathEx.subMax0(y, c);\\n        output.p = MathEx.mulDivF(a, z, b).toNeg256();\\n        output.q = output.p;\\n        output.r = z.toNeg256();\\n        output.s = y;\\n    }\\n\\n    /**\\n     * @dev returns `t` and `u` according to the current state:\\n     * +-----------------------+-------+---------------------------+-------------------+\\n     * | x*(1-n)*(e-b-c)/e > w | a > 0 | t                         | u                 |\\n     * +-----------------------+-------+---------------------------+-------------------+\\n     * | true                  | true  | a*(x*(1-n)*(e-b-c)/e-w)/b | w                 |\\n     * +-----------------------+-------+---------------------------+-------------------+\\n     * | true                  | false | 0                         | w                 |\\n     * +-----------------------+-------+---------------------------+-------------------+\\n     * | false                 | true  | 0                         | x*(1-n)*(e-b-c)/e |\\n     * +-----------------------+-------+---------------------------+-------------------+\\n     * | false                 | false | 0                         | x*(1-n)*(e-b-c)/e |\\n     * +-----------------------+-------+---------------------------+-------------------+\\n     */\\n    function externalProtection(\\n        uint256 a, // <= 2**128-1\\n        uint256 b, // <= 2**128-1\\n        uint256 e, // <= 2**128-1\\n        uint256 g, // == e-b-c <= e <= 2**128-1\\n        uint256 y, // == x*(1-n) <= x <= e <= 2**128-1\\n        uint256 w /// <= 2**128-1\\n    ) private pure returns (uint256 t, uint256 u) {\\n        uint256 yg = y * g;\\n        uint256 we = w * e;\\n        if (yg > we) {\\n            t = a > 0 ? MathEx.mulDivF(a, yg - we, b * e) : 0;\\n            u = w;\\n        } else {\\n            t = 0;\\n            u = yg / e;\\n        }\\n    }\\n\\n    /**\\n     * @dev returns `a*b+x*y/z`\\n     */\\n    function mulAddMulDivF(\\n        uint256 a,\\n        uint256 b,\\n        uint256 x,\\n        uint256 y,\\n        uint256 z\\n    ) private pure returns (uint256) {\\n        return a * b + MathEx.mulDivF(x, y, z);\\n    }\\n\\n    /**\\n     * @dev returns `a*b-x*y/z`\\n     */\\n    function mulSubMulDivF(\\n        uint256 a,\\n        uint256 b,\\n        uint256 x,\\n        uint256 y,\\n        uint256 z\\n    ) private pure returns (uint256) {\\n        return a * b - MathEx.mulDivF(x, y, z);\\n    }\\n}\\n\",\"keccak256\":\"0xb99782281a05b58f73747e02bc12eeac7fdd9af260efbf7e3f745381ed948e79\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/pools/interfaces/IBNTPool.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.13;\\n\\nimport { IPoolToken } from \\\"./IPoolToken.sol\\\";\\n\\nimport { Token } from \\\"../../token/Token.sol\\\";\\n\\nimport { IVault } from \\\"../../vaults/interfaces/IVault.sol\\\";\\n\\n// the BNT pool token manager role is required to access the BNT pool tokens\\nbytes32 constant ROLE_BNT_POOL_TOKEN_MANAGER = keccak256(\\\"ROLE_BNT_POOL_TOKEN_MANAGER\\\");\\n\\n// the BNT manager role is required to request the BNT pool to mint BNT\\nbytes32 constant ROLE_BNT_MANAGER = keccak256(\\\"ROLE_BNT_MANAGER\\\");\\n\\n// the vault manager role is required to request the BNT pool to burn BNT from the master vault\\nbytes32 constant ROLE_VAULT_MANAGER = keccak256(\\\"ROLE_VAULT_MANAGER\\\");\\n\\n// the funding manager role is required to request or renounce funding from the BNT pool\\nbytes32 constant ROLE_FUNDING_MANAGER = keccak256(\\\"ROLE_FUNDING_MANAGER\\\");\\n\\n/**\\n * @dev BNT Pool interface\\n */\\ninterface IBNTPool is IVault {\\n    /**\\n     * @dev returns the BNT pool token contract\\n     */\\n    function poolToken() external view returns (IPoolToken);\\n\\n    /**\\n     * @dev returns the total staked BNT balance in the network\\n     */\\n    function stakedBalance() external view returns (uint256);\\n\\n    /**\\n     * @dev returns the current funding of given pool\\n     */\\n    function currentPoolFunding(Token pool) external view returns (uint256);\\n\\n    /**\\n     * @dev returns the available BNT funding for a given pool\\n     */\\n    function availableFunding(Token pool) external view returns (uint256);\\n\\n    /**\\n     * @dev converts the specified pool token amount to the underlying BNT amount\\n     */\\n    function poolTokenToUnderlying(uint256 poolTokenAmount) external view returns (uint256);\\n\\n    /**\\n     * @dev converts the specified underlying BNT amount to pool token amount\\n     */\\n    function underlyingToPoolToken(uint256 bntAmount) external view returns (uint256);\\n\\n    /**\\n     * @dev returns the number of pool token to burn in order to increase everyone's underlying value by the specified\\n     * amount\\n     */\\n    function poolTokenAmountToBurn(uint256 bntAmountToDistribute) external view returns (uint256);\\n\\n    /**\\n     * @dev mints BNT to the recipient\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have the ROLE_BNT_MANAGER role\\n     */\\n    function mint(address recipient, uint256 bntAmount) external;\\n\\n    /**\\n     * @dev burns BNT from the vault\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have the ROLE_VAULT_MANAGER role\\n     */\\n    function burnFromVault(uint256 bntAmount) external;\\n\\n    /**\\n     * @dev deposits BNT liquidity on behalf of a specific provider and returns the respective pool token amount\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the network contract\\n     * - BNT tokens must have been already deposited into the contract\\n     */\\n    function depositFor(\\n        bytes32 contextId,\\n        address provider,\\n        uint256 bntAmount,\\n        bool isMigrating,\\n        uint256 originalVBNTAmount\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev withdraws BNT liquidity on behalf of a specific provider and returns the withdrawn BNT amount\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the network contract\\n     * - bnBNT token must have been already deposited into the contract\\n     * - vBNT token must have been already deposited into the contract\\n     */\\n    function withdraw(\\n        bytes32 contextId,\\n        address provider,\\n        uint256 poolTokenAmount,\\n        uint256 bntAmount\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev returns the withdrawn BNT amount\\n     */\\n    function withdrawalAmount(uint256 poolTokenAmount) external view returns (uint256);\\n\\n    /**\\n     * @dev requests BNT funding\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have the ROLE_FUNDING_MANAGER role\\n     * - the token must have been whitelisted\\n     * - the request amount should be below the funding limit for a given pool\\n     * - the average rate of the pool must not deviate too much from its spot rate\\n     */\\n    function requestFunding(\\n        bytes32 contextId,\\n        Token pool,\\n        uint256 bntAmount\\n    ) external;\\n\\n    /**\\n     * @dev renounces BNT funding\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have the ROLE_FUNDING_MANAGER role\\n     * - the token must have been whitelisted\\n     * - the average rate of the pool must not deviate too much from its spot rate\\n     */\\n    function renounceFunding(\\n        bytes32 contextId,\\n        Token pool,\\n        uint256 bntAmount\\n    ) external;\\n\\n    /**\\n     * @dev notifies the pool of accrued fees\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the network contract\\n     */\\n    function onFeesCollected(\\n        Token pool,\\n        uint256 feeAmount,\\n        bool isTradeFee\\n    ) external;\\n}\\n\",\"keccak256\":\"0xed6a5abb972bdc42e1d32dd4157c0968b5d34d3a6560dcffeb1479ed994fd5a8\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/pools/interfaces/IPoolCollection.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.13;\\n\\nimport { IVersioned } from \\\"../../utility/interfaces/IVersioned.sol\\\";\\nimport { Fraction112 } from \\\"../../utility/FractionLibrary.sol\\\";\\n\\nimport { Token } from \\\"../../token/Token.sol\\\";\\n\\nimport { IPoolToken } from \\\"./IPoolToken.sol\\\";\\n\\nstruct PoolLiquidity {\\n    uint128 bntTradingLiquidity; // the BNT trading liquidity\\n    uint128 baseTokenTradingLiquidity; // the base token trading liquidity\\n    uint256 stakedBalance; // the staked balance\\n}\\n\\nstruct AverageRates {\\n    uint32 blockNumber;\\n    Fraction112 rate;\\n    Fraction112 invRate;\\n}\\n\\nstruct Pool {\\n    IPoolToken poolToken; // the pool token of the pool\\n    uint32 tradingFeePPM; // the trading fee (in units of PPM)\\n    bool tradingEnabled; // whether trading is enabled\\n    bool depositingEnabled; // whether depositing is enabled\\n    AverageRates averageRates; // the recent average rates\\n    PoolLiquidity liquidity; // the overall liquidity in the pool\\n}\\n\\nstruct WithdrawalAmounts {\\n    uint256 totalAmount;\\n    uint256 baseTokenAmount;\\n    uint256 bntAmount;\\n}\\n\\n// trading enabling/disabling reasons\\nuint8 constant TRADING_STATUS_UPDATE_DEFAULT = 0;\\nuint8 constant TRADING_STATUS_UPDATE_ADMIN = 1;\\nuint8 constant TRADING_STATUS_UPDATE_MIN_LIQUIDITY = 2;\\nuint8 constant TRADING_STATUS_UPDATE_INVALID_STATE = 3;\\n\\nstruct TradeAmountAndFee {\\n    uint256 amount; // the source/target amount (depending on the context) resulting from the trade\\n    uint256 tradingFeeAmount; // the trading fee amount\\n    uint256 networkFeeAmount; // the network fee amount (always in units of BNT)\\n}\\n\\n/**\\n * @dev Pool Collection interface\\n */\\ninterface IPoolCollection is IVersioned {\\n    /**\\n     * @dev returns the type of the pool\\n     */\\n    function poolType() external view returns (uint16);\\n\\n    /**\\n     * @dev returns the default trading fee (in units of PPM)\\n     */\\n    function defaultTradingFeePPM() external view returns (uint32);\\n\\n    /**\\n     * @dev returns the network fee (in units of PPM)\\n     */\\n    function networkFeePPM() external view returns (uint32);\\n\\n    /**\\n     * @dev returns all the pools which are managed by this pool collection\\n     */\\n    function pools() external view returns (Token[] memory);\\n\\n    /**\\n     * @dev returns the number of all the pools which are managed by this pool collection\\n     */\\n    function poolCount() external view returns (uint256);\\n\\n    /**\\n     * @dev returns whether a pool is valid\\n     */\\n    function isPoolValid(Token pool) external view returns (bool);\\n\\n    /**\\n     * @dev returns the overall liquidity in the pool\\n     */\\n    function poolLiquidity(Token pool) external view returns (PoolLiquidity memory);\\n\\n    /**\\n     * @dev returns the pool token of the pool\\n     */\\n    function poolToken(Token pool) external view returns (IPoolToken);\\n\\n    /**\\n     * @dev returns the trading fee (in units of PPM)\\n     */\\n    function tradingFeePPM(Token pool) external view returns (uint32);\\n\\n    /**\\n     * @dev returns whether trading is enabled\\n     */\\n    function tradingEnabled(Token pool) external view returns (bool);\\n\\n    /**\\n     * @dev returns whether depositing is enabled\\n     */\\n    function depositingEnabled(Token pool) external view returns (bool);\\n\\n    /**\\n     * @dev returns whether the pool is stable\\n     */\\n    function isPoolStable(Token pool) external view returns (bool);\\n\\n    /**\\n     * @dev converts the specified pool token amount to the underlying base token amount\\n     */\\n    function poolTokenToUnderlying(Token pool, uint256 poolTokenAmount) external view returns (uint256);\\n\\n    /**\\n     * @dev converts the specified underlying base token amount to pool token amount\\n     */\\n    function underlyingToPoolToken(Token pool, uint256 baseTokenAmount) external view returns (uint256);\\n\\n    /**\\n     * @dev returns the number of pool token to burn in order to increase everyone's underlying value by the specified\\n     * amount\\n     */\\n    function poolTokenAmountToBurn(\\n        Token pool,\\n        uint256 baseTokenAmountToDistribute,\\n        uint256 protocolPoolTokenAmount\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev creates a new pool\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the network contract\\n     * - the pool should have been whitelisted\\n     * - the pool isn't already defined in the collection\\n     */\\n    function createPool(Token token) external;\\n\\n    /**\\n     * @dev deposits base token liquidity on behalf of a specific provider and returns the respective pool token amount\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the network contract\\n     * - assumes that the base token has been already deposited in the vault\\n     */\\n    function depositFor(\\n        bytes32 contextId,\\n        address provider,\\n        Token pool,\\n        uint256 baseTokenAmount\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev handles some of the withdrawal-related actions and returns the withdrawn base token amount\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the network contract\\n     * - the caller must have approved the collection to transfer/burn the pool token amount on its behalf\\n     */\\n    function withdraw(\\n        bytes32 contextId,\\n        address provider,\\n        Token pool,\\n        uint256 poolTokenAmount,\\n        uint256 baseTokenAmount\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev returns the amounts that would be returned if the position is currently withdrawn,\\n     * along with the breakdown of the base token and the BNT compensation\\n     */\\n    function withdrawalAmounts(Token pool, uint256 poolTokenAmount) external view returns (WithdrawalAmounts memory);\\n\\n    /**\\n     * @dev performs a trade by providing the source amount and returns the target amount and the associated fee\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the network contract\\n     */\\n    function tradeBySourceAmount(\\n        bytes32 contextId,\\n        Token sourceToken,\\n        Token targetToken,\\n        uint256 sourceAmount,\\n        uint256 minReturnAmount\\n    ) external returns (TradeAmountAndFee memory);\\n\\n    /**\\n     * @dev performs a trade by providing the target amount and returns the required source amount and the associated fee\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the network contract\\n     */\\n    function tradeByTargetAmount(\\n        bytes32 contextId,\\n        Token sourceToken,\\n        Token targetToken,\\n        uint256 targetAmount,\\n        uint256 maxSourceAmount\\n    ) external returns (TradeAmountAndFee memory);\\n\\n    /**\\n     * @dev returns the output amount and fee when trading by providing the source amount\\n     */\\n    function tradeOutputAndFeeBySourceAmount(\\n        Token sourceToken,\\n        Token targetToken,\\n        uint256 sourceAmount\\n    ) external view returns (TradeAmountAndFee memory);\\n\\n    /**\\n     * @dev returns the input amount and fee when trading by providing the target amount\\n     */\\n    function tradeInputAndFeeByTargetAmount(\\n        Token sourceToken,\\n        Token targetToken,\\n        uint256 targetAmount\\n    ) external view returns (TradeAmountAndFee memory);\\n\\n    /**\\n     * @dev notifies the pool of accrued fees\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the network contract\\n     */\\n    function onFeesCollected(Token pool, uint256 feeAmount) external;\\n\\n    /**\\n     * @dev migrates a pool to this pool collection\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the pool migrator contract\\n     */\\n    function migratePoolIn(Token pool, Pool calldata data) external;\\n\\n    /**\\n     * @dev migrates a pool from this pool collection\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the pool migrator contract\\n     */\\n    function migratePoolOut(Token pool, IPoolCollection targetPoolCollection) external;\\n}\\n\",\"keccak256\":\"0x87e62102f480bdbbcd4ba96eab0d2757eff0a68c43526706242e4495c2af73bf\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/pools/interfaces/IPoolMigrator.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.13;\\n\\nimport { Token } from \\\"../../token/Token.sol\\\";\\n\\nimport { IVersioned } from \\\"../../utility/interfaces/IVersioned.sol\\\";\\n\\nimport { IPoolCollection } from \\\"./IPoolCollection.sol\\\";\\n\\n/**\\n * @dev Pool Migrator interface\\n */\\ninterface IPoolMigrator is IVersioned {\\n    /**\\n     * @dev migrates a pool and returns the new pool collection it exists in\\n     *\\n     * notes:\\n     *\\n     * - invalid or incompatible pools will be skipped gracefully\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the network contract\\n     */\\n    function migratePool(Token pool, IPoolCollection newPoolCollection) external;\\n}\\n\",\"keccak256\":\"0x3dde1a08987c3d1a79bf10746c772ea68d1daa69b165b638dfdfeb6bfb269102\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/pools/interfaces/IPoolToken.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.13;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IERC20Permit } from \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\n\\nimport { IERC20Burnable } from \\\"../../token/interfaces/IERC20Burnable.sol\\\";\\nimport { Token } from \\\"../../token/Token.sol\\\";\\n\\nimport { IVersioned } from \\\"../../utility/interfaces/IVersioned.sol\\\";\\nimport { IOwned } from \\\"../../utility/interfaces/IOwned.sol\\\";\\n\\n/**\\n * @dev Pool Token interface\\n */\\ninterface IPoolToken is IVersioned, IOwned, IERC20, IERC20Permit, IERC20Burnable {\\n    /**\\n     * @dev returns the address of the reserve token\\n     */\\n    function reserveToken() external view returns (Token);\\n\\n    /**\\n     * @dev increases the token supply and sends the new tokens to the given account\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the owner of the contract\\n     */\\n    function mint(address recipient, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x698423b0fc59424e60d5effe3b79b8aeb5d478b04e5569e3a4ba5fe6936fb2b7\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/pools/interfaces/IPoolTokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.13;\\n\\nimport { Token } from \\\"../../token/Token.sol\\\";\\n\\nimport { IUpgradeable } from \\\"../../utility/interfaces/IUpgradeable.sol\\\";\\n\\nimport { IPoolToken } from \\\"./IPoolToken.sol\\\";\\n\\n/**\\n * @dev Pool Token Factory interface\\n */\\ninterface IPoolTokenFactory is IUpgradeable {\\n    /**\\n     * @dev returns the custom symbol override for a given reserve token\\n     */\\n    function tokenSymbolOverride(Token token) external view returns (string memory);\\n\\n    /**\\n     * @dev returns the custom decimals override for a given reserve token\\n     */\\n    function tokenDecimalsOverride(Token token) external view returns (uint8);\\n\\n    /**\\n     * @dev creates a pool token for the specified token\\n     */\\n    function createPoolToken(Token token) external returns (IPoolToken);\\n}\\n\",\"keccak256\":\"0xc0936c8ef93af6ffeb6eaa0c9ae13a7ea5c13c9ec7b42367ea952be26d17e748\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/token/SafeERC20Ex.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.13;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n * @dev extends the SafeERC20 library with additional operations\\n */\\nlibrary SafeERC20Ex {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @dev ensures that the spender has sufficient allowance\\n     */\\n    function ensureApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        if (amount == 0) {\\n            return;\\n        }\\n\\n        uint256 allowance = token.allowance(address(this), spender);\\n        if (allowance >= amount) {\\n            return;\\n        }\\n\\n        if (allowance > 0) {\\n            token.safeApprove(spender, 0);\\n        }\\n        token.safeApprove(spender, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x95b96153e9cb88df354da4731b3b856158cf6794abdfaf635455e853044f7f98\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/token/Token.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.13;\\n\\n/**\\n * @dev the main purpose of the Token interfaces is to ensure artificially that we won't use ERC20's standard functions,\\n * but only their safe versions, which are provided by SafeERC20 and SafeERC20Ex via the TokenLibrary contract\\n */\\ninterface Token {\\n\\n}\\n\",\"keccak256\":\"0x49d0e5ac0dab272f4001a63e7f4117eb13b42c655ee788c42a333f56f19ac2e9\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/token/TokenLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.13;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IERC20Permit } from \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\n\\nimport { SafeERC20Ex } from \\\"./SafeERC20Ex.sol\\\";\\n\\nimport { Token } from \\\"./Token.sol\\\";\\n\\n/**\\n * @dev This library implements ERC20 and SafeERC20 utilities for both the native token and for ERC20 tokens\\n */\\nlibrary TokenLibrary {\\n    using SafeERC20 for IERC20;\\n    using SafeERC20Ex for IERC20;\\n\\n    error PermitUnsupported();\\n\\n    // the address that represents the native token reserve\\n    address private constant NATIVE_TOKEN_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    // the symbol that represents the native token\\n    string private constant NATIVE_TOKEN_SYMBOL = \\\"ETH\\\";\\n\\n    // the decimals for the native token\\n    uint8 private constant NATIVE_TOKEN_DECIMALS = 18;\\n\\n    // the token representing the native token\\n    Token public constant NATIVE_TOKEN = Token(NATIVE_TOKEN_ADDRESS);\\n\\n    /**\\n     * @dev returns whether the provided token represents an ERC20 or the native token reserve\\n     */\\n    function isNative(Token token) internal pure returns (bool) {\\n        return address(token) == NATIVE_TOKEN_ADDRESS;\\n    }\\n\\n    /**\\n     * @dev returns the symbol of the native token/ERC20 token\\n     */\\n    function symbol(Token token) internal view returns (string memory) {\\n        if (isNative(token)) {\\n            return NATIVE_TOKEN_SYMBOL;\\n        }\\n\\n        return toERC20(token).symbol();\\n    }\\n\\n    /**\\n     * @dev returns the decimals of the native token/ERC20 token\\n     */\\n    function decimals(Token token) internal view returns (uint8) {\\n        if (isNative(token)) {\\n            return NATIVE_TOKEN_DECIMALS;\\n        }\\n\\n        return toERC20(token).decimals();\\n    }\\n\\n    /**\\n     * @dev returns the balance of the native token/ERC20 token\\n     */\\n    function balanceOf(Token token, address account) internal view returns (uint256) {\\n        if (isNative(token)) {\\n            return account.balance;\\n        }\\n\\n        return toIERC20(token).balanceOf(account);\\n    }\\n\\n    /**\\n     * @dev transfers a specific amount of the native token/ERC20 token\\n     */\\n    function safeTransfer(\\n        Token token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        if (amount == 0) {\\n            return;\\n        }\\n\\n        if (isNative(token)) {\\n            payable(to).transfer(amount);\\n        } else {\\n            toIERC20(token).safeTransfer(to, amount);\\n        }\\n    }\\n\\n    /**\\n     * @dev transfers a specific amount of the native token/ERC20 token from a specific holder using the allowance mechanism\\n     *\\n     * note that the function does not perform any action if the native token is provided\\n     */\\n    function safeTransferFrom(\\n        Token token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        if (amount == 0 || isNative(token)) {\\n            return;\\n        }\\n\\n        toIERC20(token).safeTransferFrom(from, to, amount);\\n    }\\n\\n    /**\\n     * @dev approves a specific amount of the native token/ERC20 token from a specific holder\\n     *\\n     * note that the function does not perform any action if the native token is provided\\n     */\\n    function safeApprove(\\n        Token token,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        if (isNative(token)) {\\n            return;\\n        }\\n\\n        toIERC20(token).safeApprove(spender, amount);\\n    }\\n\\n    /**\\n     * @dev ensures that the spender has sufficient allowance\\n     *\\n     * note that the function does not perform any action if the native token is provided\\n     */\\n    function ensureApprove(\\n        Token token,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        if (isNative(token)) {\\n            return;\\n        }\\n\\n        toIERC20(token).ensureApprove(spender, amount);\\n    }\\n\\n    /**\\n     * @dev compares between a token and another raw ERC20 token\\n     */\\n    function isEqual(Token token, IERC20 erc20Token) internal pure returns (bool) {\\n        return toIERC20(token) == erc20Token;\\n    }\\n\\n    /**\\n     * @dev utility function that converts a token to an IERC20\\n     */\\n    function toIERC20(Token token) internal pure returns (IERC20) {\\n        return IERC20(address(token));\\n    }\\n\\n    /**\\n     * @dev utility function that converts a token to an ERC20\\n     */\\n    function toERC20(Token token) internal pure returns (ERC20) {\\n        return ERC20(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x448f8af78045f8ad40977aa58c1bbdd0b89039931e4375702d12b054098b2a30\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/token/interfaces/IERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.13;\\n\\n/**\\n * @dev burnable ERC20 interface\\n */\\ninterface IERC20Burnable {\\n    /**\\n     * @dev Destroys tokens from the caller.\\n     */\\n    function burn(uint256 amount) external;\\n\\n    /**\\n     * @dev Destroys tokens from a recipient, deducting from the caller's allowance\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have allowance for recipient's tokens of at least the specified amount\\n     */\\n    function burnFrom(address recipient, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x222a3ba8286edf54d3e75a70683ffcbe6eb3c5ba5f6b3c6a6d98a716e9bd5332\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/utility/BlockNumber.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.13;\\n\\n/**\\n * @dev this contract abstracts the block number in order to allow for more flexible control in tests\\n */\\nabstract contract BlockNumber {\\n    /**\\n     * @dev returns the current block-number\\n     */\\n    function _blockNumber() internal view virtual returns (uint32) {\\n        return uint32(block.number);\\n    }\\n}\\n\",\"keccak256\":\"0x11d63faaec9f5a39da662887a91594b2fb1da86b0d9834456455bc9e30735630\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/utility/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.13;\\n\\nuint32 constant PPM_RESOLUTION = 1_000_000;\\n\",\"keccak256\":\"0x5215535db0a4e580cd19380cc1cf3a2b7edcbb8ee039e416319fe9f8867724ad\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/utility/Fraction.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.13;\\n\\nstruct Fraction {\\n    uint256 n;\\n    uint256 d;\\n}\\n\\nstruct Fraction112 {\\n    uint112 n;\\n    uint112 d;\\n}\\n\\nerror InvalidFraction();\\n\",\"keccak256\":\"0xb965a448e314353c82bc9fb7c0552057427a90100ebda4450b21fc932356a4d1\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/utility/FractionLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.13;\\n\\nimport { Fraction, Fraction112, InvalidFraction } from \\\"./Fraction.sol\\\";\\nimport { MathEx } from \\\"./MathEx.sol\\\";\\n\\n// solhint-disable-next-line func-visibility\\nfunction zeroFraction() pure returns (Fraction memory) {\\n    return Fraction({ n: 0, d: 1 });\\n}\\n\\n// solhint-disable-next-line func-visibility\\nfunction zeroFraction112() pure returns (Fraction112 memory) {\\n    return Fraction112({ n: 0, d: 1 });\\n}\\n\\n/**\\n * @dev this library provides a set of fraction operations\\n */\\nlibrary FractionLibrary {\\n    /**\\n     * @dev returns whether a standard fraction is valid\\n     */\\n    function isValid(Fraction memory fraction) internal pure returns (bool) {\\n        return fraction.d != 0;\\n    }\\n\\n    /**\\n     * @dev returns whether a 112-bit fraction is valid\\n     */\\n    function isValid(Fraction112 memory fraction) internal pure returns (bool) {\\n        return fraction.d != 0;\\n    }\\n\\n    /**\\n     * @dev returns whether a standard fraction is positive\\n     */\\n    function isPositive(Fraction memory fraction) internal pure returns (bool) {\\n        return isValid(fraction) && fraction.n != 0;\\n    }\\n\\n    /**\\n     * @dev returns whether a 112-bit fraction is positive\\n     */\\n    function isPositive(Fraction112 memory fraction) internal pure returns (bool) {\\n        return isValid(fraction) && fraction.n != 0;\\n    }\\n\\n    /**\\n     * @dev returns the inverse of a given fraction\\n     */\\n    function inverse(Fraction memory fraction) internal pure returns (Fraction memory) {\\n        Fraction memory invFraction = Fraction({ n: fraction.d, d: fraction.n });\\n\\n        if (!isValid(invFraction)) {\\n            revert InvalidFraction();\\n        }\\n\\n        return invFraction;\\n    }\\n\\n    /**\\n     * @dev returns the inverse of a given fraction\\n     */\\n    function inverse(Fraction112 memory fraction) internal pure returns (Fraction112 memory) {\\n        Fraction112 memory invFraction = Fraction112({ n: fraction.d, d: fraction.n });\\n\\n        if (!isValid(invFraction)) {\\n            revert InvalidFraction();\\n        }\\n\\n        return invFraction;\\n    }\\n\\n    /**\\n     * @dev reduces a standard fraction to a 112-bit fraction\\n     */\\n    function toFraction112(Fraction memory fraction) internal pure returns (Fraction112 memory) {\\n        Fraction memory reducedFraction = MathEx.reducedFraction(fraction, type(uint112).max);\\n\\n        return Fraction112({ n: uint112(reducedFraction.n), d: uint112(reducedFraction.d) });\\n    }\\n\\n    /**\\n     * @dev expands a 112-bit fraction to a standard fraction\\n     */\\n    function fromFraction112(Fraction112 memory fraction) internal pure returns (Fraction memory) {\\n        return Fraction({ n: fraction.n, d: fraction.d });\\n    }\\n}\\n\",\"keccak256\":\"0x98b9e291d4d2cd2ee03fba7428dba6301ec6a7d0c26250038321c4671b25a719\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/utility/MathEx.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.13;\\n\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport { Fraction, InvalidFraction } from \\\"./Fraction.sol\\\";\\n\\nimport { PPM_RESOLUTION } from \\\"./Constants.sol\\\";\\n\\nuint256 constant ONE = 0x80000000000000000000000000000000;\\nuint256 constant LN2 = 0x58b90bfbe8e7bcd5e4f1d9cc01f97b57;\\n\\nstruct Uint512 {\\n    uint256 hi; // 256 most significant bits\\n    uint256 lo; // 256 least significant bits\\n}\\n\\nstruct Sint256 {\\n    uint256 value;\\n    bool isNeg;\\n}\\n\\n/**\\n * @dev this library provides a set of complex math operations\\n */\\nlibrary MathEx {\\n    error Overflow();\\n\\n    /**\\n     * @dev returns `2 ^ f` by calculating `e ^ (f * ln(2))`, where `e` is Euler's number:\\n     * - Rewrite the input as a sum of binary exponents and a single residual r, as small as possible\\n     * - The exponentiation of each binary exponent is given (pre-calculated)\\n     * - The exponentiation of r is calculated via Taylor series for e^x, where x = r\\n     * - The exponentiation of the input is calculated by multiplying the intermediate results above\\n     * - For example: e^5.521692859 = e^(4 + 1 + 0.5 + 0.021692859) = e^4 * e^1 * e^0.5 * e^0.021692859\\n     */\\n    function exp2(Fraction memory f) internal pure returns (Fraction memory) {\\n        uint256 x = MathEx.mulDivF(LN2, f.n, f.d);\\n        uint256 y;\\n        uint256 z;\\n        uint256 n;\\n\\n        if (x >= (ONE << 4)) {\\n            revert Overflow();\\n        }\\n\\n        unchecked {\\n            z = y = x % (ONE >> 3); // get the input modulo 2^(-3)\\n            z = (z * y) / ONE;\\n            n += z * 0x10e1b3be415a0000; // add y^02 * (20! / 02!)\\n            z = (z * y) / ONE;\\n            n += z * 0x05a0913f6b1e0000; // add y^03 * (20! / 03!)\\n            z = (z * y) / ONE;\\n            n += z * 0x0168244fdac78000; // add y^04 * (20! / 04!)\\n            z = (z * y) / ONE;\\n            n += z * 0x004807432bc18000; // add y^05 * (20! / 05!)\\n            z = (z * y) / ONE;\\n            n += z * 0x000c0135dca04000; // add y^06 * (20! / 06!)\\n            z = (z * y) / ONE;\\n            n += z * 0x0001b707b1cdc000; // add y^07 * (20! / 07!)\\n            z = (z * y) / ONE;\\n            n += z * 0x000036e0f639b800; // add y^08 * (20! / 08!)\\n            z = (z * y) / ONE;\\n            n += z * 0x00000618fee9f800; // add y^09 * (20! / 09!)\\n            z = (z * y) / ONE;\\n            n += z * 0x0000009c197dcc00; // add y^10 * (20! / 10!)\\n            z = (z * y) / ONE;\\n            n += z * 0x0000000e30dce400; // add y^11 * (20! / 11!)\\n            z = (z * y) / ONE;\\n            n += z * 0x000000012ebd1300; // add y^12 * (20! / 12!)\\n            z = (z * y) / ONE;\\n            n += z * 0x0000000017499f00; // add y^13 * (20! / 13!)\\n            z = (z * y) / ONE;\\n            n += z * 0x0000000001a9d480; // add y^14 * (20! / 14!)\\n            z = (z * y) / ONE;\\n            n += z * 0x00000000001c6380; // add y^15 * (20! / 15!)\\n            z = (z * y) / ONE;\\n            n += z * 0x000000000001c638; // add y^16 * (20! / 16!)\\n            z = (z * y) / ONE;\\n            n += z * 0x0000000000001ab8; // add y^17 * (20! / 17!)\\n            z = (z * y) / ONE;\\n            n += z * 0x000000000000017c; // add y^18 * (20! / 18!)\\n            z = (z * y) / ONE;\\n            n += z * 0x0000000000000014; // add y^19 * (20! / 19!)\\n            z = (z * y) / ONE;\\n            n += z * 0x0000000000000001; // add y^20 * (20! / 20!)\\n            n = n / 0x21c3677c82b40000 + y + ONE; // divide by 20! and then add y^1 / 1! + y^0 / 0!\\n\\n            if ((x & (ONE >> 3)) != 0)\\n                n = (n * 0x1c3d6a24ed82218787d624d3e5eba95f9) / 0x18ebef9eac820ae8682b9793ac6d1e776; // multiply by e^(2^-3)\\n            if ((x & (ONE >> 2)) != 0)\\n                n = (n * 0x18ebef9eac820ae8682b9793ac6d1e778) / 0x1368b2fc6f9609fe7aceb46aa619baed4; // multiply by e^(2^-2)\\n            if ((x & (ONE >> 1)) != 0)\\n                n = (n * 0x1368b2fc6f9609fe7aceb46aa619baed5) / 0x0bc5ab1b16779be3575bd8f0520a9f21f; // multiply by e^(2^-1)\\n            if ((x & (ONE << 0)) != 0)\\n                n = (n * 0x0bc5ab1b16779be3575bd8f0520a9f21e) / 0x0454aaa8efe072e7f6ddbab84b40a55c9; // multiply by e^(2^+0)\\n            if ((x & (ONE << 1)) != 0)\\n                n = (n * 0x0454aaa8efe072e7f6ddbab84b40a55c5) / 0x00960aadc109e7a3bf4578099615711ea; // multiply by e^(2^+1)\\n            if ((x & (ONE << 2)) != 0)\\n                n = (n * 0x00960aadc109e7a3bf4578099615711d7) / 0x0002bf84208204f5977f9a8cf01fdce3d; // multiply by e^(2^+2)\\n            if ((x & (ONE << 3)) != 0)\\n                n = (n * 0x0002bf84208204f5977f9a8cf01fdc307) / 0x0000003c6ab775dd0b95b4cbee7e65d11; // multiply by e^(2^+3)\\n        }\\n\\n        return Fraction({ n: n, d: ONE });\\n    }\\n\\n    /**\\n     * @dev returns a fraction with reduced components\\n     */\\n    function reducedFraction(Fraction memory fraction, uint256 max) internal pure returns (Fraction memory) {\\n        uint256 scale = Math.ceilDiv(Math.max(fraction.n, fraction.d), max);\\n        Fraction memory reduced = Fraction({ n: fraction.n / scale, d: fraction.d / scale });\\n        if (reduced.d == 0) {\\n            revert InvalidFraction();\\n        }\\n\\n        return reduced;\\n    }\\n\\n    /**\\n     * @dev returns the weighted average of two fractions\\n     */\\n    function weightedAverage(\\n        Fraction memory fraction1,\\n        Fraction memory fraction2,\\n        uint256 weight1,\\n        uint256 weight2\\n    ) internal pure returns (Fraction memory) {\\n        return\\n            Fraction({\\n                n: fraction1.n * fraction2.d * weight1 + fraction1.d * fraction2.n * weight2,\\n                d: fraction1.d * fraction2.d * (weight1 + weight2)\\n            });\\n    }\\n\\n    /**\\n     * @dev returns whether or not the deviation of an offset sample from a base sample is within a permitted range\\n     * for example, if the maximum permitted deviation is 5%, then evaluate `95% * base <= offset <= 105% * base`\\n     */\\n    function isInRange(\\n        Fraction memory baseSample,\\n        Fraction memory offsetSample,\\n        uint32 maxDeviationPPM\\n    ) internal pure returns (bool) {\\n        Uint512 memory min = mul512(baseSample.n, offsetSample.d * (PPM_RESOLUTION - maxDeviationPPM));\\n        Uint512 memory mid = mul512(baseSample.d, offsetSample.n * PPM_RESOLUTION);\\n        Uint512 memory max = mul512(baseSample.n, offsetSample.d * (PPM_RESOLUTION + maxDeviationPPM));\\n        return lte512(min, mid) && lte512(mid, max);\\n    }\\n\\n    /**\\n     * @dev returns an `Sint256` positive representation of an unsigned integer\\n     */\\n    function toPos256(uint256 n) internal pure returns (Sint256 memory) {\\n        return Sint256({ value: n, isNeg: false });\\n    }\\n\\n    /**\\n     * @dev returns an `Sint256` negative representation of an unsigned integer\\n     */\\n    function toNeg256(uint256 n) internal pure returns (Sint256 memory) {\\n        return Sint256({ value: n, isNeg: true });\\n    }\\n\\n    /**\\n     * @dev returns the largest integer smaller than or equal to `x * y / z`\\n     */\\n    function mulDivF(\\n        uint256 x,\\n        uint256 y,\\n        uint256 z\\n    ) internal pure returns (uint256) {\\n        Uint512 memory xy = mul512(x, y);\\n\\n        // if `x * y < 2 ^ 256`\\n        if (xy.hi == 0) {\\n            return xy.lo / z;\\n        }\\n\\n        // assert `x * y / z < 2 ^ 256`\\n        if (xy.hi >= z) {\\n            revert Overflow();\\n        }\\n\\n        uint256 m = _mulMod(x, y, z); // `m = x * y % z`\\n        Uint512 memory n = _sub512(xy, m); // `n = x * y - m` hence `n / z = floor(x * y / z)`\\n\\n        // if `n < 2 ^ 256`\\n        if (n.hi == 0) {\\n            return n.lo / z;\\n        }\\n\\n        uint256 p = _unsafeSub(0, z) & z; // `p` is the largest power of 2 which `z` is divisible by\\n        uint256 q = _div512(n, p); // `n` is divisible by `p` because `n` is divisible by `z` and `z` is divisible by `p`\\n        uint256 r = _inv256(z / p); // `z / p = 1 mod 2` hence `inverse(z / p) = 1 mod 2 ^ 256`\\n        return _unsafeMul(q, r); // `q * r = (n / p) * inverse(z / p) = n / z`\\n    }\\n\\n    /**\\n     * @dev returns the smallest integer larger than or equal to `x * y / z`\\n     */\\n    function mulDivC(\\n        uint256 x,\\n        uint256 y,\\n        uint256 z\\n    ) internal pure returns (uint256) {\\n        uint256 w = mulDivF(x, y, z);\\n        if (_mulMod(x, y, z) > 0) {\\n            if (w >= type(uint256).max) {\\n                revert Overflow();\\n            }\\n\\n            return w + 1;\\n        }\\n        return w;\\n    }\\n\\n    /**\\n     * @dev returns the maximum of `n1 - n2` and 0\\n     */\\n    function subMax0(uint256 n1, uint256 n2) internal pure returns (uint256) {\\n        return n1 > n2 ? n1 - n2 : 0;\\n    }\\n\\n    /**\\n     * @dev returns the value of `x > y`\\n     */\\n    function gt512(Uint512 memory x, Uint512 memory y) internal pure returns (bool) {\\n        return x.hi > y.hi || (x.hi == y.hi && x.lo > y.lo);\\n    }\\n\\n    /**\\n     * @dev returns the value of `x < y`\\n     */\\n    function lt512(Uint512 memory x, Uint512 memory y) internal pure returns (bool) {\\n        return x.hi < y.hi || (x.hi == y.hi && x.lo < y.lo);\\n    }\\n\\n    /**\\n     * @dev returns the value of `x >= y`\\n     */\\n    function gte512(Uint512 memory x, Uint512 memory y) internal pure returns (bool) {\\n        return !lt512(x, y);\\n    }\\n\\n    /**\\n     * @dev returns the value of `x <= y`\\n     */\\n    function lte512(Uint512 memory x, Uint512 memory y) internal pure returns (bool) {\\n        return !gt512(x, y);\\n    }\\n\\n    /**\\n     * @dev returns the value of `x * y`\\n     */\\n    function mul512(uint256 x, uint256 y) internal pure returns (Uint512 memory) {\\n        uint256 p = _mulModMax(x, y);\\n        uint256 q = _unsafeMul(x, y);\\n        if (p >= q) {\\n            return Uint512({ hi: p - q, lo: q });\\n        }\\n        return Uint512({ hi: _unsafeSub(p, q) - 1, lo: q });\\n    }\\n\\n    /**\\n     * @dev returns the value of `x - y`, given that `x >= y`\\n     */\\n    function _sub512(Uint512 memory x, uint256 y) private pure returns (Uint512 memory) {\\n        if (x.lo >= y) {\\n            return Uint512({ hi: x.hi, lo: x.lo - y });\\n        }\\n        return Uint512({ hi: x.hi - 1, lo: _unsafeSub(x.lo, y) });\\n    }\\n\\n    /**\\n     * @dev returns the value of `x / pow2n`, given that `x` is divisible by `pow2n`\\n     */\\n    function _div512(Uint512 memory x, uint256 pow2n) private pure returns (uint256) {\\n        uint256 pow2nInv = _unsafeAdd(_unsafeSub(0, pow2n) / pow2n, 1); // `1 << (256 - n)`\\n        return _unsafeMul(x.hi, pow2nInv) | (x.lo / pow2n); // `(x.hi << (256 - n)) | (x.lo >> n)`\\n    }\\n\\n    /**\\n     * @dev returns the inverse of `d` modulo `2 ^ 256`, given that `d` is congruent to `1` modulo `2`\\n     */\\n    function _inv256(uint256 d) private pure returns (uint256) {\\n        // approximate the root of `f(x) = 1 / x - d` using the newton\\u2013raphson convergence method\\n        uint256 x = 1;\\n        for (uint256 i = 0; i < 8; i++) {\\n            x = _unsafeMul(x, _unsafeSub(2, _unsafeMul(x, d))); // `x = x * (2 - x * d) mod 2 ^ 256`\\n        }\\n        return x;\\n    }\\n\\n    /**\\n     * @dev returns `(x + y) % 2 ^ 256`\\n     */\\n    function _unsafeAdd(uint256 x, uint256 y) private pure returns (uint256) {\\n        unchecked {\\n            return x + y;\\n        }\\n    }\\n\\n    /**\\n     * @dev returns `(x - y) % 2 ^ 256`\\n     */\\n    function _unsafeSub(uint256 x, uint256 y) private pure returns (uint256) {\\n        unchecked {\\n            return x - y;\\n        }\\n    }\\n\\n    /**\\n     * @dev returns `(x * y) % 2 ^ 256`\\n     */\\n    function _unsafeMul(uint256 x, uint256 y) private pure returns (uint256) {\\n        unchecked {\\n            return x * y;\\n        }\\n    }\\n\\n    /**\\n     * @dev returns `x * y % (2 ^ 256 - 1)`\\n     */\\n    function _mulModMax(uint256 x, uint256 y) private pure returns (uint256) {\\n        return mulmod(x, y, type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev returns `x * y % z`\\n     */\\n    function _mulMod(\\n        uint256 x,\\n        uint256 y,\\n        uint256 z\\n    ) private pure returns (uint256) {\\n        return mulmod(x, y, z);\\n    }\\n}\\n\",\"keccak256\":\"0x8defe5d4f36b81259b6240af63467b2726314a9844412892c26522d77a366b72\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/utility/Owned.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.13;\\n\\nimport { IOwned } from \\\"./interfaces/IOwned.sol\\\";\\nimport { AccessDenied } from \\\"./Utils.sol\\\";\\n\\n/**\\n * @dev this contract provides support and utilities for contract ownership\\n */\\nabstract contract Owned is IOwned {\\n    error SameOwner();\\n\\n    address private _owner;\\n    address private _newOwner;\\n\\n    /**\\n     * @dev triggered when the owner is updated\\n     */\\n    event OwnerUpdate(address indexed prevOwner, address indexed newOwner);\\n\\n    // solhint-disable func-name-mixedcase\\n\\n    /**\\n     * @dev initializes the contract\\n     */\\n    constructor() {\\n        _setOwnership(msg.sender);\\n    }\\n\\n    // solhint-enable func-name-mixedcase\\n\\n    // allows execution by the owner only\\n    modifier onlyOwner() {\\n        _onlyOwner();\\n\\n        _;\\n    }\\n\\n    // error message binary size optimization\\n    function _onlyOwner() private view {\\n        if (msg.sender != _owner) {\\n            revert AccessDenied();\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IOwned\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @inheritdoc IOwned\\n     */\\n    function transferOwnership(address ownerCandidate) public virtual onlyOwner {\\n        if (ownerCandidate == _owner) {\\n            revert SameOwner();\\n        }\\n\\n        _newOwner = ownerCandidate;\\n    }\\n\\n    /**\\n     * @inheritdoc IOwned\\n     */\\n    function acceptOwnership() public virtual {\\n        if (msg.sender != _newOwner) {\\n            revert AccessDenied();\\n        }\\n\\n        _setOwnership(_newOwner);\\n    }\\n\\n    /**\\n     * @dev returns the address of the new owner candidate\\n     */\\n    function newOwner() external view returns (address) {\\n        return _newOwner;\\n    }\\n\\n    /**\\n     * @dev sets the new owner internally\\n     */\\n    function _setOwnership(address ownerCandidate) private {\\n        address prevOwner = _owner;\\n\\n        _owner = ownerCandidate;\\n        _newOwner = address(0);\\n\\n        emit OwnerUpdate({ prevOwner: prevOwner, newOwner: ownerCandidate });\\n    }\\n}\\n\",\"keccak256\":\"0xd0fb0e2c9f087e8535928c8840d5180ae9b8766a8055e8c28c5e021998eb9d87\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/utility/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.13;\\n\\nimport { PPM_RESOLUTION } from \\\"./Constants.sol\\\";\\n\\nerror AccessDenied();\\nerror AlreadyExists();\\nerror DoesNotExist();\\nerror InvalidAddress();\\nerror InvalidExternalAddress();\\nerror InvalidFee();\\nerror InvalidPool();\\nerror InvalidPoolCollection();\\nerror InvalidStakedBalance();\\nerror InvalidToken();\\nerror InvalidParam();\\nerror NotEmpty();\\nerror NotPayable();\\nerror ZeroValue();\\n\\n/**\\n * @dev common utilities\\n */\\nabstract contract Utils {\\n    // allows execution by the caller only\\n    modifier only(address caller) {\\n        _only(caller);\\n\\n        _;\\n    }\\n\\n    function _only(address caller) internal view {\\n        if (msg.sender != caller) {\\n            revert AccessDenied();\\n        }\\n    }\\n\\n    // verifies that a value is greater than zero\\n    modifier greaterThanZero(uint256 value) {\\n        _greaterThanZero(value);\\n\\n        _;\\n    }\\n\\n    // error message binary size optimization\\n    function _greaterThanZero(uint256 value) internal pure {\\n        if (value == 0) {\\n            revert ZeroValue();\\n        }\\n    }\\n\\n    // validates an address - currently only checks that it isn't null\\n    modifier validAddress(address addr) {\\n        _validAddress(addr);\\n\\n        _;\\n    }\\n\\n    // error message binary size optimization\\n    function _validAddress(address addr) internal pure {\\n        if (addr == address(0)) {\\n            revert InvalidAddress();\\n        }\\n    }\\n\\n    // validates an external address - currently only checks that it isn't null or this\\n    modifier validExternalAddress(address addr) {\\n        _validExternalAddress(addr);\\n\\n        _;\\n    }\\n\\n    // error message binary size optimization\\n    function _validExternalAddress(address addr) internal view {\\n        if (addr == address(0) || addr == address(this)) {\\n            revert InvalidExternalAddress();\\n        }\\n    }\\n\\n    // ensures that the fee is valid\\n    modifier validFee(uint32 fee) {\\n        _validFee(fee);\\n\\n        _;\\n    }\\n\\n    // error message binary size optimization\\n    function _validFee(uint32 fee) internal pure {\\n        if (fee > PPM_RESOLUTION) {\\n            revert InvalidFee();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x62b8b81d3069467eb6402b8f61adcc24f5b2e310db1a2ee64d719229306ab823\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/utility/interfaces/IOwned.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.13;\\n\\n/**\\n * @dev Owned interface\\n */\\ninterface IOwned {\\n    /**\\n     * @dev returns the address of the current owner\\n     */\\n    function owner() external view returns (address);\\n\\n    /**\\n     * @dev allows transferring the contract ownership\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the owner of the contract\\n     * - the new owner still needs to accept the transfer\\n     */\\n    function transferOwnership(address ownerCandidate) external;\\n\\n    /**\\n     * @dev used by a new owner to accept an ownership transfer\\n     */\\n    function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0xe6141c9a7cb5853352f35dc83e9504e2c552feadac7c70dd1e029c1b4368b6bb\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/utility/interfaces/IUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.13;\\n\\nimport { IVersioned } from \\\"./IVersioned.sol\\\";\\n\\nimport { IAccessControlEnumerableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\\\";\\n\\n/**\\n * @dev this is the common interface for upgradeable contracts\\n */\\ninterface IUpgradeable is IAccessControlEnumerableUpgradeable, IVersioned {\\n\\n}\\n\",\"keccak256\":\"0x6019e5e9c706cc023b96313932f5aa7fc3734f446fd0936a2c6530d0d25330da\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/utility/interfaces/IVersioned.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.13;\\n\\n/**\\n * @dev an interface for a versioned contract\\n */\\ninterface IVersioned {\\n    function version() external view returns (uint16);\\n}\\n\",\"keccak256\":\"0x1969c895e9adc0bc8a85e975517d2f2b9357e0c9011f159d01b90f7d1a464d76\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/vaults/interfaces/IExternalProtectionVault.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.13;\\n\\nimport { IVault } from \\\"./IVault.sol\\\";\\n\\ninterface IExternalProtectionVault is IVault {}\\n\",\"keccak256\":\"0x0ae5812ccd4166ba2df080b90df2ec128806a237d3ce9359ca6bb23025d63d85\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/vaults/interfaces/IMasterVault.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.13;\\n\\nimport { IVault } from \\\"./IVault.sol\\\";\\n\\ninterface IMasterVault is IVault {}\\n\",\"keccak256\":\"0x875a0f6792439d100fade7ffb778a34d8eac7ededb43b65d0160281d3d5a83f0\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/vaults/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.13;\\n\\nimport { IUpgradeable } from \\\"../../utility/interfaces/IUpgradeable.sol\\\";\\n\\nimport { Token } from \\\"../../token/Token.sol\\\";\\n\\n// the asset manager role is required to access all the funds\\nbytes32 constant ROLE_ASSET_MANAGER = keccak256(\\\"ROLE_ASSET_MANAGER\\\");\\n\\ninterface IVault is IUpgradeable {\\n    /**\\n     * @dev triggered when tokens have been withdrawn from the vault\\n     */\\n    event FundsWithdrawn(Token indexed token, address indexed caller, address indexed target, uint256 amount);\\n\\n    /**\\n     * @dev triggered when tokens have been burned from the vault\\n     */\\n    event FundsBurned(Token indexed token, address indexed caller, uint256 amount);\\n\\n    /**\\n     * @dev tells whether the vault accepts native token deposits\\n     */\\n    function isPayable() external view returns (bool);\\n\\n    /**\\n     * @dev withdraws funds held by the contract and sends them to an account\\n     */\\n    function withdrawFunds(\\n        Token token,\\n        address payable target,\\n        uint256 amount\\n    ) external;\\n\\n    /**\\n     * @dev burns funds held by the contract\\n     */\\n    function burn(Token token, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x1ac16bcccd209b3a73c00144df2b5c53fbd328434277e72457063c26645872d5\",\"license\":\"SEE LICENSE IN LICENSE\"}},\"version\":1}",
  "bytecode": "0x6101a06040526005805460ff60201b19166401000000001790553480156200002657600080fd5b5060405162005eb238038062005eb2833981016040819052620000499162000251565b620000543362000119565b6200005f8962000173565b6200006a8862000173565b620000758762000173565b620000808662000173565b6200008b8562000173565b620000968462000173565b620000a18362000173565b620000ac8262000173565b620000b7816200019e565b6001600160a01b03808a1660805288811660a05287811660c05286811660e05285811661010052848116610120528381166101405282166101605263ffffffff8116610180526200010a6107d0620001c9565b50505050505050505062000330565b600080546001600160a01b038381166001600160a01b031980841682178555600180549091169055604051919092169283917f343765429aea5a34b3ff6a3785a98a5abb2597aca87bfbb58632c173d585373a9190a35050565b6001600160a01b0381166200019b5760405163e6c4247b60e01b815260040160405180910390fd5b50565b620f424063ffffffff821611156200019b576040516358d620b360e01b815260040160405180910390fd5b60055463ffffffff9081169082168103620001e2575050565b6005805463ffffffff191663ffffffff84811691821790925560408051928416835260208301919091527fb804b0ec3f0ea43004870df377170ce44cb789adca16d23286e337605558117f910160405180910390a15050565b6001600160a01b03811681146200019b57600080fd5b60008060008060008060008060006101208a8c0312156200027157600080fd5b89516200027e816200023b565b60208b015190995062000291816200023b565b60408b0151909850620002a4816200023b565b60608b0151909750620002b7816200023b565b60808b0151909650620002ca816200023b565b60a08b0151909550620002dd816200023b565b60c08b0151909450620002f0816200023b565b60e08b015190935062000303816200023b565b6101008b015190925063ffffffff811681146200031f57600080fd5b809150509295985092959850929598565b60805160a05160c05160e0516101005161012051610140516101605161018051615a5b62000457600039600081816103ea0152818161429501526142d00152600081816114ab0152611cab01526000611259015260008181612b68015261314d015260008181612024015281816120f2015281816121c401528181612eb501528181612f4f01528181612fa3015281816130900152614136015260008181611f3601528181612b0c01528181612fd00152818161311d015281816131fd0152613a120152600081816108b3015281816111af015281816119c401528181612ba801526132ea01526000818161266301526143d10152600081816107a101528181610c0f01528181610e3101528181611168015281816117190152611b690152615a5b6000f3fe608060405234801561001057600080fd5b506004361061023d5760003560e01c80639049f9d21161013b578063bedf9525116100b8578063ee4808fe1161007c578063ee4808fe1461061c578063f2fde38b1461062f578063f525cb6814610642578063f6c578611461064a578063fba8cdee1461067857600080fd5b8063bedf95251461057d578063c2cf4252146105b0578063c5c51dca146105e3578063d3df2424146105f8578063d4ee1d901461060b57600080fd5b80639f5c734b116100ff5780639f5c734b146104bf5780639fc19231146104d2578063a135ef17146104e0578063b1dd61b614610563578063b7fafb7a1461056a57600080fd5b80639049f9d214610460578063915b9941146104735780639181d2e314610486578063921a929e146104995780639dad4613146104ac57600080fd5b8063541868c8116101c957806372d960e11161018d57806372d960e11461040e5780637516baec1461042157806379ba509714610434578063814175851461043c5780638da5cb5b1461044f57600080fd5b8063541868c81461036857806354fd4d501461037b57806356aca36f146103915780635768adcf146103a45780636161b626146103e857600080fd5b8063279105651161021057806327910565146102b657806330cdb308146102c957806334afba2b146103145780634ceea7531461033457806352c8f9901461035557600080fd5b8063136efb7a146102425780631510748b1461026b5780631c754cae146102805780632258cc6914610293575b600080fd5b61025561025036600461522a565b61068b565b6040516102629190615247565b60405180910390f35b61027e61027936600461530d565b61079f565b005b61027e61028e366004615339565b6107ff565b6102a66102a136600461522a565b610a77565b6040519015158152602001610262565b61027e6102c436600461522a565b610ab4565b6102ff6102d736600461522a565b6001600160a01b0316600090815260026020526040902054600160a01b900463ffffffff1690565b60405163ffffffff9091168152602001610262565b61032761032236600461536e565b610adb565b60405161026291906153af565b61034761034236600461530d565b610b50565b604051908152602001610262565b6103276103633660046153d0565b610be9565b61032761037636600461530d565b610c9d565b60075b60405161ffff9091168152602001610262565b61034761039f3660046153d0565b610e2d565b6103d06103b236600461522a565b6001600160a01b039081166000908152600260205260409020541690565b6040516001600160a01b039091168152602001610262565b7f00000000000000000000000000000000000000000000000000000000000000006102ff565b61032761041c36600461536e565b611023565b600554640100000000900460ff166102a6565b61027e61109f565b61027e61044a366004615430565b6110e1565b6000546001600160a01b03166103d0565b61027e61046e36600461522a565b611166565b61027e610481366004615469565b61149f565b61027e6104943660046154be565b611550565b6103476104a7366004615339565b611601565b61027e6104ba3660046154ec565b6116d7565b6103476104cd366004615509565b611715565b60055463ffffffff166102ff565b6105566104ee36600461522a565b6040805160608082018352600080835260208084018290529284018190526001600160a01b0394909416845260028252928290208251938401835260048101546001600160801b038082168652600160801b9091041691840191909152600501549082015290565b6040516102629190615551565b600161037e565b6103276105783660046153d0565b611b43565b6102a661058b36600461522a565b6001600160a01b0316600090815260026020526040902054600160c01b900460ff1690565b6102a66105be36600461522a565b6001600160a01b0316600090815260026020526040902054600160c81b900460ff1690565b6105eb611bef565b6040516102629190615580565b61027e6106063660046155cd565b611c9f565b6001546001600160a01b03166103d0565b61034761062a36600461530d565b611d5a565b61027e61063d36600461522a565b611de9565b610347611e42565b6102a661065836600461522a565b6001600160a01b0390811660009081526002602052604090205416151590565b61027e6106863660046155fb565b611e53565b610693615045565b506001600160a01b03908116600090815260026020818152604092839020835160c0810185528154958616815263ffffffff600160a01b870481168285015260ff600160c01b88048116151583880152600160c81b9097049096161515606080830191909152855180820187526001840154909716875285518087018752948301546001600160701b038082168752600160701b9182900481168787015288860196909652865180880188526003850154808816825291909104909516858501528686019490945260808101959095528351928301845260048101546001600160801b038082168552600160801b9091041691830191909152600501549181019190915260a082015290565b7f00000000000000000000000000000000000000000000000000000000000000006107c981611e6e565b81156107fa5760006107da84611e97565b9050828160040160010160008282546107f3919061562e565b9091555050505b505050565b610807611ed4565b604080518082019091528281526020810182905261082481611eff565b600061082f85611e97565b8054909150600160c01b900460ff161561085c57604051637952fbad60e11b815260040160405180910390fd5b6040516bffffffffffffffffffffffff1933606090811b8216602084015287901b166034820152604881018590526068810184905260009060880160405160208183030381529060405280519060200120905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166387ba006a6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561090f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109339190615646565b90506109428288858785611f25565b60048301546001600160801b03168111156109705760405163bb55fd2760e01b815260040160405180910390fd5b600061097b85612369565b9050604051806060016040528061098f4390565b63ffffffff1681526020018281526020016109a9836123c9565b905280516001868101805463ffffffff191663ffffffff909316929092179091556020808301518051600289018054928401516001600160701b039283166001600160e01b031994851617600160701b918416820217909155604095860151805160038c0180549290960151908416919094161792909116021790558554600160c01b60ff60c01b19909116178655905181906001600160a01b038b16907f162ed187f3ed3879ae360c5df2a0a5dcaac7a208a9d762c2cbbfb1f5fad8b81d90600090a45050505050505050565b6001600160a01b0381166000908152600260208190526040822090610a9b82612423565b6002811115610aac57610aac61565f565b149392505050565b610abc611ed4565b6000610ac782611e97565b9050610ad7600083836001612590565b5050565b610aff60405180606001604052806000815260200160008152602001600081525090565b81610b09816125b4565b6000610b1b81878787600019846125d5565b9050610b2681612813565b60408051606080820183528351825283015160208201526080909201519082015295945050505050565b6001600160a01b038083166000908152600260209081526040808320805482516318160ddd60e01b8152925194959194610bdf94889492909316926318160ddd92600480820193918290030181865afa158015610bb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd59190615646565b600584015461293e565b9150505b92915050565b610c0d60405180606001604052806000815260200160008152602001600081525090565b7f0000000000000000000000000000000000000000000000000000000000000000610c3781611e6e565b83610c41816125b4565b83610c4b816125b4565b6000610c5c8a8a8a8a8a60016125d5565b9050610c6781612981565b60405180606001604052808260200151815260200182606001518152602001826080015181525094505050505095945050505050565b610cc160405180606001604052806000815260200160008152602001600081525090565b82610ccb81612abd565b82610cd5816125b4565b6001600160a01b03808616600090815260026020908152604080832081516060810183526004808301546001600160801b038082168452600160801b9091041682860152600583015482850152825484516318160ddd60e01b8152945193979296959216936318160ddd93818301939290918290030181865afa158015610d60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d849190615646565b90506000610d978883856040015161293e565b90506000610dbd8a8a84878960000160149054906101000a900463ffffffff1688612ae4565b905060405180606001604052808260c001518360e00151610dde9190615675565b815260200182604001518360000151610df7919061562e565b8152602001600560049054906101000a900460ff16610e17576000610e1d565b82602001515b90529a9950505050505050505050565b60007f0000000000000000000000000000000000000000000000000000000000000000610e5981611e6e565b85610e6381612abd565b84610e6d816125b4565b84610e77816125b4565b6000610e8289611e97565b604080516060810182526004808401546001600160801b038082168452600160801b90910416602080840191909152600585015483850152845484516318160ddd60e01b8152945195965092946000946001600160a01b03909416936318160ddd938181019392918290030181865afa158015610f03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f279190615646565b90506000610f3a8b83856040015161293e565b9050808a1115610f5d57604051633494a40d60e21b815260040160405180910390fd5b6001610f6885612423565b6002811115610f7957610f7961565f565b03610f97576040516301a6272960e41b815260040160405180910390fd5b6000610fbb8d8d8d878960000160149054906101000a900463ffffffff1688612ae4565b9050610fca8f8f8f8885612d3e565b8454600160c01b900460ff1615611010576040805180820190915260048601546001600160801b038082168352600160801b909104166020820152611010908690613458565b519e9d5050505050505050505050505050565b61104760405180606001604052806000815260200160008152602001600081525090565b81611051816125b4565b6000611062818787876001806125d5565b905061106d81612813565b604051806060016040528082602001518152602001826060015181526020018260800151815250925050509392505050565b6001546001600160a01b031633146110ca57604051634ca8886760e01b815260040160405180910390fd5b6001546110df906001600160a01b0316613552565b565b6110e9611ed4565b60006110f483611e97565b8054909150821515600160c81b90910460ff1615150361111357505050565b805460ff60c81b1916600160c81b8315159081029190911782556040516001600160a01b038516907fa606e6917bc476eb72d24f486596af7f564fb7b50f73135c81c0e8e0553430cd90600090a3505050565b7f000000000000000000000000000000000000000000000000000000000000000061119081611e6e565b60405163b5af090f60e01b81526001600160a01b0383811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063b5af090f90602401602060405180830381865afa1580156111f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061121a919061568c565b61123757604051630b094f2760e31b815260040160405180910390fd5b604051632b625f2360e01b81526001600160a01b0383811660048301526000917f000000000000000000000000000000000000000000000000000000000000000090911690632b625f23906024016020604051808303816000875af11580156112a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112c891906156a9565b9050806001600160a01b03166379ba50976040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561130557600080fd5b505af1158015611319573d6000803e3d6000fd5b5050505060006040518060c00160405280836001600160a01b03168152602001600560009054906101000a900463ffffffff1663ffffffff1681526020016000151581526020016001151581526020016040518060600160405280600063ffffffff1681526020016113896135ac565b81526020016113966135ac565b9052815260408051606081018252600080825260208281018290529282015291015290506113c484826135d5565b60408082015190516000911515906001600160a01b038716907f162ed187f3ed3879ae360c5df2a0a5dcaac7a208a9d762c2cbbfb1f5fad8b81d908490a4836001600160a01b03167fa2d66c1e2cc4b2cc5daaabc06447542e989ed748a9fb22476b6c913dcc1c7f4b6000836020015160405161145492919063ffffffff92831681529116602082015260400190565b60405180910390a280606001511515846001600160a01b03167fa606e6917bc476eb72d24f486596af7f564fb7b50f73135c81c0e8e0553430cd60405160405180910390a350505050565b816114a981612abd565b7f00000000000000000000000000000000000000000000000000000000000000006114d381611e6e565b6114eb846114e636869003860186615859565b6135d5565b6114f8602084018461522a565b6001600160a01b03166379ba50976040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561153257600080fd5b505af1158015611546573d6000803e3d6000fd5b5050505050505050565b611558611ed4565b806115628161372e565b600061156d84611e97565b805490915063ffffffff600160a01b90910481169084168103611591575050505050565b815463ffffffff60a01b1916600160a01b63ffffffff86811691820292909217845560408051928416835260208301919091526001600160a01b038716917fa2d66c1e2cc4b2cc5daaabc06447542e989ed748a9fb22476b6c913dcc1c7f4b910160405180910390a25050505050565b600082600003611613575060006116d0565b6001600160a01b038085166000908152600260209081526040808320805482516318160ddd60e01b81529251919516926318160ddd92600480820193918290030181865afa158015611669573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061168d9190615646565b9050600061169b828761592c565b90506116ca81836116ac8882615675565b60058701546116bb919061592c565b6116c5908561562e565b613758565b93505050505b9392505050565b6116df611ed4565b60055460ff64010000000090910416151581151514611712576005805464ff000000001916640100000000831515021790555b50565b60007f000000000000000000000000000000000000000000000000000000000000000061174181611e6e565b8461174b81612abd565b83611755816125b4565b600061176087611e97565b8054909150600160c81b900460ff1661178c576040516303a5be3f60e31b815260040160405180910390fd5b604080516060810182526004808401546001600160801b038082168452600160801b909104166020808401919091526005850154838501819052855485516318160ddd60e01b81529551949591946000946001600160a01b03909216936318160ddd9380840193919291908290030181865afa158015611810573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118349190615646565b905061183e61509d565b8115801561184b57508215155b1561189757600092506118618d8c876003612590565b6040518060600160405280600063ffffffff1681526020016118816135ac565b815260200161188e6135ac565b9052905061192c565b60408051606081018252600187015463ffffffff1681528151808301835260028801546001600160701b038082168352600160701b918290048116602084810191909152808501939093528451808601865260038b0154808316825292909204168183015282840152825180840190935286516001600160801b03908116845287820151169083015261192991613824565b90505b60006119398b8486613955565b90506119458b8561562e565b600587015585546040516340c10f1960e01b81526001600160a01b038f8116600483015260248201849052909116906340c10f1990604401600060405180830381600087803b15801561199757600080fd5b505af11580156119ab573d6000803e3d6000fd5b50505050611a498e8d886119c28660200151613989565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166387ba006a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a449190615646565b611f25565b8554600160c01b900460ff1615611a8f576040805180820190915260048701546001600160801b038082168352600160801b909104166020820152611a8f908790613458565b8b6001600160a01b03168d6001600160a01b03168f7fecb7e4cd1580472adaeba712b36acf94439b2e1760af55fedb61960ca4422af38e85604051611ade929190918252602082015260400190565b60405180910390a4611b328e8d611af5848761562e565b6040805160608101825260048c01546001600160801b038082168352600160801b90910416602082015260058c01549181019190915289906139c5565b9d9c50505050505050505050505050565b611b6760405180606001604052806000815260200160008152602001600081525090565b7f0000000000000000000000000000000000000000000000000000000000000000611b9181611e6e565b83611b9b816125b4565b83611ba5816125b4565b6000611bb68a8a8a8a8a60006125d5565b9050611bc181612981565b6040805160608082018352835182528301516020820152608090920151908201529998505050505050505050565b60606000611bfd6003613a5d565b905060008167ffffffffffffffff811115611c1a57611c1a6156c6565b604051908082528060200260200182016040528015611c43578160200160208202803683370190505b50905060005b82811015611c9857611c5c600382613a67565b828281518110611c6e57611c6e61594b565b6001600160a01b039092166020928302919091019091015280611c9081615961565b915050611c49565b5092915050565b80611ca981612abd565b7f0000000000000000000000000000000000000000000000000000000000000000611cd381611e6e565b6001600160a01b0380851660009081526002602052604090205416611cf785613a73565b60405163f2fde38b60e01b81526001600160a01b03858116600483015282169063f2fde38b906024015b600060405180830381600087803b158015611d3b57600080fd5b505af1158015611d4f573d6000803e3d6000fd5b505050505050505050565b6001600160a01b038083166000908152600260209081526040808320805482516318160ddd60e01b8152925194959194610bdf94889492909316926318160ddd92600480820193918290030181865afa158015611dbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ddf9190615646565b6005840154613955565b611df1611ed4565b6000546001600160a01b0390811690821603611e2057604051630a98f1f360e21b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000611e4e6003613a5d565b905090565b611e5b611ed4565b80611e658161372e565b610ad782613afd565b336001600160a01b0382161461171257604051634ca8886760e01b815260040160405180910390fd5b6001600160a01b03808216600090815260026020526040812080549192909116610be35760405163b0ce759160e01b815260040160405180910390fd5b6000546001600160a01b031633146110df57604051634ca8886760e01b815260040160405180910390fd5b611f0881613b6e565b61171257604051636a43f8d160e01b815260040160405180910390fd5b6000611f5a6001600160a01b0386167f0000000000000000000000000000000000000000000000000000000000000000613b8b565b905080600003611f7d5760405163bb55fd2760e01b815260040160405180910390fd5b6040805160608101825260048601546001600160801b038082168352600160801b9091041660208201526005860154918101919091526001611fbe86612423565b6002811115611fcf57611fcf61565f565b03611fdb575050612362565b611fe484613b6e565b611ffc57611ff58787876002612590565b5050612362565b604051638d0c782760e01b81526001600160a01b0387811660048301526000916120999185917f000000000000000000000000000000000000000000000000000000000000000090911690638d0c782790602401602060405180830381865afa15801561206d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120919190615646565b848888613c2f565b80519091506120aa57505050612362565b602081015115806120bd57506040810151155b156120d7576120cf8888886002612590565b505050612362565b81600001516001600160801b0316816020015111156121a9577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166371c0feb7898985600001516001600160801b0316856020015161213e9190615675565b6040516001600160e01b031960e086901b16815260048101939093526001600160a01b0390911660248301526044820152606401600060405180830381600087803b15801561218c57600080fd5b505af11580156121a0573d6000803e3d6000fd5b50505050612277565b81600001516001600160801b031681602001511015612277577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631ebda06d8989846020015186600001516001600160801b03166122109190615675565b6040516001600160e01b031960e086901b16815260048101939093526001600160a01b0390911660248301526044820152606401600060405180830381600087803b15801561225e57600080fd5b505af1158015612272573d6000803e3d6000fd5b505050505b600060405180606001604052806122918460200151613df8565b6001600160801b031681526020016122ac8460400151613df8565b6001600160801b0390811682526040808701516020938401528351848401518316600160801b029216919091176004808c01919091558382015160058c01558a5482516318160ddd60e01b81529251949550611d4f948e948e946001600160a01b03909316936318160ddd938082019391908290030181865afa158015612337573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061235b9190615646565b86856139c5565b5050505050565b60408051808201909152600080825260208201526000612390836001600160701b03613e69565b9050604051806040016040528082600001516001600160701b0316815260200182602001516001600160701b0316815250915050919050565b6040805180820190915260008082526020820152604080518082019091526020838101516001600160701b03908116835284511690820181905215155b610be357604051630d38a7e760e11b815260040160405180910390fd5b60408051808201825260048301546001600160801b038082168352600160801b909104166020808301919091528251606081018452600185015463ffffffff1681528351808501855260028601546001600160701b038082168352600160701b918290048116838601528385019283528651808801885260038901548083168252929092041693810193909352938101919091529151600092906124c683613b6e565b15806124d857506124d681613ef8565b155b156124e857506000949350505050565b60006124f384613f27565b604084015190915061250482613b6e565b1580612516575061251481613ef8565b155b15612528575060009695505050505050565b60006125348587613824565b905061254f6125468260200151613989565b87612710613f5c565b801561256f575061256f6125668260400151613989565b84612710613f5c565b1561258257506002979650505050505050565b506001979650505050505050565b60048201546125ae908590859085906001600160801b031685613ffe565b50505050565b8060000361171257604051637c946ed760e01b815260040160405180910390fd5b612656604051806101a00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b03168152602001600015158152602001600015158152602001600063ffffffff168152602001600080191681525090565b6001600160a01b038681167f0000000000000000000000000000000000000000000000000000000000000000821690811491871614818015612696575080155b156126b85760016101208401526001600160a01b0387166101008401526126fe565b811580156126c35750805b156126e55760006101208401526001600160a01b0388166101008401526126fe565b60405163b0ce759160e01b815260040160405180910390fd5b600061270e846101000151611e97565b8054909150600160c01b900460ff1661273a5760405163bcb8b8fb60e01b815260040160405180910390fd5b61018084018a90528415801561014086015261275857868452612760565b602084018790525b60408481018790528154600160a01b900463ffffffff16610160860152805160608101825260048301546001600160801b038082168352600160801b909104166020820152600583015491810191909152610120850151156127de5780516001600160801b0390811660a087015260208201511660c08601526127fc565b60208101516001600160801b0390811660a087015281511660c08601525b6040015160e0850152509198975050505050505050565b6040805180820190915260008082526020820152816101400151156128845761284f8260a001518360c001518461016001518560000151614165565b8051602084018190526040840151919250101561287f5760405163f31ee7a560e01b815260040160405180910390fd5b6128d7565b6128a18260a001518360c0015184610160015185602001516141f7565b805180845290915015806128b9575060408201518251115b156128d75760405163681c2ccd60e11b815260040160405180910390fd5b60208101516060830152815160a0830180516128f490839061562e565b905250602082015160c08301805161290d908390615675565b905250610120820151156129355781606001518260e001818151612931919061562e565b9052505b610ad782614293565b60008260000361296e57811561296757604051636a9c61e160e01b815260040160405180910390fd5b50826116d0565b612979848385613758565b949350505050565b6101008101516001600160a01b0316600090815260026020908152604091829020825160608101845260048201546001600160801b038082168352600160801b90910481168285019081526005840154838701528551808701909652825182168652511692840192909252916129f8908390613458565b612a0183612813565b60006040518060600160405280612a2f866101200151612a25578660c00151613df8565b8660a00151613df8565b6001600160801b03168152602001612a5e866101200151612a54578660a00151613df8565b8660c00151613df8565b6001600160801b031681526020018560e001518152509050612a8c8461018001518561010001518484614393565b805160208201516001600160801b03908116600160801b029116176004840155604001516005909201919091555050565b6001600160a01b0381166117125760405163e6c4247b60e01b815260040160405180910390fd5b612aec6150ee565b60208401516000906001600160801b0316612b306001600160a01b038a167f0000000000000000000000000000000000000000000000000000000000000000613b8b565b612b3a9190615675565b90506000612c3486600001516001600160801b031687602001516001600160801b0316848960400151612b9f7f00000000000000000000000000000000000000000000000000000000000000008f6001600160a01b0316613b8b90919063ffffffff16565b8a63ffffffff167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632aac012c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612c04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c28919061597a565b63ffffffff168e6144b7565b905060405180610180016040528082606001518152602001826080015181526020018260a0015181526020018260400151815260200182600001518152602001826020015181526020018260c001518152602001888152602001898152602001858152602001826040015160200151612cca576040830151516020890151612cc591906001600160801b031661562e565b612ce8565b6040830151516020890151612ce891906001600160801b0316615675565b8152602001826000015160200151612d17578251518851612d1291906001600160801b031661562e565b612d2f565b8251518851612d2f91906001600160801b0316615675565b90529998505050505050505050565b60408051606081018252600484810180546001600160801b038082168552600160801b90910416602084015260058601548385015285546101008601519451630852cd8d60e31b815292830194909452926001600160a01b0316906342966c6890602401600060405180830381600087803b158015612dbc57600080fd5b505af1158015612dd0573d6000803e3d6000fd5b505050506000836101000151846101200151612dec9190615675565b9050612e02836001015482866101200151613758565b6001840155610140840151612e1690613df8565b83546001600160801b03918216600160801b029116178355610160840151612e3d90613df8565b83546fffffffffffffffffffffffffffffffff19166001600160801b039190911617835560a08401515115612f19578360a0015160200151612e8157612e81615997565b60a084015151604051631ebda06d60e01b8152600481018a90526001600160a01b03888116602483015260448201929092527f000000000000000000000000000000000000000000000000000000000000000090911690631ebda06d906064015b600060405180830381600087803b158015612efc57600080fd5b505af1158015612f10573d6000803e3d6000fd5b5050505061303f565b6080840151511561303f5783608001516020015115612f8657608084015151604051631538c64b60e31b815260048101919091527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a9c6325890602401612ee2565b6080840151516040516340c10f1960e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916340c10f199161300c917f0000000000000000000000000000000000000000000000000000000000000000916004016001600160a01b03929092168252602082015260400190565b600060405180830381600087803b15801561302657600080fd5b505af115801561303a573d6000803e3d6000fd5b505050505b600554602085015164010000000090910460ff16901580159061305f5750805b156130ef5760208501516040516340c10f1960e01b81526001600160a01b038a8116600483015260248201929092527f0000000000000000000000000000000000000000000000000000000000000000909116906340c10f1990604401600060405180830381600087803b1580156130d657600080fd5b505af11580156130ea573d6000803e3d6000fd5b505050505b6040850151156131c5576040858101519051631c20fadd60e01b81526001600160a01b0389811660048301527f00000000000000000000000000000000000000000000000000000000000000008116602483015260448201929092527f000000000000000000000000000000000000000000000000000000000000000090911690631c20fadd90606401600060405180830381600087803b15801561319357600080fd5b505af11580156131a7573d6000803e3d6000fd5b505050508460400151856000018181516131c1919061562e565b9052505b84511561325c578451604051631c20fadd60e01b81526001600160a01b0389811660048301528a8116602483015260448201929092527f000000000000000000000000000000000000000000000000000000000000000090911690631c20fadd90606401600060405180830381600087803b15801561324357600080fd5b505af1158015613257573d6000803e3d6000fd5b505050505b8461014001516000036132e8576132716135ac565b80516002880180546020909301516001600160701b03908116600160701b026001600160e01b03199094169216919091179190911790556132b06135ac565b80516003880180546020909301516001600160701b03908116600160701b026001600160e01b03199094169216919091179190911790555b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166387ba006a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613346573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061336a9190615646565b8561016001511015613389576133898988888861016001516002613ffe565b866001600160a01b0316886001600160a01b03168a7feab8ac9e9478a4b3c37a794ecef629b8a8bbcd96f9eaeac8ed26054d144da52d88600001518961010001518a60400151876133db5760006133e1565b8b602001515b60c08d0151604080519586526020860194909452928401919091526060830152608082015260a00160405180910390a46040805160608101825260048801546001600160801b038082168352600160801b909104166020820152600588015491810191909152611d4f908a908990859087906139c5565b60408051606081018252600184015463ffffffff1681528151808301835260028501546001600160701b038082168352600160701b918290048116602084810191909152808501939093528451808601865260038801548083168252929092041691810191909152918101919091526134d19082613824565b805160018401805463ffffffff191663ffffffff9092169190911790556020808201518051600286018054928401516001600160701b039283166001600160e01b031994851617600160701b918416820217909155604090940151805160039097018054919094015196821692169190911794169091029290921790915550565b600080546001600160a01b038381166001600160a01b031980841682178555600180549091169055604051919092169283917f343765429aea5a34b3ff6a3785a98a5abb2597aca87bfbb58632c173d585373a9190a35050565b604080518082018252600080825260209182018190528251808401909352825260019082015290565b6135e060038361472d565b6135fd5760405163119b4fd360e11b815260040160405180910390fd5b6001600160a01b039182166000908152600260208181526040928390208451815486840151878701516060890151939099166001600160c01b031990921691909117600160a01b63ffffffff928316021761ffff60c01b1916600160c01b9815159890980260ff60c81b191697909717600160c81b911515919091021781556080850151805160018301805463ffffffff191691909816179096558582015180519382018054918401516001600160701b039586166001600160e01b031993841617600160701b91871682021790915596850151805160038401805492860151918716929093169190911794169096029290921790945560a0909201518051938101516001600160801b03948516600160801b95909116949094029390931760048301559190910151600590910155565b620f424063ffffffff82161115611712576040516358d620b360e01b815260040160405180910390fd5b6000806137658585614742565b80519091506000036137895782816020015161378191906159c3565b9150506116d0565b805183116137aa57604051631a93c68960e11b815260040160405180910390fd5b60006137b78686866147c9565b905060006137c583836147e4565b80519091506000036137eb578481602001516137e191906159c3565b93505050506116d0565b60008581038616906137fd8383614869565b9050600061381361380e848a6159c3565b6148a0565b919091029998505050505050505050565b61382c61509d565b8251439063ffffffff8083169082160361384a578492505050610be3565b606461385682846159d7565b63ffffffff1610158061387357506138718560200151613ef8565b155b8061388857506138868560400151613ef8565b155b1561390a5761389684613b6e565b156138dd5760405180606001604052808363ffffffff1681526020016138bb86612369565b81526020016138d16138cc87613f27565b612369565b81525092505050610be3565b6040518060600160405280600063ffffffff1681526020016138fd6135ac565b81526020016138d16135ac565b60405180606001604052808363ffffffff16815260200161392f8760200151876148cb565b815260200161394a876040015161394588613f27565b6148cb565b905295945050505050565b60008260000361397e57811561296757604051636a9c61e160e01b815260040160405180910390fd5b612979848484614938565b6040805180820182526000808252602091820152815180830190925282516001600160701b039081168352928101519092169181019190915290565b6139d185858484614393565b8160400151816040015114612362576001600160a01b038416857f67c4863f17da9847c57c9fa043e63a0ddf4f5a86fd63a6f71ea69057a11c411a613a36837f0000000000000000000000000000000000000000000000000000000000000000613b8b565b60408086015181519283526020830152810187905260600160405180910390a35050505050565b6000610be3825490565b60006116d08383614988565b613a7e6003826149b2565b613a9b5760405163b0ce759160e01b815260040160405180910390fd5b6001600160a01b03166000908152600260208190526040822080546001600160d01b031916815560018101805463ffffffff1916905590810180546001600160e01b031990811690915560038201805490911690556004810182905560050155565b60055463ffffffff9081169082168103613b15575050565b6005805463ffffffff191663ffffffff84811691821790925560408051928416835260208301919091527fb804b0ec3f0ea43004870df377170ce44cb789adca16d23286e337605558117f910160405180910390a15050565b6000613b7d8260200151151590565b8015610be357505051151590565b600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b03841603613bc257506001600160a01b03811631610be3565b826040516370a0823160e01b81526001600160a01b03848116600483015291909116906370a0823190602401602060405180830381865afa158015613c0b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d09190615646565b613c55604051806060016040528060001515815260200160008152602001600081525090565b600084602001516001600160801b031687613c709190615675565b90506000613c90613c8a8387600001518860200151613758565b886149c7565b905060008187600001516001600160801b0316613cad919061562e565b905084811015613ce15760405180606001604052806001151581526020016000815260200160008152509350505050613def565b86516001600160801b0316600003613d3c576000613d0060028761592c565b905081811115613d35576040518060600160405280600015158152602001600081526020016000815250945050505050613def565b9050613d73565b86516001600160801b03168110613d7357613d7081600289600001516001600160801b0316613d6b919061592c565b6149c7565b90505b8651600090613d8b906001600160801b031683615675565b905060008115613dad57613da88289602001518a60000151613758565b613db0565b60005b90506040518060600160405280600115158152602001848152602001828b602001516001600160801b0316613de5919061562e565b9052955050505050505b95945050505050565b60006001600160801b03821115613e655760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20316044820152663238206269747360c81b606482015260840160405180910390fd5b5090565b60408051808201909152600080825260208201526000613e9a613e94856000015186602001516149dd565b846149ed565b905060006040518060400160405280838760000151613eb991906159c3565b8152602001838760200151613ece91906159c3565b81525090508060200151600003610bdf57604051630d38a7e760e11b815260040160405180910390fd5b6000613f1082602001516001600160701b0316151590565b8015610be3575050516001600160701b0316151590565b604080518082019091526000808252602082015260408051808201909152602083810151825283519082018190521515612406565b82516000908190613f8e90613f7485620f42406159d7565b63ffffffff168660200151613f89919061592c565b614742565b90506000613fb38660200151620f424063ffffffff168760000151613f89919061592c565b8651909150600090613fe190613fcc87620f42406159fc565b63ffffffff168860200151613f89919061592c565b9050613fed8383614a1f565b80156116ca57506116ca8282614a1f565b6000600484018190556040805160608101909152908152602081016140216135ac565b815260200161402e6135ac565b9052805160018501805463ffffffff191663ffffffff9092169190911790556020808201518051600287018054928401516001600160701b039283166001600160e01b031994851617600160701b91841682021790915560409094015180516003890180549290950151908316919093161791169092029190911790558254600160c01b900460ff161561410357825460ff60c01b1916835560405160ff8216906000906001600160a01b038716907f162ed187f3ed3879ae360c5df2a0a5dcaac7a208a9d762c2cbbfb1f5fad8b81d908390a45b811561236257604051631ebda06d60e01b8152600481018690526001600160a01b038581166024830152604482018490527f00000000000000000000000000000000000000000000000000000000000000001690631ebda06d90606401611d21565b6040805180820190915260008082526020820152841580614184575083155b156141a25760405163bb55fd2760e01b815260040160405180910390fd5b60006141b385846116c5818a61562e565b905060006141cb8263ffffffff8716620f4240613758565b9050604051806040016040528082846141e49190615675565b8152602001919091529695505050505050565b60408051808201909152600080825260208201528460000361422c5760405163bb55fd2760e01b815260040160405180910390fd5b60006142518363ffffffff861661424687620f42406159d7565b63ffffffff16613758565b9050600061425f828561562e565b9050600061427288836116c5818b615675565b60408051808201909152908152602081019390935250909695505050505050565b7f000000000000000000000000000000000000000000000000000000000000000063ffffffff166000036142c45750565b600061430482606001517f000000000000000000000000000000000000000000000000000000000000000063ffffffff16620f424063ffffffff16613758565b9050808260c0018181516143189190615675565b90525061012082015161432d57608090910152565b6143428260c001518360a00151600084614165565b51608083015260c08201805182919061435c90839061562e565b905250608082015160a083018051614375908390615675565b90525060e08201805182919061438c908390615675565b9052505050565b815181516001600160801b039081169116146144255781518151604080516001600160801b0393841681529290911660208301526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116929086169187917f6e96dc5343d067ec486a9920e0304c3610ed05c65e45cc029d9b9fe7ecfa7620910160405180910390a45b81602001516001600160801b031681602001516001600160801b0316146125ae57826001600160a01b0316836001600160a01b0316857f6e96dc5343d067ec486a9920e0304c3610ed05c65e45cc029d9b9fe7ecfa7620856020015185602001516040516144a99291906001600160801b0392831681529116602082015260400190565b60405180910390a450505050565b6144bf6151a6565b6001600160801b038911806144da57506001600160801b0388115b806144eb57506001600160801b0387115b806144fc57506001600160801b0386115b8061450d57506001600160801b0385115b8061451a5750620f424084115b806145275750620f424083115b8061453157508582115b1561454f576040516318b103bd60e21b815260040160405180910390fd5b6000620f424061455f8582615675565b614569908561592c565b61457391906159c3565b905061457f888a61562e565b620f424061458d8682615675565b614597908a61592c565b6145a191906159c3565b11156146965760006145b3898b61562e565b620f42406145c18782615675565b6145cb908b61592c565b6145d591906159c3565b6145df9190615675565b905060006145ed8a8c61562e565b6145f7908a615675565b90506146058b8b8b88614a33565b801561460f575060005b1561462a576146238c8c8b858b8a89614a5d565b935061468f565b8b1561465c5761463d8c8c8c8c87614b36565b935061464d8c8c8b84878d614bb7565b60a0860152608085015261468f565b886146678b8561592c565b61467191906159c3565b60608501526146848c8c8b84878d614bb7565b60a086015260808501525b5050614711565b60006146ab6146a58a8c61562e565b89614c2c565b90506000811180156146c457506146c48a8a8a87614a33565b80156146d957506146d98a8983898989614c46565b156146f5576146ee8b8b8a848a8a8a89614cd0565b925061470f565b8a15614707576146ee8b8b8b85614d7e565b606083018290525b505b61471b8184615675565b60c08301525098975050505050505050565b60006116d0836001600160a01b038416614def565b604080518082019091526000808252602082015260006147628484614e3e565b905083830280821061479757604051806040016040528082846147859190615675565b81526020018281525092505050610be3565b604051806040016040528060016147ae8585900390565b6147b89190615675565b815260200191909152949350505050565b600081806147d9576147d96159ad565b838509949350505050565b604080518082019091526000808252602082015281836020015110614831576040518060400160405280846000015181526020018385602001516148289190615675565b90529050610be3565b60405180604001604052806001856000015161484d9190615675565b8152602001614860856020015185900390565b90529392505050565b60008061488161487b848084036159c3565b60010190565b905082846020015161489391906159c3565b8451820217949350505050565b60006001815b6008811015611c985783820260020382029150806148c381615961565b9150506148a6565b6040805180820190915260008082526020820152825160208301516148f9916001600160701b03169061592c565b60208401518351614913916001600160701b03169061592c565b0361491f575081610be3565b6116d06138cc61492e85613989565b8460046001614e4d565b600080614946858585613758565b905060006149558686866147c9565b111561297957600019811061497d57604051631a93c68960e11b815260040160405180910390fd5b61378181600161562e565b600082600001828154811061499f5761499f61594b565b9060005260206000200154905092915050565b60006116d0836001600160a01b038416614ede565b60008183106149d657816116d0565b5090919050565b6000818310156149d657816116d0565b60006149f98284615a24565b15614a05576001614a08565b60005b60ff16614a1583856159c3565b6116d0919061562e565b6000614a2b8383614fd1565b159392505050565b6000614a3f8284615675565b614a49908561592c565b614a53838761592c565b1095945050505050565b614a656151a6565b6000614a7485620f4240615675565b614a7e908761592c565b90506000614a9c89614a93620f42408b61592c565b87856001614ff9565b9050614ae1614ab5614aae878d61592c565b8484613758565b604080518082019091526000808252602082015250604080518082019091529081526000602082015290565b8352614b1d614af186898b613758565b604080518082019091526000808252602082015250604080518082019091529081526001602082015290565b6040840152505060608101919091529695505050505050565b614b3e6151a6565b6000614b66614b4d878561592c565b614b578587615675565b614b61908861592c565b614c2c565b9050614b7a614af188836116c5888b61592c565b8083526020830152614b8f614af185836159c3565b6040830152614ba883614ba2878961562e565b86613758565b60608301525095945050505050565b60008080614bc5868661592c565b90506000614bd3888661592c565b905080821115614c0e5760008a11614bec576000614c04565b614c048a614bfa8385615675565b6116c58b8d61592c565b9350849250614c1f565b60009350614c1c88836159c3565b92505b5050965096945050505050565b6000818311614c3c5760006116d0565b6116d08284615675565b600080614c82614c56888a61592c565b620f4240614c64878b61592c565b614c6e898b61592c565b614c78919061562e565b613f89919061592c565b90506000614cb7614c93858961592c565b614ca088620f4240615675565b614caa888c61592c565b614c6e620f42408c61592c565b9050614cc38282614fd1565b9998505050505050505050565b614cd86151a6565b6000614ce4858961592c565b614cf1620f42408961592c565b614cfb919061562e565b90506000614d3b8a614d1089620f4240615675565b614d1a908c61592c565b87614d288b620f4240615675565b614d32908761592c565b620f4240615024565b9050614d4d614af1614aae878e61592c565b8352614d64614ab586846116c5620f42408e61592c565b604084015250506060810191909152979650505050505050565b614d866151a6565b6000614d928385614c2c565b9050614da2614af1878388613758565b8083526020830152614dda81604080518082019091526000808252602082015250604080518082019091529081526001602082015290565b60408301525060608101919091529392505050565b6000818152600183016020526040812054614e3657508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610be3565b506000610be3565b60006000198284099392505050565b604080518082019091526000808252602082015260405180604001604052808386600001518860200151614e81919061592c565b614e8b919061592c565b602087015188518791614e9d9161592c565b614ea7919061592c565b614eb1919061562e565b8152602001614ec0848661562e565b86602001518860200151614ed4919061592c565b61394a919061592c565b60008181526001830160205260408120548015614fc7576000614f02600183615675565b8554909150600090614f1690600190615675565b9050818114614f7b576000866000018281548110614f3657614f3661594b565b9060005260206000200154905080876000018481548110614f5957614f5961594b565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080614f8c57614f8c615a38565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610be3565b6000915050610be3565b8051825160009110806116d05750815183511480156116d05750506020908101519101511190565b6000615006848484613758565b615010868861592c565b61501a9190615675565b9695505050505050565b6000615031848484613758565b61503b868861592c565b61501a919061562e565b6040805160c08101825260008082526020820181905291810182905260608101919091526080810161507561509d565b815260408051606081018252600080825260208281018290529282015291015290565b905290565b6040518060600160405280600063ffffffff1681526020016150cf604080518082019091526000808252602082015290565b8152602001615098604080518082019091526000808252602082015290565b60405180610180016040528060008152602001600081526020016000815260200161512e6040518060400160405280600081526020016000151581525090565b81526020016151526040518060400160405280600081526020016000151581525090565b81526020016151766040518060400160405280600081526020016000151581525090565b81526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040805161012081018252600060e082018181526101008301829052825282518084018452818152602080820183905280840191909152835180850185528281529081019190915290918201908152602001600081526020016000815260200160008152602001600081525090565b6001600160a01b038116811461171257600080fd5b60006020828403121561523c57600080fd5b81356116d081615215565b81516001600160a01b0316815260208083015163ffffffff908116828401526040808501511515908401526060808501511515908401526080808501518051909216908401528082015180516001600160701b0390811660a08601529281015190921660c0840152610180830191506040015180516001600160701b0390811660e08501526020820151166101008401525060a083015180516001600160801b039081166101208501526020820151166101408401526040810151610160840152611c98565b6000806040838503121561532057600080fd5b823561532b81615215565b946020939093013593505050565b60008060006060848603121561534e57600080fd5b833561535981615215565b95602085013595506040909401359392505050565b60008060006060848603121561538357600080fd5b833561538e81615215565b9250602084013561539e81615215565b929592945050506040919091013590565b81518152602080830151908201526040808301519082015260608101610be3565b600080600080600060a086880312156153e857600080fd5b8535945060208601356153fa81615215565b9350604086013561540a81615215565b94979396509394606081013594506080013592915050565b801515811461171257600080fd5b6000806040838503121561544357600080fd5b823561544e81615215565b9150602083013561545e81615422565b809150509250929050565b6000808284036101a081121561547e57600080fd5b833561548981615215565b9250610180601f198201121561549e57600080fd5b506020830190509250929050565b63ffffffff8116811461171257600080fd5b600080604083850312156154d157600080fd5b82356154dc81615215565b9150602083013561545e816154ac565b6000602082840312156154fe57600080fd5b81356116d081615422565b6000806000806080858703121561551f57600080fd5b84359350602085013561553181615215565b9250604085013561554181615215565b9396929550929360600135925050565b81516001600160801b039081168252602080840151909116908201526040808301519082015260608101610be3565b6020808252825182820181905260009190848201906040850190845b818110156155c15783516001600160a01b03168352928401929184019160010161559c565b50909695505050505050565b600080604083850312156155e057600080fd5b82356155eb81615215565b9150602083013561545e81615215565b60006020828403121561560d57600080fd5b81356116d0816154ac565b634e487b7160e01b600052601160045260246000fd5b6000821982111561564157615641615618565b500190565b60006020828403121561565857600080fd5b5051919050565b634e487b7160e01b600052602160045260246000fd5b60008282101561568757615687615618565b500390565b60006020828403121561569e57600080fd5b81516116d081615422565b6000602082840312156156bb57600080fd5b81516116d081615215565b634e487b7160e01b600052604160045260246000fd5b60405160c0810167ffffffffffffffff8111828210171561570d57634e487b7160e01b600052604160045260246000fd5b60405290565b6040516060810167ffffffffffffffff8111828210171561570d57634e487b7160e01b600052604160045260246000fd5b80356001600160701b038116811461575b57600080fd5b919050565b60006040828403121561577257600080fd5b6040516040810181811067ffffffffffffffff821117156157a357634e487b7160e01b600052604160045260246000fd5b6040529050806157b283615744565b81526157c060208401615744565b60208201525092915050565b80356001600160801b038116811461575b57600080fd5b6000606082840312156157f557600080fd5b6040516060810181811067ffffffffffffffff8211171561582657634e487b7160e01b600052604160045260246000fd5b604052905080615835836157cc565b8152615843602084016157cc565b6020820152604083013560408201525092915050565b600081830361018081121561586d57600080fd5b6158756156dc565b833561588081615215565b81526020840135615890816154ac565b602082015260408401356158a381615422565b604082015260608401356158b681615422565b606082015260a0607f19830112156158cd57600080fd5b6158d5615713565b915060808401356158e5816154ac565b82526158f48560a08601615760565b60208301526159068560e08601615760565b604083015281608082015261591f8561012086016157e3565b60a0820152949350505050565b600081600019048311821515161561594657615946615618565b500290565b634e487b7160e01b600052603260045260246000fd5b60006001820161597357615973615618565b5060010190565b60006020828403121561598c57600080fd5b81516116d0816154ac565b634e487b7160e01b600052600160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b6000826159d2576159d26159ad565b500490565b600063ffffffff838116908316818110156159f4576159f4615618565b039392505050565b600063ffffffff808316818516808303821115615a1b57615a1b615618565b01949350505050565b600082615a3357615a336159ad565b500690565b634e487b7160e01b600052603160045260246000fdfea164736f6c634300080d000a",
  "deployedBytecode": "",
  "devdoc": {
    "details": "Pool Collection contract notes: - the address of reserve token serves as the pool unique ID in both contract functions and events",
    "events": {
      "DefaultTradingFeePPMUpdated(uint32,uint32)": {
        "details": "triggered when the default trading fee is updated"
      },
      "DepositingEnabled(address,bool)": {
        "details": "triggered when depositing into a specific pool is enabled/disabled"
      },
      "TokensDeposited(bytes32,address,address,uint256,uint256)": {
        "details": "triggered when new liquidity is deposited into a pool"
      },
      "TokensWithdrawn(bytes32,address,address,uint256,uint256,uint256,uint256,uint256)": {
        "details": "triggered when existing liquidity is withdrawn from a pool"
      },
      "TotalLiquidityUpdated(bytes32,address,uint256,uint256,uint256)": {
        "details": "triggered when the total liquidity in a pool is updated"
      },
      "TradingEnabled(address,bool,uint8)": {
        "details": "triggered when trading in a specific pool is enabled/disabled"
      },
      "TradingFeePPMUpdated(address,uint32,uint32)": {
        "details": "triggered when a specific pool's trading fee is updated"
      },
      "TradingLiquidityUpdated(bytes32,address,address,uint256,uint256)": {
        "details": "triggered when the trading liquidity in a pool is updated"
      }
    },
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "used by a new owner to accept an ownership transfer"
      },
      "constructor": {
        "details": "initializes a new PoolCollection contract"
      },
      "createPool(address)": {
        "details": "creates a new pool requirements: - the caller must be the network contract - the pool should have been whitelisted - the pool isn't already defined in the collection"
      },
      "defaultTradingFeePPM()": {
        "details": "returns the default trading fee (in units of PPM)"
      },
      "depositFor(bytes32,address,address,uint256)": {
        "details": "deposits base token liquidity on behalf of a specific provider and returns the respective pool token amount requirements: - the caller must be the network contract - assumes that the base token has been already deposited in the vault"
      },
      "depositingEnabled(address)": {
        "details": "returns whether depositing is enabled"
      },
      "disableTrading(address)": {
        "details": "disables trading in a given pool requirements: - the caller must be the owner of the contract"
      },
      "enableDepositing(address,bool)": {
        "details": "enables/disables depositing into a given pool requirements: - the caller must be the owner of the contract"
      },
      "enableProtection(bool)": {
        "details": "enables/disables protection requirements: - the caller must be the owner of the contract"
      },
      "enableTrading(address,uint256,uint256)": {
        "details": "enables trading in a given pool, by providing the funding rate as two virtual balances, and updates its trading liquidity please note that the virtual balances should be derived from token prices, normalized to the smallest unit of tokens. In other words, the ratio between BNT and TKN virtual balances should be the ratio between the $ value of 1 wei of TKN and 1 wei of BNT, taking both of their decimals into account. For example: - if the price of one (10**18 wei) BNT is $X and the price of one (10**18 wei) TKN is $Y, then the virtual balances   should represent a ratio of X to Y - if the price of one (10**18 wei) BNT is $X and the price of one (10**6 wei) USDC is $Y, then the virtual balances   should represent a ratio of X to Y*10**12 requirements: - the caller must be the owner of the contract"
      },
      "isPoolStable(address)": {
        "details": "returns whether the pool is stable"
      },
      "isPoolValid(address)": {
        "details": "returns whether a pool is valid"
      },
      "migratePoolIn(address,(address,uint32,bool,bool,(uint32,(uint112,uint112),(uint112,uint112)),(uint128,uint128,uint256)))": {
        "details": "migrates a pool to this pool collection requirements: - the caller must be the pool migrator contract"
      },
      "migratePoolOut(address,address)": {
        "details": "migrates a pool from this pool collection requirements: - the caller must be the pool migrator contract"
      },
      "networkFeePPM()": {
        "details": "returns the network fee (in units of PPM)"
      },
      "newOwner()": {
        "details": "returns the address of the new owner candidate"
      },
      "onFeesCollected(address,uint256)": {
        "details": "notifies the pool of accrued fees requirements: - the caller must be the network contract"
      },
      "owner()": {
        "details": "returns the address of the current owner"
      },
      "poolCount()": {
        "details": "returns the number of all the pools which are managed by this pool collection"
      },
      "poolData(address)": {
        "details": "returns specific pool's data notes: - there is no guarantee that this function will remains forward compatible, so please avoid relying on it and   rely on specific getters from the IPoolCollection interface instead"
      },
      "poolLiquidity(address)": {
        "details": "returns the overall liquidity in the pool"
      },
      "poolToken(address)": {
        "details": "returns the pool token of the pool"
      },
      "poolTokenAmountToBurn(address,uint256,uint256)": {
        "details": "returns the number of pool token to burn in order to increase everyone's underlying value by the specified amount"
      },
      "poolTokenToUnderlying(address,uint256)": {
        "details": "converts the specified pool token amount to the underlying base token amount"
      },
      "poolType()": {
        "details": "returns the type of the pool"
      },
      "pools()": {
        "details": "returns all the pools which are managed by this pool collection"
      },
      "protectionEnabled()": {
        "details": "returns the status of the protection"
      },
      "setDefaultTradingFeePPM(uint32)": {
        "details": "sets the default trading fee (in units of PPM) requirements: - the caller must be the owner of the contract"
      },
      "setTradingFeePPM(address,uint32)": {
        "details": "sets the trading fee of a given pool requirements: - the caller must be the owner of the contract"
      },
      "tradeBySourceAmount(bytes32,address,address,uint256,uint256)": {
        "details": "performs a trade by providing the source amount and returns the target amount and the associated fee requirements: - the caller must be the network contract"
      },
      "tradeByTargetAmount(bytes32,address,address,uint256,uint256)": {
        "details": "performs a trade by providing the target amount and returns the required source amount and the associated fee requirements: - the caller must be the network contract"
      },
      "tradeInputAndFeeByTargetAmount(address,address,uint256)": {
        "details": "returns the input amount and fee when trading by providing the target amount"
      },
      "tradeOutputAndFeeBySourceAmount(address,address,uint256)": {
        "details": "returns the output amount and fee when trading by providing the source amount"
      },
      "tradingEnabled(address)": {
        "details": "returns whether trading is enabled"
      },
      "tradingFeePPM(address)": {
        "details": "returns the trading fee (in units of PPM)"
      },
      "transferOwnership(address)": {
        "details": "allows transferring the contract ownership requirements: - the caller must be the owner of the contract - the new owner still needs to accept the transfer"
      },
      "underlyingToPoolToken(address,uint256)": {
        "details": "converts the specified underlying base token amount to pool token amount"
      },
      "withdraw(bytes32,address,address,uint256,uint256)": {
        "details": "handles some of the withdrawal-related actions and returns the withdrawn base token amount requirements: - the caller must be the network contract - the caller must have approved the collection to transfer/burn the pool token amount on its behalf"
      },
      "withdrawalAmounts(address,uint256)": {
        "details": "returns the amounts that would be returned if the position is currently withdrawn, along with the breakdown of the base token and the BNT compensation"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 31278,
        "contract": "contracts/pools/PoolCollection.sol:PoolCollection",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 31280,
        "contract": "contracts/pools/PoolCollection.sol:PoolCollection",
        "label": "_newOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 18540,
        "contract": "contracts/pools/PoolCollection.sol:PoolCollection",
        "label": "_poolData",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_contract(Token)29449,t_struct(Pool)23917_storage)"
      },
      {
        "astId": 18543,
        "contract": "contracts/pools/PoolCollection.sol:PoolCollection",
        "label": "_pools",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(AddressSet)6608_storage"
      },
      {
        "astId": 18545,
        "contract": "contracts/pools/PoolCollection.sol:PoolCollection",
        "label": "_defaultTradingFeePPM",
        "offset": 0,
        "slot": "5",
        "type": "t_uint32"
      },
      {
        "astId": 18548,
        "contract": "contracts/pools/PoolCollection.sol:PoolCollection",
        "label": "_protectionEnabled",
        "offset": 4,
        "slot": "5",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IPoolToken)24290": {
        "encoding": "inplace",
        "label": "contract IPoolToken",
        "numberOfBytes": "20"
      },
      "t_contract(Token)29449": {
        "encoding": "inplace",
        "label": "contract Token",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(Token)29449,t_struct(Pool)23917_storage)": {
        "encoding": "mapping",
        "key": "t_contract(Token)29449",
        "label": "mapping(contract Token => struct Pool)",
        "numberOfBytes": "32",
        "value": "t_struct(Pool)23917_storage"
      },
      "t_struct(AddressSet)6608_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 6607,
            "contract": "contracts/pools/PoolCollection.sol:PoolCollection",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)6307_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(AverageRates)23901_storage": {
        "encoding": "inplace",
        "label": "struct AverageRates",
        "members": [
          {
            "astId": 23894,
            "contract": "contracts/pools/PoolCollection.sol:PoolCollection",
            "label": "blockNumber",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 23897,
            "contract": "contracts/pools/PoolCollection.sol:PoolCollection",
            "label": "rate",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(Fraction112)29812_storage"
          },
          {
            "astId": 23900,
            "contract": "contracts/pools/PoolCollection.sol:PoolCollection",
            "label": "invRate",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(Fraction112)29812_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Fraction112)29812_storage": {
        "encoding": "inplace",
        "label": "struct Fraction112",
        "members": [
          {
            "astId": 29809,
            "contract": "contracts/pools/PoolCollection.sol:PoolCollection",
            "label": "n",
            "offset": 0,
            "slot": "0",
            "type": "t_uint112"
          },
          {
            "astId": 29811,
            "contract": "contracts/pools/PoolCollection.sol:PoolCollection",
            "label": "d",
            "offset": 14,
            "slot": "0",
            "type": "t_uint112"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Pool)23917_storage": {
        "encoding": "inplace",
        "label": "struct Pool",
        "members": [
          {
            "astId": 23904,
            "contract": "contracts/pools/PoolCollection.sol:PoolCollection",
            "label": "poolToken",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IPoolToken)24290"
          },
          {
            "astId": 23906,
            "contract": "contracts/pools/PoolCollection.sol:PoolCollection",
            "label": "tradingFeePPM",
            "offset": 20,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 23908,
            "contract": "contracts/pools/PoolCollection.sol:PoolCollection",
            "label": "tradingEnabled",
            "offset": 24,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 23910,
            "contract": "contracts/pools/PoolCollection.sol:PoolCollection",
            "label": "depositingEnabled",
            "offset": 25,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 23913,
            "contract": "contracts/pools/PoolCollection.sol:PoolCollection",
            "label": "averageRates",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(AverageRates)23901_storage"
          },
          {
            "astId": 23916,
            "contract": "contracts/pools/PoolCollection.sol:PoolCollection",
            "label": "liquidity",
            "offset": 0,
            "slot": "4",
            "type": "t_struct(PoolLiquidity)23892_storage"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(PoolLiquidity)23892_storage": {
        "encoding": "inplace",
        "label": "struct PoolLiquidity",
        "members": [
          {
            "astId": 23887,
            "contract": "contracts/pools/PoolCollection.sol:PoolCollection",
            "label": "bntTradingLiquidity",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 23889,
            "contract": "contracts/pools/PoolCollection.sol:PoolCollection",
            "label": "baseTokenTradingLiquidity",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 23891,
            "contract": "contracts/pools/PoolCollection.sol:PoolCollection",
            "label": "stakedBalance",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)6307_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 6302,
            "contract": "contracts/pools/PoolCollection.sol:PoolCollection",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 6306,
            "contract": "contracts/pools/PoolCollection.sol:PoolCollection",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint112": {
        "encoding": "inplace",
        "label": "uint112",
        "numberOfBytes": "14"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}