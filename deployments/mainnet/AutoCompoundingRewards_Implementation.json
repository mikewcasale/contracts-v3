{
  "address": "0x73ED6d3f4941F7B3B065C5e7D37365167A0c2898",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IBancorNetwork",
          "name": "initNetwork",
          "type": "address"
        },
        {
          "internalType": "contract INetworkSettings",
          "name": "initNetworkSettings",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "initBNT",
          "type": "address"
        },
        {
          "internalType": "contract IBNTPool",
          "name": "initBNTPool",
          "type": "address"
        },
        {
          "internalType": "contract IExternalRewardsVault",
          "name": "initExternalRewardsVault",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessDenied",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AlreadyExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AlreadyInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientFunds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidParam",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotWhitelisted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Overflow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroValue",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prevCount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCount",
          "type": "uint256"
        }
      ],
      "name": "AutoProcessRewardsCountUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract Token",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalRewards",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "startTime",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "halfLife",
          "type": "uint32"
        }
      ],
      "name": "ExpDecayProgramCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract Token",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalRewards",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "startTime",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "endTime",
          "type": "uint32"
        }
      ],
      "name": "FlatProgramCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract Token",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "paused",
          "type": "bool"
        }
      ],
      "name": "ProgramPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract Token",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "endTime",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "remainingRewards",
          "type": "uint256"
        }
      ],
      "name": "ProgramTerminated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract Token",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardsAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolTokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "remainingRewards",
          "type": "uint256"
        }
      ],
      "name": "RewardsDistributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "autoProcessRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "autoProcessRewardsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Token",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalRewards",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "startTime",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "halfLife",
          "type": "uint32"
        }
      ],
      "name": "createExpDecayProgram",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Token",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalRewards",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "startTime",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "endTime",
          "type": "uint32"
        }
      ],
      "name": "createFlatProgram",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Token",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "isProgramActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Token",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "isProgramPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Token",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "pause",
          "type": "bool"
        }
      ],
      "name": "pauseProgram",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pools",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "postUpgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Token",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "processRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Token",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "program",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "startTime",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "endTime",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "halfLife",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "prevDistributionTimestamp",
              "type": "uint32"
            },
            {
              "internalType": "contract IPoolToken",
              "name": "poolToken",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isPaused",
              "type": "bool"
            },
            {
              "internalType": "uint8",
              "name": "distributionType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "totalRewards",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "remainingRewards",
              "type": "uint256"
            }
          ],
          "internalType": "struct ProgramData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "programs",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "startTime",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "endTime",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "halfLife",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "prevDistributionTimestamp",
              "type": "uint32"
            },
            {
              "internalType": "contract IPoolToken",
              "name": "poolToken",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isPaused",
              "type": "bool"
            },
            {
              "internalType": "uint8",
              "name": "distributionType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "totalRewards",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "remainingRewards",
              "type": "uint256"
            }
          ],
          "internalType": "struct ProgramData[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newCount",
          "type": "uint256"
        }
      ],
      "name": "setAutoProcessRewardsCount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Token",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "terminateProgram",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x7d642a7cfbd11b8ecc192fb860dc7a24c418d81e583b38e229ff924b7c3340aa",
  "receipt": {
    "to": null,
    "from": "0x5bEBA4D3533a963Dedb270a95ae5f7752fA0Fe22",
    "contractAddress": "0x73ED6d3f4941F7B3B065C5e7D37365167A0c2898",
    "transactionIndex": 8,
    "gasUsed": "2863064",
    "logsBloom": "0x
    "blockHash": "0x37ba2c895c233b755c5d85077325dfb1dc32a3b0882721ea0e2af6dabedd8226",
    "transactionHash": "0x7d642a7cfbd11b8ecc192fb860dc7a24c418d81e583b38e229ff924b7c3340aa",
    "logs": [],
    "blockNumber": 15383834,
    "cumulativeGasUsed": "3902144",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xeEF417e1D5CC832e619ae18D2F140De2999dD4fB",
    "0x83E1814ba31F7ea95D216204BB45FE75Ce09b14F",
    "0x1F573D6Fb3F13d689FF844B4cE37794d79a7FF1C",
    "0x02651E355D26f3506C1E644bA393FDD9Ac95EaCa",
    "0x2A2A2BE5cCf20F3633c6ca2D429Ac51186a631e1"
  ],
  "numDeployments": 1,
  "solcInputHash": "d39fbe611977aa2f76f0f92072f1d3a3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IBancorNetwork\",\"name\":\"initNetwork\",\"type\":\"address\"},{\"internalType\":\"contract INetworkSettings\",\"name\":\"initNetworkSettings\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"initBNT\",\"type\":\"address\"},{\"internalType\":\"contract IBNTPool\",\"name\":\"initBNTPool\",\"type\":\"address\"},{\"internalType\":\"contract IExternalRewardsVault\",\"name\":\"initExternalRewardsVault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessDenied\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientFunds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidParam\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotWhitelisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Overflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroValue\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCount\",\"type\":\"uint256\"}],\"name\":\"AutoProcessRewardsCountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract Token\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalRewards\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"halfLife\",\"type\":\"uint32\"}],\"name\":\"ExpDecayProgramCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract Token\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalRewards\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"endTime\",\"type\":\"uint32\"}],\"name\":\"FlatProgramCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract Token\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"ProgramPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract Token\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"endTime\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainingRewards\",\"type\":\"uint256\"}],\"name\":\"ProgramTerminated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract Token\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardsAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainingRewards\",\"type\":\"uint256\"}],\"name\":\"RewardsDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoProcessRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoProcessRewardsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Token\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"halfLife\",\"type\":\"uint32\"}],\"name\":\"createExpDecayProgram\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Token\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endTime\",\"type\":\"uint32\"}],\"name\":\"createFlatProgram\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Token\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"isProgramActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Token\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"isProgramPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Token\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"pause\",\"type\":\"bool\"}],\"name\":\"pauseProgram\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"postUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Token\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"processRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Token\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"program\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"halfLife\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"prevDistributionTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"contract IPoolToken\",\"name\":\"poolToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"distributionType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"totalRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingRewards\",\"type\":\"uint256\"}],\"internalType\":\"struct ProgramData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"programs\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"halfLife\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"prevDistributionTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"contract IPoolToken\",\"name\":\"poolToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"distributionType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"totalRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingRewards\",\"type\":\"uint256\"}],\"internalType\":\"struct ProgramData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCount\",\"type\":\"uint256\"}],\"name\":\"setAutoProcessRewardsCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Token\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"terminateProgram\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Auto-compounding Rewards contract\",\"events\":{\"AutoProcessRewardsCountUpdated(uint256,uint256)\":{\"details\":\"triggered when the number of programs to auto-process the rewards for is updated\"},\"ExpDecayProgramCreated(address,uint256,uint32,uint32)\":{\"details\":\"triggered when an exponential-decay program is created\"},\"FlatProgramCreated(address,uint256,uint32,uint32)\":{\"details\":\"triggered when a flat program is created\"},\"ProgramPaused(address,bool)\":{\"details\":\"triggered when a program is paused/resumed\"},\"ProgramTerminated(address,uint32,uint256)\":{\"details\":\"triggered when a program is terminated prematurely\"},\"RewardsDistributed(address,uint256,uint256,uint256)\":{\"details\":\"triggered when rewards are distributed\"}},\"kind\":\"dev\",\"methods\":{\"autoProcessRewards()\":{\"details\":\"processes program rewards based on internal logic, without requiring any input\"},\"autoProcessRewardsCount()\":{\"details\":\"returns the number of programs to auto-process the rewards for\"},\"constructor\":{\"details\":\"a \\\"virtual\\\" constructor that is only used to set immutable state variables\"},\"createExpDecayProgram(address,uint256,uint32,uint32)\":{\"details\":\"creates a rewards program with exponential-decay distribution for a given pool requirements: - the caller must be the admin of the contract - the pool must not have an active program\"},\"createFlatProgram(address,uint256,uint32,uint32)\":{\"details\":\"creates a rewards program with flat distribution for a given pool requirements: - the caller must be the admin of the contract - the pool must not have an active program\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize()\":{\"details\":\"fully initializes the contract and its parents\"},\"isProgramActive(address)\":{\"details\":\"returns whether a program is currently active\"},\"isProgramPaused(address)\":{\"details\":\"returns whether the specified program is paused\"},\"pauseProgram(address,bool)\":{\"details\":\"pauses or resumes a program requirements: - the caller must be the admin of the contract\"},\"pools()\":{\"details\":\"returns a list of all the pools which have a program associated with them\"},\"postUpgrade(bytes)\":{\"details\":\"performs post-upgrade initialization requirements: - this must can be called only once per-upgrade\"},\"processRewards(address)\":{\"details\":\"processes program rewards\"},\"program(address)\":{\"details\":\"returns the program data of a pool\"},\"programs()\":{\"details\":\"returns a list of all pools' program data\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"roleAdmin()\":{\"details\":\"returns the admin role\"},\"setAutoProcessRewardsCount(uint256)\":{\"details\":\"sets the number of programs to auto-process the rewards for requirements: - the caller must be the admin of the contract\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"terminateProgram(address)\":{\"details\":\"terminates a rewards program requirements: - the caller must be the admin of the contract - the program must be active\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/rewards/AutoCompoundingRewards.sol\":\"AutoCompoundingRewards\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"./AccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\\n    function __AccessControlEnumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\\n    }\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc2dfd6ba9449f61b6b03b262182faf302f093a8c05dd10792aeecb4ed1663c0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2ffe9655abbb3741fcb84ad10e2f628d5dbec46b3f84a69ceec4752e807e2757\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7acbc538aad6eb4614e26612a8c5c0149bb8808db95e2638d245a8365f63e572\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x0004699ba89fa356eb0d58d815b42dcf52eccd2765e95256631b838bce2556bc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xdadd41acb749920eccf40aeaa8d291adf9751399a7343561bad13e7a8d99be0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"contracts/network/interfaces/IBancorNetwork.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.13;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { IUpgradeable } from \\\"../../utility/interfaces/IUpgradeable.sol\\\";\\n\\nimport { Token } from \\\"../../token/Token.sol\\\";\\n\\nimport { IPoolCollection } from \\\"../../pools/interfaces/IPoolCollection.sol\\\";\\nimport { IPoolToken } from \\\"../../pools/interfaces/IPoolToken.sol\\\";\\n\\n/**\\n * @dev Flash-loan recipient interface\\n */\\ninterface IFlashLoanRecipient {\\n    /**\\n     * @dev a flash-loan recipient callback after each the caller must return the borrowed amount and an additional fee\\n     */\\n    function onFlashLoan(\\n        address caller,\\n        IERC20 erc20Token,\\n        uint256 amount,\\n        uint256 feeAmount,\\n        bytes memory data\\n    ) external;\\n}\\n\\n/**\\n * @dev Bancor Network interface\\n */\\ninterface IBancorNetwork is IUpgradeable {\\n    /**\\n     * @dev returns the set of all valid pool collections\\n     */\\n    function poolCollections() external view returns (IPoolCollection[] memory);\\n\\n    /**\\n     * @dev returns the set of all liquidity pools\\n     */\\n    function liquidityPools() external view returns (Token[] memory);\\n\\n    /**\\n     * @dev returns the respective pool collection for the provided pool\\n     */\\n    function collectionByPool(Token pool) external view returns (IPoolCollection);\\n\\n    /**\\n     * @dev creates new pools\\n     *\\n     * requirements:\\n     *\\n     * - none of the pools already exists\\n     */\\n    function createPools(Token[] calldata tokens, IPoolCollection poolCollection) external;\\n\\n    /**\\n     * @dev migrates a list of pools between pool collections\\n     *\\n     * notes:\\n     *\\n     * - invalid or incompatible pools will be skipped gracefully\\n     */\\n    function migratePools(Token[] calldata pools, IPoolCollection newPoolCollection) external;\\n\\n    /**\\n     * @dev deposits liquidity for the specified provider and returns the respective pool token amount\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have approved the network to transfer the tokens on its behalf (except for in the\\n     *   native token case)\\n     */\\n    function depositFor(\\n        address provider,\\n        Token pool,\\n        uint256 tokenAmount\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @dev deposits liquidity for the current provider and returns the respective pool token amount\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have approved the network to transfer the tokens on its behalf (except for in the\\n     *   native token case)\\n     */\\n    function deposit(Token pool, uint256 tokenAmount) external payable returns (uint256);\\n\\n    /**\\n     * @dev initiates liquidity withdrawal\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have approved the contract to transfer the pool token amount on its behalf\\n     */\\n    function initWithdrawal(IPoolToken poolToken, uint256 poolTokenAmount) external returns (uint256);\\n\\n    /**\\n     * @dev cancels a withdrawal request, and returns the number of pool token amount associated with the withdrawal\\n     * request\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have already initiated a withdrawal and received the specified id\\n     */\\n    function cancelWithdrawal(uint256 id) external returns (uint256);\\n\\n    /**\\n     * @dev withdraws liquidity and returns the withdrawn amount\\n     *\\n     * requirements:\\n     *\\n     * - the provider must have already initiated a withdrawal and received the specified id\\n     * - the specified withdrawal request is eligible for completion\\n     * - the provider must have approved the network to transfer vBNT amount on its behalf, when withdrawing BNT\\n     * liquidity\\n     */\\n    function withdraw(uint256 id) external returns (uint256);\\n\\n    /**\\n     * @dev performs a trade by providing the input source amount, sends the proceeds to the optional beneficiary (or\\n     * to the address of the caller, in case it's not supplied), and returns the trade target amount\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have approved the network to transfer the source tokens on its behalf (except for in the\\n     *   native token case)\\n     */\\n    function tradeBySourceAmount(\\n        Token sourceToken,\\n        Token targetToken,\\n        uint256 sourceAmount,\\n        uint256 minReturnAmount,\\n        uint256 deadline,\\n        address beneficiary\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @dev performs a trade by providing the output target amount, sends the proceeds to the optional beneficiary (or\\n     * to the address of the caller, in case it's not supplied), and returns the trade source amount\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have approved the network to transfer the source tokens on its behalf (except for in the\\n     *   native token case)\\n     */\\n    function tradeByTargetAmount(\\n        Token sourceToken,\\n        Token targetToken,\\n        uint256 targetAmount,\\n        uint256 maxSourceAmount,\\n        uint256 deadline,\\n        address beneficiary\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @dev provides a flash-loan\\n     *\\n     * requirements:\\n     *\\n     * - the recipient's callback must return *at least* the borrowed amount and fee back to the specified return address\\n     */\\n    function flashLoan(\\n        Token token,\\n        uint256 amount,\\n        IFlashLoanRecipient recipient,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev deposits liquidity during a migration\\n     */\\n    function migrateLiquidity(\\n        Token token,\\n        address provider,\\n        uint256 amount,\\n        uint256 availableAmount,\\n        uint256 originalAmount\\n    ) external payable;\\n\\n    /**\\n     * @dev withdraws pending network fees, and returns the amount of fees withdrawn\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have the ROLE_NETWORK_FEE_MANAGER privilege\\n     */\\n    function withdrawNetworkFees(address recipient) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x30069819ffc1c8fcfbaa0da2308f256efffcfc217aa83b61313342e82342d346\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/network/interfaces/INetworkSettings.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.13;\\n\\nimport { IUpgradeable } from \\\"../../utility/interfaces/IUpgradeable.sol\\\";\\n\\nimport { Token } from \\\"../../token/Token.sol\\\";\\n\\nerror NotWhitelisted();\\n\\nstruct VortexRewards {\\n    // the percentage of converted BNT to be sent to the initiator of the burning event (in units of PPM)\\n    uint32 burnRewardPPM;\\n    // the maximum burn reward to be sent to the initiator of the burning event\\n    uint256 burnRewardMaxAmount;\\n}\\n\\n/**\\n * @dev Network Settings interface\\n */\\ninterface INetworkSettings is IUpgradeable {\\n    /**\\n     * @dev returns the protected tokens whitelist\\n     */\\n    function protectedTokenWhitelist() external view returns (Token[] memory);\\n\\n    /**\\n     * @dev checks whether a given token is whitelisted\\n     */\\n    function isTokenWhitelisted(Token pool) external view returns (bool);\\n\\n    /**\\n     * @dev returns the BNT funding limit for a given pool\\n     */\\n    function poolFundingLimit(Token pool) external view returns (uint256);\\n\\n    /**\\n     * @dev returns the minimum BNT trading liquidity required before the system enables trading in the relevant pool\\n     */\\n    function minLiquidityForTrading() external view returns (uint256);\\n\\n    /**\\n     * @dev returns the withdrawal fee (in units of PPM)\\n     */\\n    function withdrawalFeePPM() external view returns (uint32);\\n\\n    /**\\n     * @dev returns the default flash-loan fee (in units of PPM)\\n     */\\n    function defaultFlashLoanFeePPM() external view returns (uint32);\\n\\n    /**\\n     * @dev returns the flash-loan fee (in units of PPM) of a pool\\n     */\\n    function flashLoanFeePPM(Token pool) external view returns (uint32);\\n\\n    /**\\n     * @dev returns the vortex settings\\n     */\\n    function vortexRewards() external view returns (VortexRewards memory);\\n}\\n\",\"keccak256\":\"0x92ef678ce3b9dbb2ff12c2bfb59277456ed3e385260f860a81b920439c5252fe\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/pools/interfaces/IBNTPool.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.13;\\n\\nimport { IPoolToken } from \\\"./IPoolToken.sol\\\";\\n\\nimport { Token } from \\\"../../token/Token.sol\\\";\\n\\nimport { IVault } from \\\"../../vaults/interfaces/IVault.sol\\\";\\n\\n// the BNT pool token manager role is required to access the BNT pool tokens\\nbytes32 constant ROLE_BNT_POOL_TOKEN_MANAGER = keccak256(\\\"ROLE_BNT_POOL_TOKEN_MANAGER\\\");\\n\\n// the BNT manager role is required to request the BNT pool to mint BNT\\nbytes32 constant ROLE_BNT_MANAGER = keccak256(\\\"ROLE_BNT_MANAGER\\\");\\n\\n// the vault manager role is required to request the BNT pool to burn BNT from the master vault\\nbytes32 constant ROLE_VAULT_MANAGER = keccak256(\\\"ROLE_VAULT_MANAGER\\\");\\n\\n// the funding manager role is required to request or renounce funding from the BNT pool\\nbytes32 constant ROLE_FUNDING_MANAGER = keccak256(\\\"ROLE_FUNDING_MANAGER\\\");\\n\\n/**\\n * @dev BNT Pool interface\\n */\\ninterface IBNTPool is IVault {\\n    /**\\n     * @dev returns the BNT pool token contract\\n     */\\n    function poolToken() external view returns (IPoolToken);\\n\\n    /**\\n     * @dev returns the total staked BNT balance in the network\\n     */\\n    function stakedBalance() external view returns (uint256);\\n\\n    /**\\n     * @dev returns the current funding of given pool\\n     */\\n    function currentPoolFunding(Token pool) external view returns (uint256);\\n\\n    /**\\n     * @dev returns the available BNT funding for a given pool\\n     */\\n    function availableFunding(Token pool) external view returns (uint256);\\n\\n    /**\\n     * @dev converts the specified pool token amount to the underlying BNT amount\\n     */\\n    function poolTokenToUnderlying(uint256 poolTokenAmount) external view returns (uint256);\\n\\n    /**\\n     * @dev converts the specified underlying BNT amount to pool token amount\\n     */\\n    function underlyingToPoolToken(uint256 bntAmount) external view returns (uint256);\\n\\n    /**\\n     * @dev returns the number of pool token to burn in order to increase everyone's underlying value by the specified\\n     * amount\\n     */\\n    function poolTokenAmountToBurn(uint256 bntAmountToDistribute) external view returns (uint256);\\n\\n    /**\\n     * @dev mints BNT to the recipient\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have the ROLE_BNT_MANAGER role\\n     */\\n    function mint(address recipient, uint256 bntAmount) external;\\n\\n    /**\\n     * @dev burns BNT from the vault\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have the ROLE_VAULT_MANAGER role\\n     */\\n    function burnFromVault(uint256 bntAmount) external;\\n\\n    /**\\n     * @dev deposits BNT liquidity on behalf of a specific provider and returns the respective pool token amount\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the network contract\\n     * - BNT tokens must have been already deposited into the contract\\n     */\\n    function depositFor(\\n        bytes32 contextId,\\n        address provider,\\n        uint256 bntAmount,\\n        bool isMigrating,\\n        uint256 originalVBNTAmount\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev withdraws BNT liquidity on behalf of a specific provider and returns the withdrawn BNT amount\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the network contract\\n     * - bnBNT token must have been already deposited into the contract\\n     * - vBNT token must have been already deposited into the contract\\n     */\\n    function withdraw(\\n        bytes32 contextId,\\n        address provider,\\n        uint256 poolTokenAmount,\\n        uint256 bntAmount\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev returns the withdrawn BNT amount\\n     */\\n    function withdrawalAmount(uint256 poolTokenAmount) external view returns (uint256);\\n\\n    /**\\n     * @dev requests BNT funding\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have the ROLE_FUNDING_MANAGER role\\n     * - the token must have been whitelisted\\n     * - the request amount should be below the funding limit for a given pool\\n     * - the average rate of the pool must not deviate too much from its spot rate\\n     */\\n    function requestFunding(\\n        bytes32 contextId,\\n        Token pool,\\n        uint256 bntAmount\\n    ) external;\\n\\n    /**\\n     * @dev renounces BNT funding\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have the ROLE_FUNDING_MANAGER role\\n     * - the token must have been whitelisted\\n     * - the average rate of the pool must not deviate too much from its spot rate\\n     */\\n    function renounceFunding(\\n        bytes32 contextId,\\n        Token pool,\\n        uint256 bntAmount\\n    ) external;\\n\\n    /**\\n     * @dev notifies the pool of accrued fees\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the network contract\\n     */\\n    function onFeesCollected(\\n        Token pool,\\n        uint256 feeAmount,\\n        bool isTradeFee\\n    ) external;\\n}\\n\",\"keccak256\":\"0xed6a5abb972bdc42e1d32dd4157c0968b5d34d3a6560dcffeb1479ed994fd5a8\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/pools/interfaces/IPoolCollection.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.13;\\n\\nimport { IVersioned } from \\\"../../utility/interfaces/IVersioned.sol\\\";\\nimport { Fraction112 } from \\\"../../utility/FractionLibrary.sol\\\";\\n\\nimport { Token } from \\\"../../token/Token.sol\\\";\\n\\nimport { IPoolToken } from \\\"./IPoolToken.sol\\\";\\n\\nstruct PoolLiquidity {\\n    uint128 bntTradingLiquidity; // the BNT trading liquidity\\n    uint128 baseTokenTradingLiquidity; // the base token trading liquidity\\n    uint256 stakedBalance; // the staked balance\\n}\\n\\nstruct AverageRates {\\n    uint32 blockNumber;\\n    Fraction112 rate;\\n    Fraction112 invRate;\\n}\\n\\nstruct Pool {\\n    IPoolToken poolToken; // the pool token of the pool\\n    uint32 tradingFeePPM; // the trading fee (in units of PPM)\\n    bool tradingEnabled; // whether trading is enabled\\n    bool depositingEnabled; // whether depositing is enabled\\n    AverageRates averageRates; // the recent average rates\\n    PoolLiquidity liquidity; // the overall liquidity in the pool\\n}\\n\\nstruct WithdrawalAmounts {\\n    uint256 totalAmount;\\n    uint256 baseTokenAmount;\\n    uint256 bntAmount;\\n}\\n\\n// trading enabling/disabling reasons\\nuint8 constant TRADING_STATUS_UPDATE_DEFAULT = 0;\\nuint8 constant TRADING_STATUS_UPDATE_ADMIN = 1;\\nuint8 constant TRADING_STATUS_UPDATE_MIN_LIQUIDITY = 2;\\nuint8 constant TRADING_STATUS_UPDATE_INVALID_STATE = 3;\\n\\nstruct TradeAmountAndFee {\\n    uint256 amount; // the source/target amount (depending on the context) resulting from the trade\\n    uint256 tradingFeeAmount; // the trading fee amount\\n    uint256 networkFeeAmount; // the network fee amount (always in units of BNT)\\n}\\n\\n/**\\n * @dev Pool Collection interface\\n */\\ninterface IPoolCollection is IVersioned {\\n    /**\\n     * @dev returns the type of the pool\\n     */\\n    function poolType() external view returns (uint16);\\n\\n    /**\\n     * @dev returns the default trading fee (in units of PPM)\\n     */\\n    function defaultTradingFeePPM() external view returns (uint32);\\n\\n    /**\\n     * @dev returns the network fee (in units of PPM)\\n     */\\n    function networkFeePPM() external view returns (uint32);\\n\\n    /**\\n     * @dev returns all the pools which are managed by this pool collection\\n     */\\n    function pools() external view returns (Token[] memory);\\n\\n    /**\\n     * @dev returns the number of all the pools which are managed by this pool collection\\n     */\\n    function poolCount() external view returns (uint256);\\n\\n    /**\\n     * @dev returns whether a pool is valid\\n     */\\n    function isPoolValid(Token pool) external view returns (bool);\\n\\n    /**\\n     * @dev returns the overall liquidity in the pool\\n     */\\n    function poolLiquidity(Token pool) external view returns (PoolLiquidity memory);\\n\\n    /**\\n     * @dev returns the pool token of the pool\\n     */\\n    function poolToken(Token pool) external view returns (IPoolToken);\\n\\n    /**\\n     * @dev returns the trading fee (in units of PPM)\\n     */\\n    function tradingFeePPM(Token pool) external view returns (uint32);\\n\\n    /**\\n     * @dev returns whether trading is enabled\\n     */\\n    function tradingEnabled(Token pool) external view returns (bool);\\n\\n    /**\\n     * @dev returns whether depositing is enabled\\n     */\\n    function depositingEnabled(Token pool) external view returns (bool);\\n\\n    /**\\n     * @dev returns whether the pool is stable\\n     */\\n    function isPoolStable(Token pool) external view returns (bool);\\n\\n    /**\\n     * @dev converts the specified pool token amount to the underlying base token amount\\n     */\\n    function poolTokenToUnderlying(Token pool, uint256 poolTokenAmount) external view returns (uint256);\\n\\n    /**\\n     * @dev converts the specified underlying base token amount to pool token amount\\n     */\\n    function underlyingToPoolToken(Token pool, uint256 baseTokenAmount) external view returns (uint256);\\n\\n    /**\\n     * @dev returns the number of pool token to burn in order to increase everyone's underlying value by the specified\\n     * amount\\n     */\\n    function poolTokenAmountToBurn(\\n        Token pool,\\n        uint256 baseTokenAmountToDistribute,\\n        uint256 protocolPoolTokenAmount\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev creates a new pool\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the network contract\\n     * - the pool should have been whitelisted\\n     * - the pool isn't already defined in the collection\\n     */\\n    function createPool(Token token) external;\\n\\n    /**\\n     * @dev deposits base token liquidity on behalf of a specific provider and returns the respective pool token amount\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the network contract\\n     * - assumes that the base token has been already deposited in the vault\\n     */\\n    function depositFor(\\n        bytes32 contextId,\\n        address provider,\\n        Token pool,\\n        uint256 baseTokenAmount\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev handles some of the withdrawal-related actions and returns the withdrawn base token amount\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the network contract\\n     * - the caller must have approved the collection to transfer/burn the pool token amount on its behalf\\n     */\\n    function withdraw(\\n        bytes32 contextId,\\n        address provider,\\n        Token pool,\\n        uint256 poolTokenAmount,\\n        uint256 baseTokenAmount\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev returns the amounts that would be returned if the position is currently withdrawn,\\n     * along with the breakdown of the base token and the BNT compensation\\n     */\\n    function withdrawalAmounts(Token pool, uint256 poolTokenAmount) external view returns (WithdrawalAmounts memory);\\n\\n    /**\\n     * @dev performs a trade by providing the source amount and returns the target amount and the associated fee\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the network contract\\n     */\\n    function tradeBySourceAmount(\\n        bytes32 contextId,\\n        Token sourceToken,\\n        Token targetToken,\\n        uint256 sourceAmount,\\n        uint256 minReturnAmount\\n    ) external returns (TradeAmountAndFee memory);\\n\\n    /**\\n     * @dev performs a trade by providing the target amount and returns the required source amount and the associated fee\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the network contract\\n     */\\n    function tradeByTargetAmount(\\n        bytes32 contextId,\\n        Token sourceToken,\\n        Token targetToken,\\n        uint256 targetAmount,\\n        uint256 maxSourceAmount\\n    ) external returns (TradeAmountAndFee memory);\\n\\n    /**\\n     * @dev returns the output amount and fee when trading by providing the source amount\\n     */\\n    function tradeOutputAndFeeBySourceAmount(\\n        Token sourceToken,\\n        Token targetToken,\\n        uint256 sourceAmount\\n    ) external view returns (TradeAmountAndFee memory);\\n\\n    /**\\n     * @dev returns the input amount and fee when trading by providing the target amount\\n     */\\n    function tradeInputAndFeeByTargetAmount(\\n        Token sourceToken,\\n        Token targetToken,\\n        uint256 targetAmount\\n    ) external view returns (TradeAmountAndFee memory);\\n\\n    /**\\n     * @dev notifies the pool of accrued fees\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the network contract\\n     */\\n    function onFeesCollected(Token pool, uint256 feeAmount) external;\\n\\n    /**\\n     * @dev migrates a pool to this pool collection\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the pool migrator contract\\n     */\\n    function migratePoolIn(Token pool, Pool calldata data) external;\\n\\n    /**\\n     * @dev migrates a pool from this pool collection\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the pool migrator contract\\n     */\\n    function migratePoolOut(Token pool, IPoolCollection targetPoolCollection) external;\\n}\\n\",\"keccak256\":\"0x87e62102f480bdbbcd4ba96eab0d2757eff0a68c43526706242e4495c2af73bf\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/pools/interfaces/IPoolToken.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.13;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IERC20Permit } from \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\n\\nimport { IERC20Burnable } from \\\"../../token/interfaces/IERC20Burnable.sol\\\";\\nimport { Token } from \\\"../../token/Token.sol\\\";\\n\\nimport { IVersioned } from \\\"../../utility/interfaces/IVersioned.sol\\\";\\nimport { IOwned } from \\\"../../utility/interfaces/IOwned.sol\\\";\\n\\n/**\\n * @dev Pool Token interface\\n */\\ninterface IPoolToken is IVersioned, IOwned, IERC20, IERC20Permit, IERC20Burnable {\\n    /**\\n     * @dev returns the address of the reserve token\\n     */\\n    function reserveToken() external view returns (Token);\\n\\n    /**\\n     * @dev increases the token supply and sends the new tokens to the given account\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the owner of the contract\\n     */\\n    function mint(address recipient, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x698423b0fc59424e60d5effe3b79b8aeb5d478b04e5569e3a4ba5fe6936fb2b7\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/rewards/AutoCompoundingRewards.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.13;\\n\\nimport { EnumerableSetUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport { ReentrancyGuardUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport { IVersioned } from \\\"../utility/interfaces/IVersioned.sol\\\";\\nimport { PPM_RESOLUTION } from \\\"../utility/Constants.sol\\\";\\nimport { Upgradeable } from \\\"../utility/Upgradeable.sol\\\";\\nimport { Utils, DoesNotExist, AlreadyExists, InvalidParam } from \\\"../utility/Utils.sol\\\";\\nimport { Time } from \\\"../utility/Time.sol\\\";\\n\\nimport { INetworkSettings, NotWhitelisted } from \\\"../network/interfaces/INetworkSettings.sol\\\";\\nimport { IBancorNetwork } from \\\"../network/interfaces/IBancorNetwork.sol\\\";\\n\\nimport { IPoolToken } from \\\"../pools/interfaces/IPoolToken.sol\\\";\\nimport { IBNTPool } from \\\"../pools/interfaces/IBNTPool.sol\\\";\\n\\nimport { Token } from \\\"../token/Token.sol\\\";\\nimport { TokenLibrary } from \\\"../token/TokenLibrary.sol\\\";\\n\\nimport { IVault } from \\\"../vaults/interfaces/IVault.sol\\\";\\nimport { IExternalRewardsVault } from \\\"../vaults/interfaces/IExternalRewardsVault.sol\\\";\\n\\n// prettier-ignore\\nimport {\\n    IAutoCompoundingRewards,\\n    ProgramData,\\n    FLAT_DISTRIBUTION,\\n    EXP_DECAY_DISTRIBUTION\\n} from \\\"./interfaces/IAutoCompoundingRewards.sol\\\";\\n\\nimport { RewardsMath } from \\\"./RewardsMath.sol\\\";\\n\\n/**\\n * @dev Auto-compounding Rewards contract\\n */\\ncontract AutoCompoundingRewards is IAutoCompoundingRewards, ReentrancyGuardUpgradeable, Utils, Time, Upgradeable {\\n    using TokenLibrary for Token;\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    error InsufficientFunds();\\n\\n    // the default number of programs to auto-process the rewards for\\n    uint8 private constant DEFAULT_AUTO_PROCESS_REWARDS_COUNT = 3;\\n\\n    // the minimum time elapsed before the rewards of a program can be auto-processed\\n    uint16 private constant AUTO_PROCESS_REWARDS_MIN_TIME_DELTA = 1 hours;\\n\\n    // the factor used to calculate the maximum number of programs to attempt to auto-process in a single attempt\\n    uint8 private constant AUTO_PROCESS_MAX_PROGRAMS_FACTOR = 2;\\n\\n    // if a program is attempting to burn a total supply percentage equal or higher to this number,\\n    // the program will terminate\\n    uint32 private constant SUPPLY_BURN_TERMINATION_THRESHOLD_PPM = 500000;\\n\\n    // the network contract\\n    IBancorNetwork private immutable _network;\\n\\n    // the network settings contract\\n    INetworkSettings private immutable _networkSettings;\\n\\n    // the BNT contract\\n    IERC20 private immutable _bnt;\\n\\n    // the BNT pool contract\\n    IBNTPool private immutable _bntPool;\\n\\n    // the BNT pool token contract\\n    IPoolToken private immutable _bntPoolToken;\\n\\n    // the address of the external rewards vault\\n    IExternalRewardsVault private immutable _externalRewardsVault;\\n\\n    // a mapping between pools and programs\\n    mapping(Token => ProgramData) private _programs;\\n\\n    // a set of all pools that have a rewards program associated with them\\n    EnumerableSetUpgradeable.AddressSet private _pools;\\n\\n    // the number of programs to auto-process the rewards for\\n    uint256 private _autoProcessRewardsCount;\\n\\n    // the index of the next program to auto-process the rewards for\\n    uint256 internal _autoProcessRewardsIndex;\\n\\n    // upgrade forward-compatibility storage gap\\n    uint256[MAX_GAP - 5] private __gap;\\n\\n    /**\\n     * @dev triggered when a flat program is created\\n     */\\n    event FlatProgramCreated(Token indexed pool, uint256 totalRewards, uint32 startTime, uint32 endTime);\\n\\n    /**\\n     * @dev triggered when an exponential-decay program is created\\n     */\\n    event ExpDecayProgramCreated(Token indexed pool, uint256 totalRewards, uint32 startTime, uint32 halfLife);\\n\\n    /**\\n     * @dev triggered when a program is terminated prematurely\\n     */\\n    event ProgramTerminated(Token indexed pool, uint32 endTime, uint256 remainingRewards);\\n\\n    /**\\n     * @dev triggered when a program is paused/resumed\\n     */\\n    event ProgramPaused(Token indexed pool, bool paused);\\n\\n    /**\\n     * @dev triggered when the number of programs to auto-process the rewards for is updated\\n     */\\n    event AutoProcessRewardsCountUpdated(uint256 prevCount, uint256 newCount);\\n\\n    /**\\n     * @dev triggered when rewards are distributed\\n     */\\n    event RewardsDistributed(\\n        Token indexed pool,\\n        uint256 rewardsAmount,\\n        uint256 poolTokenAmount,\\n        uint256 remainingRewards\\n    );\\n\\n    /**\\n     * @dev a \\\"virtual\\\" constructor that is only used to set immutable state variables\\n     */\\n    constructor(\\n        IBancorNetwork initNetwork,\\n        INetworkSettings initNetworkSettings,\\n        IERC20 initBNT,\\n        IBNTPool initBNTPool,\\n        IExternalRewardsVault initExternalRewardsVault\\n    )\\n        validAddress(address(initNetwork))\\n        validAddress(address(initNetworkSettings))\\n        validAddress(address(initBNT))\\n        validAddress(address(initBNTPool))\\n        validAddress(address(initExternalRewardsVault))\\n    {\\n        _network = initNetwork;\\n        _networkSettings = initNetworkSettings;\\n        _bnt = initBNT;\\n        _bntPool = initBNTPool;\\n        _bntPoolToken = initBNTPool.poolToken();\\n        _externalRewardsVault = initExternalRewardsVault;\\n    }\\n\\n    /**\\n     * @dev fully initializes the contract and its parents\\n     */\\n    function initialize() external initializer {\\n        __AutoCompoundingRewards_init();\\n    }\\n\\n    // solhint-disable func-name-mixedcase\\n\\n    /**\\n     * @dev initializes the contract and its parents\\n     */\\n    function __AutoCompoundingRewards_init() internal onlyInitializing {\\n        __ReentrancyGuard_init();\\n        __Upgradeable_init();\\n\\n        __AutoCompoundingRewards_init_unchained();\\n    }\\n\\n    /**\\n     * @dev performs contract-specific initialization\\n     */\\n    function __AutoCompoundingRewards_init_unchained() internal onlyInitializing {\\n        _setAutoProcessRewardsCount(DEFAULT_AUTO_PROCESS_REWARDS_COUNT);\\n    }\\n\\n    // solhint-enable func-name-mixedcase\\n\\n    /**\\n     * @inheritdoc Upgradeable\\n     */\\n    function version() public pure override(IVersioned, Upgradeable) returns (uint16) {\\n        return 1;\\n    }\\n\\n    /**\\n     * @inheritdoc IAutoCompoundingRewards\\n     */\\n    function program(Token pool) external view returns (ProgramData memory) {\\n        return _programs[pool];\\n    }\\n\\n    /**\\n     * @inheritdoc IAutoCompoundingRewards\\n     */\\n    function programs() external view returns (ProgramData[] memory) {\\n        uint256 numPrograms = _pools.length();\\n\\n        ProgramData[] memory list = new ProgramData[](numPrograms);\\n        for (uint256 i = 0; i < numPrograms; i++) {\\n            list[i] = _programs[Token(_pools.at(i))];\\n        }\\n\\n        return list;\\n    }\\n\\n    /**\\n     * @inheritdoc IAutoCompoundingRewards\\n     */\\n    function pools() external view returns (address[] memory) {\\n        return _pools.values();\\n    }\\n\\n    /**\\n     * @inheritdoc IAutoCompoundingRewards\\n     */\\n    function autoProcessRewardsCount() external view returns (uint256) {\\n        return _autoProcessRewardsCount;\\n    }\\n\\n    /**\\n     * @dev sets the number of programs to auto-process the rewards for\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the admin of the contract\\n     */\\n    function setAutoProcessRewardsCount(uint256 newCount) external greaterThanZero(newCount) onlyAdmin {\\n        _setAutoProcessRewardsCount(newCount);\\n    }\\n\\n    /**\\n     * @inheritdoc IAutoCompoundingRewards\\n     */\\n    function isProgramActive(Token pool) external view returns (bool) {\\n        ProgramData memory p = _programs[pool];\\n\\n        if (!_programExists(p)) {\\n            return false;\\n        }\\n\\n        uint32 currTime = _time();\\n\\n        if (p.distributionType == EXP_DECAY_DISTRIBUTION) {\\n            return p.startTime <= currTime;\\n        }\\n\\n        return p.startTime <= currTime && currTime <= p.endTime;\\n    }\\n\\n    /**\\n     * @inheritdoc IAutoCompoundingRewards\\n     */\\n    function isProgramPaused(Token pool) external view returns (bool) {\\n        return _programs[pool].isPaused;\\n    }\\n\\n    /**\\n     * @inheritdoc IAutoCompoundingRewards\\n     */\\n    function createFlatProgram(\\n        Token pool,\\n        uint256 totalRewards,\\n        uint32 startTime,\\n        uint32 endTime\\n    ) external validAddress(address(pool)) greaterThanZero(totalRewards) onlyAdmin nonReentrant {\\n        if (startTime >= endTime) {\\n            revert InvalidParam();\\n        }\\n\\n        _createProgram(pool, totalRewards, FLAT_DISTRIBUTION, startTime, endTime, 0);\\n\\n        emit FlatProgramCreated({ pool: pool, totalRewards: totalRewards, startTime: startTime, endTime: endTime });\\n    }\\n\\n    /**\\n     * @inheritdoc IAutoCompoundingRewards\\n     */\\n    function createExpDecayProgram(\\n        Token pool,\\n        uint256 totalRewards,\\n        uint32 startTime,\\n        uint32 halfLife\\n    ) external validAddress(address(pool)) greaterThanZero(totalRewards) onlyAdmin nonReentrant {\\n        if (halfLife == 0) {\\n            revert InvalidParam();\\n        }\\n\\n        _createProgram(pool, totalRewards, EXP_DECAY_DISTRIBUTION, startTime, 0, halfLife);\\n\\n        emit ExpDecayProgramCreated({\\n            pool: pool,\\n            totalRewards: totalRewards,\\n            startTime: startTime,\\n            halfLife: halfLife\\n        });\\n    }\\n\\n    /**\\n     * @inheritdoc IAutoCompoundingRewards\\n     */\\n    function terminateProgram(Token pool) external onlyAdmin nonReentrant {\\n        _terminateProgram(pool);\\n    }\\n\\n    /**\\n     * @inheritdoc IAutoCompoundingRewards\\n     */\\n    function pauseProgram(Token pool, bool pause) external onlyAdmin nonReentrant {\\n        ProgramData memory p = _programs[pool];\\n\\n        if (!_programExists(p)) {\\n            revert DoesNotExist();\\n        }\\n\\n        bool prevStatus = p.isPaused;\\n        if (prevStatus == pause) {\\n            return;\\n        }\\n\\n        _programs[pool].isPaused = pause;\\n\\n        emit ProgramPaused({ pool: pool, paused: pause });\\n    }\\n\\n    /**\\n     * @inheritdoc IAutoCompoundingRewards\\n     */\\n    function autoProcessRewards() external nonReentrant {\\n        uint256 numOfPools = _pools.length();\\n        uint256 index = _autoProcessRewardsIndex;\\n        uint256 count = _autoProcessRewardsCount;\\n        uint256 maxCount = Math.min(count * AUTO_PROCESS_MAX_PROGRAMS_FACTOR, numOfPools);\\n\\n        for (uint256 i = 0; i < maxCount; i++) {\\n            bool completed = _processRewards(Token(_pools.at(index % numOfPools)), true);\\n            index++;\\n            if (completed) {\\n                count--;\\n                if (count == 0) {\\n                    break;\\n                }\\n            }\\n        }\\n\\n        _autoProcessRewardsIndex = index % numOfPools;\\n    }\\n\\n    /**\\n     * @inheritdoc IAutoCompoundingRewards\\n     */\\n    function processRewards(Token pool) external nonReentrant {\\n        _processRewards(pool, false);\\n    }\\n\\n    /**\\n     * @dev sets the number of programs to auto-process the rewards for\\n     */\\n    function _setAutoProcessRewardsCount(uint256 newCount) private {\\n        uint256 prevCount = _autoProcessRewardsCount;\\n        if (prevCount == newCount) {\\n            return;\\n        }\\n\\n        _autoProcessRewardsCount = newCount;\\n\\n        emit AutoProcessRewardsCountUpdated({ prevCount: prevCount, newCount: newCount });\\n    }\\n\\n    /**\\n     * @dev processes the rewards of a given pool and returns true if the rewards processing was completed, and false\\n     * if it was skipped\\n     */\\n    function _processRewards(Token pool, bool skipRecent) private returns (bool) {\\n        ProgramData memory p = _programs[pool];\\n\\n        uint32 currTime = _time();\\n\\n        if (p.isPaused || currTime < p.startTime) {\\n            return false;\\n        }\\n\\n        if (skipRecent && currTime < p.prevDistributionTimestamp + AUTO_PROCESS_REWARDS_MIN_TIME_DELTA) {\\n            return false;\\n        }\\n\\n        uint256 tokenAmountToDistribute = _tokenAmountToDistribute(p, currTime);\\n        if (tokenAmountToDistribute == 0) {\\n            return true;\\n        }\\n\\n        uint256 poolTokenAmountToBurn = _poolTokenAmountToBurn(pool, p, tokenAmountToDistribute);\\n        if (poolTokenAmountToBurn == 0) {\\n            return true;\\n        }\\n\\n        // sanity check, if the amount to burn is equal or higher than the termination percentage\\n        // threshold, terminate the program\\n        if (\\n            poolTokenAmountToBurn * PPM_RESOLUTION >= p.poolToken.totalSupply() * SUPPLY_BURN_TERMINATION_THRESHOLD_PPM\\n        ) {\\n            _terminateProgram(pool);\\n            return false;\\n        }\\n\\n        IVault rewardsVault = _rewardsVault(pool);\\n        _verifyFunds(poolTokenAmountToBurn, p.poolToken, rewardsVault);\\n        rewardsVault.burn(Token(address(p.poolToken)), poolTokenAmountToBurn);\\n\\n        p.remainingRewards -= tokenAmountToDistribute;\\n        p.prevDistributionTimestamp = currTime;\\n\\n        _programs[pool] = p;\\n\\n        emit RewardsDistributed({\\n            pool: pool,\\n            rewardsAmount: tokenAmountToDistribute,\\n            poolTokenAmount: poolTokenAmountToBurn,\\n            remainingRewards: p.remainingRewards\\n        });\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev creates a rewards program for a given pool\\n     */\\n    function _createProgram(\\n        Token pool,\\n        uint256 totalRewards,\\n        uint8 distributionType,\\n        uint32 startTime,\\n        uint32 endTime,\\n        uint32 halfLife\\n    ) private {\\n        if (_programExists(_programs[pool])) {\\n            revert AlreadyExists();\\n        }\\n\\n        IPoolToken poolToken;\\n        if (pool.isEqual(_bnt)) {\\n            poolToken = _bntPoolToken;\\n        } else {\\n            if (!_networkSettings.isTokenWhitelisted(pool)) {\\n                revert NotWhitelisted();\\n            }\\n\\n            poolToken = _network.collectionByPool(pool).poolToken(pool);\\n        }\\n\\n        if (startTime < _time()) {\\n            revert InvalidParam();\\n        }\\n\\n        ProgramData memory p = ProgramData({\\n            startTime: startTime,\\n            endTime: endTime,\\n            halfLife: halfLife,\\n            prevDistributionTimestamp: 0,\\n            poolToken: poolToken,\\n            isPaused: false,\\n            distributionType: distributionType,\\n            totalRewards: totalRewards,\\n            remainingRewards: totalRewards\\n        });\\n\\n        _verifyFunds(_poolTokenAmountToBurn(pool, p, totalRewards), poolToken, _rewardsVault(pool));\\n\\n        _programs[pool] = p;\\n\\n        assert(_pools.add(address(pool)));\\n    }\\n\\n    /**\\n     * @dev terminates a rewards program\\n     */\\n    function _terminateProgram(Token pool) private {\\n        ProgramData memory p = _programs[pool];\\n\\n        if (!_programExists(p)) {\\n            revert DoesNotExist();\\n        }\\n\\n        delete _programs[pool];\\n\\n        assert(_pools.remove(address(pool)));\\n\\n        emit ProgramTerminated({ pool: pool, endTime: p.endTime, remainingRewards: p.remainingRewards });\\n    }\\n\\n    /**\\n     * @dev returns the amount of tokens to distribute\\n     */\\n    function _tokenAmountToDistribute(ProgramData memory p, uint32 currTime) private pure returns (uint256) {\\n        uint32 prevTime = uint32(Math.max(p.prevDistributionTimestamp, p.startTime));\\n\\n        if (p.distributionType == FLAT_DISTRIBUTION) {\\n            uint32 currTimeElapsed = uint32(Math.min(currTime, p.endTime)) - p.startTime;\\n            uint32 prevTimeElapsed = uint32(Math.min(prevTime, p.endTime)) - p.startTime;\\n            return\\n                RewardsMath.calcFlatRewards(p.totalRewards, currTimeElapsed - prevTimeElapsed, p.endTime - p.startTime);\\n        } else {\\n            uint32 currTimeElapsed = currTime - p.startTime;\\n            uint32 prevTimeElapsed = prevTime - p.startTime;\\n            return\\n                RewardsMath.calcExpDecayRewards(p.totalRewards, currTimeElapsed, p.halfLife) -\\n                RewardsMath.calcExpDecayRewards(p.totalRewards, prevTimeElapsed, p.halfLife);\\n        }\\n    }\\n\\n    /**\\n     * @dev returns the amount of pool tokens to burn\\n     */\\n    function _poolTokenAmountToBurn(\\n        Token pool,\\n        ProgramData memory p,\\n        uint256 tokenAmountToDistribute\\n    ) private view returns (uint256) {\\n        if (pool.isEqual(_bnt)) {\\n            return _bntPool.poolTokenAmountToBurn(tokenAmountToDistribute);\\n        }\\n\\n        return\\n            _network.collectionByPool(pool).poolTokenAmountToBurn(\\n                pool,\\n                tokenAmountToDistribute,\\n                p.poolToken.balanceOf(address(_externalRewardsVault))\\n            );\\n    }\\n\\n    /**\\n     * @dev returns whether or not a given program exists\\n     */\\n    function _programExists(ProgramData memory p) private pure returns (bool) {\\n        return address(p.poolToken) != address(0);\\n    }\\n\\n    /**\\n     * @dev returns the rewards vault for a given pool\\n     */\\n    function _rewardsVault(Token pool) private view returns (IVault) {\\n        return pool.isEqual(_bnt) ? IVault(_bntPool) : IVault(_externalRewardsVault);\\n    }\\n\\n    /**\\n     * @dev verifies that the rewards vault holds a sufficient amount of pool tokens\\n     */\\n    function _verifyFunds(\\n        uint256 requiredAmount,\\n        IPoolToken poolToken,\\n        IVault rewardsVault\\n    ) private view {\\n        if (requiredAmount > poolToken.balanceOf(address(rewardsVault))) {\\n            revert InsufficientFunds();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa91a62fc22faa334218bf2e815bf3c5c21a3846379ae666fa6f4f2c61fe27da7\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/rewards/RewardsMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport { Fraction } from \\\"../utility/FractionLibrary.sol\\\";\\nimport { MathEx } from \\\"../utility/MathEx.sol\\\";\\n\\n/**\\n * @dev This library supports the calculation of staking rewards\\n */\\nlibrary RewardsMath {\\n    /**\\n     * @dev returns the amount of rewards distributed on a flat amount ratio\\n     */\\n    function calcFlatRewards(\\n        uint256 totalRewards,\\n        uint32 timeElapsed,\\n        uint32 programDuration\\n    ) internal pure returns (uint256) {\\n        // ensures that the function never returns more than the total rewards\\n        assert(timeElapsed <= programDuration);\\n        return MathEx.mulDivF(totalRewards, timeElapsed, programDuration);\\n    }\\n\\n    /**\\n     * @dev returns the amount of rewards distributed after a given time period since deployment has elapsed\\n     *\\n     * the returned value is calculated as `totalRewards * (1 - 1 / 2 ^ (timeElapsed / halfLife))`\\n     * note that because the exponentiation function is limited to an input of up to (and excluding)\\n     * 16 / ln 2, the input value to this function is limited by `timeElapsed / halfLife < 16 / ln 2`\\n     */\\n    function calcExpDecayRewards(\\n        uint256 totalRewards,\\n        uint32 timeElapsed,\\n        uint32 halfLife\\n    ) internal pure returns (uint256) {\\n        Fraction memory input = Fraction({ n: timeElapsed, d: halfLife });\\n        Fraction memory output = MathEx.exp2(input);\\n        return MathEx.mulDivF(totalRewards, output.n - output.d, output.n);\\n    }\\n}\\n\",\"keccak256\":\"0x5c3cd2cd95fc78ea5119b861b76446947e1f31d58e48c4411a5b6cfe84b870bd\",\"license\":\"MIT\"},\"contracts/rewards/interfaces/IAutoCompoundingRewards.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.13;\\n\\nimport { IUpgradeable } from \\\"../../utility/interfaces/IUpgradeable.sol\\\";\\n\\nimport { IPoolToken } from \\\"../../pools/interfaces/IPoolToken.sol\\\";\\n\\nimport { Token } from \\\"../../token/Token.sol\\\";\\n\\n// distribution types\\nuint8 constant FLAT_DISTRIBUTION = 0;\\nuint8 constant EXP_DECAY_DISTRIBUTION = 1;\\n\\nstruct ProgramData {\\n    uint32 startTime;\\n    uint32 endTime;\\n    uint32 halfLife;\\n    uint32 prevDistributionTimestamp;\\n    IPoolToken poolToken;\\n    bool isPaused;\\n    uint8 distributionType;\\n    uint256 totalRewards;\\n    uint256 remainingRewards;\\n}\\n\\ninterface IAutoCompoundingRewards is IUpgradeable {\\n    /**\\n     * @dev returns the program data of a pool\\n     */\\n    function program(Token pool) external view returns (ProgramData memory);\\n\\n    /**\\n     * @dev returns a list of all pools' program data\\n     */\\n    function programs() external view returns (ProgramData[] memory);\\n\\n    /**\\n     * @dev returns a list of all the pools which have a program associated with them\\n     */\\n    function pools() external view returns (address[] memory);\\n\\n    /**\\n     * @dev returns the number of programs to auto-process the rewards for\\n     */\\n    function autoProcessRewardsCount() external view returns (uint256);\\n\\n    /**\\n     * @dev returns whether a program is currently active\\n     */\\n    function isProgramActive(Token pool) external view returns (bool);\\n\\n    /**\\n     * @dev returns whether the specified program is paused\\n     */\\n    function isProgramPaused(Token pool) external view returns (bool);\\n\\n    /**\\n     * @dev creates a rewards program with flat distribution for a given pool\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the admin of the contract\\n     * - the pool must not have an active program\\n     */\\n    function createFlatProgram(\\n        Token pool,\\n        uint256 totalRewards,\\n        uint32 startTime,\\n        uint32 endTime\\n    ) external;\\n\\n    /**\\n     * @dev creates a rewards program with exponential-decay distribution for a given pool\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the admin of the contract\\n     * - the pool must not have an active program\\n     */\\n    function createExpDecayProgram(\\n        Token pool,\\n        uint256 totalRewards,\\n        uint32 startTime,\\n        uint32 halfLife\\n    ) external;\\n\\n    /**\\n     * @dev terminates a rewards program\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the admin of the contract\\n     * - the program must be active\\n     */\\n    function terminateProgram(Token pool) external;\\n\\n    /**\\n     * @dev pauses or resumes a program\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the admin of the contract\\n     */\\n    function pauseProgram(Token pool, bool pause) external;\\n\\n    /**\\n     * @dev processes program rewards based on internal logic, without requiring any input\\n     */\\n    function autoProcessRewards() external;\\n\\n    /**\\n     * @dev processes program rewards\\n     */\\n    function processRewards(Token pool) external;\\n}\\n\",\"keccak256\":\"0xf9e5d99d68876ad25b3dbc1020d903b77767fa6c5f46882af7f436fefc837fd3\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/token/SafeERC20Ex.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.13;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n * @dev extends the SafeERC20 library with additional operations\\n */\\nlibrary SafeERC20Ex {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @dev ensures that the spender has sufficient allowance\\n     */\\n    function ensureApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        if (amount == 0) {\\n            return;\\n        }\\n\\n        uint256 allowance = token.allowance(address(this), spender);\\n        if (allowance >= amount) {\\n            return;\\n        }\\n\\n        if (allowance > 0) {\\n            token.safeApprove(spender, 0);\\n        }\\n        token.safeApprove(spender, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x95b96153e9cb88df354da4731b3b856158cf6794abdfaf635455e853044f7f98\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/token/Token.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.13;\\n\\n/**\\n * @dev the main purpose of the Token interfaces is to ensure artificially that we won't use ERC20's standard functions,\\n * but only their safe versions, which are provided by SafeERC20 and SafeERC20Ex via the TokenLibrary contract\\n */\\ninterface Token {\\n\\n}\\n\",\"keccak256\":\"0x49d0e5ac0dab272f4001a63e7f4117eb13b42c655ee788c42a333f56f19ac2e9\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/token/TokenLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.13;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IERC20Permit } from \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\n\\nimport { SafeERC20Ex } from \\\"./SafeERC20Ex.sol\\\";\\n\\nimport { Token } from \\\"./Token.sol\\\";\\n\\n/**\\n * @dev This library implements ERC20 and SafeERC20 utilities for both the native token and for ERC20 tokens\\n */\\nlibrary TokenLibrary {\\n    using SafeERC20 for IERC20;\\n    using SafeERC20Ex for IERC20;\\n\\n    error PermitUnsupported();\\n\\n    // the address that represents the native token reserve\\n    address private constant NATIVE_TOKEN_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    // the symbol that represents the native token\\n    string private constant NATIVE_TOKEN_SYMBOL = \\\"ETH\\\";\\n\\n    // the decimals for the native token\\n    uint8 private constant NATIVE_TOKEN_DECIMALS = 18;\\n\\n    // the token representing the native token\\n    Token public constant NATIVE_TOKEN = Token(NATIVE_TOKEN_ADDRESS);\\n\\n    /**\\n     * @dev returns whether the provided token represents an ERC20 or the native token reserve\\n     */\\n    function isNative(Token token) internal pure returns (bool) {\\n        return address(token) == NATIVE_TOKEN_ADDRESS;\\n    }\\n\\n    /**\\n     * @dev returns the symbol of the native token/ERC20 token\\n     */\\n    function symbol(Token token) internal view returns (string memory) {\\n        if (isNative(token)) {\\n            return NATIVE_TOKEN_SYMBOL;\\n        }\\n\\n        return toERC20(token).symbol();\\n    }\\n\\n    /**\\n     * @dev returns the decimals of the native token/ERC20 token\\n     */\\n    function decimals(Token token) internal view returns (uint8) {\\n        if (isNative(token)) {\\n            return NATIVE_TOKEN_DECIMALS;\\n        }\\n\\n        return toERC20(token).decimals();\\n    }\\n\\n    /**\\n     * @dev returns the balance of the native token/ERC20 token\\n     */\\n    function balanceOf(Token token, address account) internal view returns (uint256) {\\n        if (isNative(token)) {\\n            return account.balance;\\n        }\\n\\n        return toIERC20(token).balanceOf(account);\\n    }\\n\\n    /**\\n     * @dev transfers a specific amount of the native token/ERC20 token\\n     */\\n    function safeTransfer(\\n        Token token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        if (amount == 0) {\\n            return;\\n        }\\n\\n        if (isNative(token)) {\\n            payable(to).transfer(amount);\\n        } else {\\n            toIERC20(token).safeTransfer(to, amount);\\n        }\\n    }\\n\\n    /**\\n     * @dev transfers a specific amount of the native token/ERC20 token from a specific holder using the allowance mechanism\\n     *\\n     * note that the function does not perform any action if the native token is provided\\n     */\\n    function safeTransferFrom(\\n        Token token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        if (amount == 0 || isNative(token)) {\\n            return;\\n        }\\n\\n        toIERC20(token).safeTransferFrom(from, to, amount);\\n    }\\n\\n    /**\\n     * @dev approves a specific amount of the native token/ERC20 token from a specific holder\\n     *\\n     * note that the function does not perform any action if the native token is provided\\n     */\\n    function safeApprove(\\n        Token token,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        if (isNative(token)) {\\n            return;\\n        }\\n\\n        toIERC20(token).safeApprove(spender, amount);\\n    }\\n\\n    /**\\n     * @dev ensures that the spender has sufficient allowance\\n     *\\n     * note that the function does not perform any action if the native token is provided\\n     */\\n    function ensureApprove(\\n        Token token,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        if (isNative(token)) {\\n            return;\\n        }\\n\\n        toIERC20(token).ensureApprove(spender, amount);\\n    }\\n\\n    /**\\n     * @dev compares between a token and another raw ERC20 token\\n     */\\n    function isEqual(Token token, IERC20 erc20Token) internal pure returns (bool) {\\n        return toIERC20(token) == erc20Token;\\n    }\\n\\n    /**\\n     * @dev utility function that converts a token to an IERC20\\n     */\\n    function toIERC20(Token token) internal pure returns (IERC20) {\\n        return IERC20(address(token));\\n    }\\n\\n    /**\\n     * @dev utility function that converts a token to an ERC20\\n     */\\n    function toERC20(Token token) internal pure returns (ERC20) {\\n        return ERC20(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x448f8af78045f8ad40977aa58c1bbdd0b89039931e4375702d12b054098b2a30\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/token/interfaces/IERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.13;\\n\\n/**\\n * @dev burnable ERC20 interface\\n */\\ninterface IERC20Burnable {\\n    /**\\n     * @dev Destroys tokens from the caller.\\n     */\\n    function burn(uint256 amount) external;\\n\\n    /**\\n     * @dev Destroys tokens from a recipient, deducting from the caller's allowance\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have allowance for recipient's tokens of at least the specified amount\\n     */\\n    function burnFrom(address recipient, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x222a3ba8286edf54d3e75a70683ffcbe6eb3c5ba5f6b3c6a6d98a716e9bd5332\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/utility/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.13;\\n\\nuint32 constant PPM_RESOLUTION = 1_000_000;\\n\",\"keccak256\":\"0x5215535db0a4e580cd19380cc1cf3a2b7edcbb8ee039e416319fe9f8867724ad\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/utility/Fraction.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.13;\\n\\nstruct Fraction {\\n    uint256 n;\\n    uint256 d;\\n}\\n\\nstruct Fraction112 {\\n    uint112 n;\\n    uint112 d;\\n}\\n\\nerror InvalidFraction();\\n\",\"keccak256\":\"0xb965a448e314353c82bc9fb7c0552057427a90100ebda4450b21fc932356a4d1\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/utility/FractionLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.13;\\n\\nimport { Fraction, Fraction112, InvalidFraction } from \\\"./Fraction.sol\\\";\\nimport { MathEx } from \\\"./MathEx.sol\\\";\\n\\n// solhint-disable-next-line func-visibility\\nfunction zeroFraction() pure returns (Fraction memory) {\\n    return Fraction({ n: 0, d: 1 });\\n}\\n\\n// solhint-disable-next-line func-visibility\\nfunction zeroFraction112() pure returns (Fraction112 memory) {\\n    return Fraction112({ n: 0, d: 1 });\\n}\\n\\n/**\\n * @dev this library provides a set of fraction operations\\n */\\nlibrary FractionLibrary {\\n    /**\\n     * @dev returns whether a standard fraction is valid\\n     */\\n    function isValid(Fraction memory fraction) internal pure returns (bool) {\\n        return fraction.d != 0;\\n    }\\n\\n    /**\\n     * @dev returns whether a 112-bit fraction is valid\\n     */\\n    function isValid(Fraction112 memory fraction) internal pure returns (bool) {\\n        return fraction.d != 0;\\n    }\\n\\n    /**\\n     * @dev returns whether a standard fraction is positive\\n     */\\n    function isPositive(Fraction memory fraction) internal pure returns (bool) {\\n        return isValid(fraction) && fraction.n != 0;\\n    }\\n\\n    /**\\n     * @dev returns whether a 112-bit fraction is positive\\n     */\\n    function isPositive(Fraction112 memory fraction) internal pure returns (bool) {\\n        return isValid(fraction) && fraction.n != 0;\\n    }\\n\\n    /**\\n     * @dev returns the inverse of a given fraction\\n     */\\n    function inverse(Fraction memory fraction) internal pure returns (Fraction memory) {\\n        Fraction memory invFraction = Fraction({ n: fraction.d, d: fraction.n });\\n\\n        if (!isValid(invFraction)) {\\n            revert InvalidFraction();\\n        }\\n\\n        return invFraction;\\n    }\\n\\n    /**\\n     * @dev returns the inverse of a given fraction\\n     */\\n    function inverse(Fraction112 memory fraction) internal pure returns (Fraction112 memory) {\\n        Fraction112 memory invFraction = Fraction112({ n: fraction.d, d: fraction.n });\\n\\n        if (!isValid(invFraction)) {\\n            revert InvalidFraction();\\n        }\\n\\n        return invFraction;\\n    }\\n\\n    /**\\n     * @dev reduces a standard fraction to a 112-bit fraction\\n     */\\n    function toFraction112(Fraction memory fraction) internal pure returns (Fraction112 memory) {\\n        Fraction memory truncatedFraction = MathEx.truncatedFraction(fraction, type(uint112).max);\\n\\n        return Fraction112({ n: uint112(truncatedFraction.n), d: uint112(truncatedFraction.d) });\\n    }\\n\\n    /**\\n     * @dev expands a 112-bit fraction to a standard fraction\\n     */\\n    function fromFraction112(Fraction112 memory fraction) internal pure returns (Fraction memory) {\\n        return Fraction({ n: fraction.n, d: fraction.d });\\n    }\\n}\\n\",\"keccak256\":\"0x480325242afb487705c5e7fafb3a1268ec1ac118ca99c7a52da3577e16a53606\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/utility/MathEx.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.13;\\n\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport { Fraction, InvalidFraction } from \\\"./Fraction.sol\\\";\\n\\nimport { PPM_RESOLUTION } from \\\"./Constants.sol\\\";\\n\\nuint256 constant ONE = 0x80000000000000000000000000000000;\\nuint256 constant LN2 = 0x58b90bfbe8e7bcd5e4f1d9cc01f97b57;\\n\\nstruct Uint512 {\\n    uint256 hi; // 256 most significant bits\\n    uint256 lo; // 256 least significant bits\\n}\\n\\nstruct Sint256 {\\n    uint256 value;\\n    bool isNeg;\\n}\\n\\n/**\\n * @dev this library provides a set of complex math operations\\n */\\nlibrary MathEx {\\n    error Overflow();\\n\\n    /**\\n     * @dev returns `2 ^ f` by calculating `e ^ (f * ln(2))`, where `e` is Euler's number:\\n     * - Rewrite the input as a sum of binary exponents and a single residual r, as small as possible\\n     * - The exponentiation of each binary exponent is given (pre-calculated)\\n     * - The exponentiation of r is calculated via Taylor series for e^x, where x = r\\n     * - The exponentiation of the input is calculated by multiplying the intermediate results above\\n     * - For example: e^5.521692859 = e^(4 + 1 + 0.5 + 0.021692859) = e^4 * e^1 * e^0.5 * e^0.021692859\\n     */\\n    function exp2(Fraction memory f) internal pure returns (Fraction memory) {\\n        uint256 x = MathEx.mulDivF(LN2, f.n, f.d);\\n        uint256 y;\\n        uint256 z;\\n        uint256 n;\\n\\n        if (x >= (ONE << 4)) {\\n            revert Overflow();\\n        }\\n\\n        unchecked {\\n            z = y = x % (ONE >> 3); // get the input modulo 2^(-3)\\n            z = (z * y) / ONE;\\n            n += z * 0x10e1b3be415a0000; // add y^02 * (20! / 02!)\\n            z = (z * y) / ONE;\\n            n += z * 0x05a0913f6b1e0000; // add y^03 * (20! / 03!)\\n            z = (z * y) / ONE;\\n            n += z * 0x0168244fdac78000; // add y^04 * (20! / 04!)\\n            z = (z * y) / ONE;\\n            n += z * 0x004807432bc18000; // add y^05 * (20! / 05!)\\n            z = (z * y) / ONE;\\n            n += z * 0x000c0135dca04000; // add y^06 * (20! / 06!)\\n            z = (z * y) / ONE;\\n            n += z * 0x0001b707b1cdc000; // add y^07 * (20! / 07!)\\n            z = (z * y) / ONE;\\n            n += z * 0x000036e0f639b800; // add y^08 * (20! / 08!)\\n            z = (z * y) / ONE;\\n            n += z * 0x00000618fee9f800; // add y^09 * (20! / 09!)\\n            z = (z * y) / ONE;\\n            n += z * 0x0000009c197dcc00; // add y^10 * (20! / 10!)\\n            z = (z * y) / ONE;\\n            n += z * 0x0000000e30dce400; // add y^11 * (20! / 11!)\\n            z = (z * y) / ONE;\\n            n += z * 0x000000012ebd1300; // add y^12 * (20! / 12!)\\n            z = (z * y) / ONE;\\n            n += z * 0x0000000017499f00; // add y^13 * (20! / 13!)\\n            z = (z * y) / ONE;\\n            n += z * 0x0000000001a9d480; // add y^14 * (20! / 14!)\\n            z = (z * y) / ONE;\\n            n += z * 0x00000000001c6380; // add y^15 * (20! / 15!)\\n            z = (z * y) / ONE;\\n            n += z * 0x000000000001c638; // add y^16 * (20! / 16!)\\n            z = (z * y) / ONE;\\n            n += z * 0x0000000000001ab8; // add y^17 * (20! / 17!)\\n            z = (z * y) / ONE;\\n            n += z * 0x000000000000017c; // add y^18 * (20! / 18!)\\n            z = (z * y) / ONE;\\n            n += z * 0x0000000000000014; // add y^19 * (20! / 19!)\\n            z = (z * y) / ONE;\\n            n += z * 0x0000000000000001; // add y^20 * (20! / 20!)\\n            n = n / 0x21c3677c82b40000 + y + ONE; // divide by 20! and then add y^1 / 1! + y^0 / 0!\\n\\n            if ((x & (ONE >> 3)) != 0)\\n                n = (n * 0x1c3d6a24ed82218787d624d3e5eba95f9) / 0x18ebef9eac820ae8682b9793ac6d1e776; // multiply by e^(2^-3)\\n            if ((x & (ONE >> 2)) != 0)\\n                n = (n * 0x18ebef9eac820ae8682b9793ac6d1e778) / 0x1368b2fc6f9609fe7aceb46aa619baed4; // multiply by e^(2^-2)\\n            if ((x & (ONE >> 1)) != 0)\\n                n = (n * 0x1368b2fc6f9609fe7aceb46aa619baed5) / 0x0bc5ab1b16779be3575bd8f0520a9f21f; // multiply by e^(2^-1)\\n            if ((x & (ONE << 0)) != 0)\\n                n = (n * 0x0bc5ab1b16779be3575bd8f0520a9f21e) / 0x0454aaa8efe072e7f6ddbab84b40a55c9; // multiply by e^(2^+0)\\n            if ((x & (ONE << 1)) != 0)\\n                n = (n * 0x0454aaa8efe072e7f6ddbab84b40a55c5) / 0x00960aadc109e7a3bf4578099615711ea; // multiply by e^(2^+1)\\n            if ((x & (ONE << 2)) != 0)\\n                n = (n * 0x00960aadc109e7a3bf4578099615711d7) / 0x0002bf84208204f5977f9a8cf01fdce3d; // multiply by e^(2^+2)\\n            if ((x & (ONE << 3)) != 0)\\n                n = (n * 0x0002bf84208204f5977f9a8cf01fdc307) / 0x0000003c6ab775dd0b95b4cbee7e65d11; // multiply by e^(2^+3)\\n        }\\n\\n        return Fraction({ n: n, d: ONE });\\n    }\\n\\n    /**\\n     * @dev returns a fraction with truncated components\\n     * note that since the input value is truncated, the use of the method incurs precision loss\\n     */\\n    function truncatedFraction(Fraction memory fraction, uint256 max) internal pure returns (Fraction memory) {\\n        uint256 scale = Math.ceilDiv(Math.max(fraction.n, fraction.d), max);\\n        Fraction memory truncated = Fraction({ n: fraction.n / scale, d: fraction.d / scale });\\n        if (truncated.d == 0) {\\n            revert InvalidFraction();\\n        }\\n\\n        return truncated;\\n    }\\n\\n    /**\\n     * @dev returns the weighted average of two fractions\\n     */\\n    function weightedAverage(\\n        Fraction memory fraction1,\\n        Fraction memory fraction2,\\n        uint256 weight1,\\n        uint256 weight2\\n    ) internal pure returns (Fraction memory) {\\n        return\\n            Fraction({\\n                n: fraction1.n * fraction2.d * weight1 + fraction1.d * fraction2.n * weight2,\\n                d: fraction1.d * fraction2.d * (weight1 + weight2)\\n            });\\n    }\\n\\n    /**\\n     * @dev returns whether or not the deviation of an offset sample from a base sample is within a permitted range\\n     * for example, if the maximum permitted deviation is 5%, then evaluate `95% * base <= offset <= 105% * base`\\n     */\\n    function isInRange(\\n        Fraction memory baseSample,\\n        Fraction memory offsetSample,\\n        uint32 maxDeviationPPM\\n    ) internal pure returns (bool) {\\n        Uint512 memory min = mul512(baseSample.n, offsetSample.d * (PPM_RESOLUTION - maxDeviationPPM));\\n        Uint512 memory mid = mul512(baseSample.d, offsetSample.n * PPM_RESOLUTION);\\n        Uint512 memory max = mul512(baseSample.n, offsetSample.d * (PPM_RESOLUTION + maxDeviationPPM));\\n        return lte512(min, mid) && lte512(mid, max);\\n    }\\n\\n    /**\\n     * @dev returns an `Sint256` positive representation of an unsigned integer\\n     */\\n    function toPos256(uint256 n) internal pure returns (Sint256 memory) {\\n        return Sint256({ value: n, isNeg: false });\\n    }\\n\\n    /**\\n     * @dev returns an `Sint256` negative representation of an unsigned integer\\n     */\\n    function toNeg256(uint256 n) internal pure returns (Sint256 memory) {\\n        return Sint256({ value: n, isNeg: true });\\n    }\\n\\n    /**\\n     * @dev returns the largest integer smaller than or equal to `x * y / z`\\n     */\\n    function mulDivF(\\n        uint256 x,\\n        uint256 y,\\n        uint256 z\\n    ) internal pure returns (uint256) {\\n        Uint512 memory xy = mul512(x, y);\\n\\n        // if `x * y < 2 ^ 256`\\n        if (xy.hi == 0) {\\n            return xy.lo / z;\\n        }\\n\\n        // assert `x * y / z < 2 ^ 256`\\n        if (xy.hi >= z) {\\n            revert Overflow();\\n        }\\n\\n        uint256 m = _mulMod(x, y, z); // `m = x * y % z`\\n        Uint512 memory n = _sub512(xy, m); // `n = x * y - m` hence `n / z = floor(x * y / z)`\\n\\n        // if `n < 2 ^ 256`\\n        if (n.hi == 0) {\\n            return n.lo / z;\\n        }\\n\\n        uint256 p = _unsafeSub(0, z) & z; // `p` is the largest power of 2 which `z` is divisible by\\n        uint256 q = _div512(n, p); // `n` is divisible by `p` because `n` is divisible by `z` and `z` is divisible by `p`\\n        uint256 r = _inv256(z / p); // `z / p = 1 mod 2` hence `inverse(z / p) = 1 mod 2 ^ 256`\\n        return _unsafeMul(q, r); // `q * r = (n / p) * inverse(z / p) = n / z`\\n    }\\n\\n    /**\\n     * @dev returns the smallest integer larger than or equal to `x * y / z`\\n     */\\n    function mulDivC(\\n        uint256 x,\\n        uint256 y,\\n        uint256 z\\n    ) internal pure returns (uint256) {\\n        uint256 w = mulDivF(x, y, z);\\n        if (_mulMod(x, y, z) > 0) {\\n            if (w >= type(uint256).max) {\\n                revert Overflow();\\n            }\\n\\n            return w + 1;\\n        }\\n        return w;\\n    }\\n\\n    /**\\n     * @dev returns the maximum of `n1 - n2` and 0\\n     */\\n    function subMax0(uint256 n1, uint256 n2) internal pure returns (uint256) {\\n        return n1 > n2 ? n1 - n2 : 0;\\n    }\\n\\n    /**\\n     * @dev returns the value of `x > y`\\n     */\\n    function gt512(Uint512 memory x, Uint512 memory y) internal pure returns (bool) {\\n        return x.hi > y.hi || (x.hi == y.hi && x.lo > y.lo);\\n    }\\n\\n    /**\\n     * @dev returns the value of `x < y`\\n     */\\n    function lt512(Uint512 memory x, Uint512 memory y) internal pure returns (bool) {\\n        return x.hi < y.hi || (x.hi == y.hi && x.lo < y.lo);\\n    }\\n\\n    /**\\n     * @dev returns the value of `x >= y`\\n     */\\n    function gte512(Uint512 memory x, Uint512 memory y) internal pure returns (bool) {\\n        return !lt512(x, y);\\n    }\\n\\n    /**\\n     * @dev returns the value of `x <= y`\\n     */\\n    function lte512(Uint512 memory x, Uint512 memory y) internal pure returns (bool) {\\n        return !gt512(x, y);\\n    }\\n\\n    /**\\n     * @dev returns the value of `x * y`\\n     */\\n    function mul512(uint256 x, uint256 y) internal pure returns (Uint512 memory) {\\n        uint256 p = _mulModMax(x, y);\\n        uint256 q = _unsafeMul(x, y);\\n        if (p >= q) {\\n            return Uint512({ hi: p - q, lo: q });\\n        }\\n        return Uint512({ hi: _unsafeSub(p, q) - 1, lo: q });\\n    }\\n\\n    /**\\n     * @dev returns the value of `x - y`, given that `x >= y`\\n     */\\n    function _sub512(Uint512 memory x, uint256 y) private pure returns (Uint512 memory) {\\n        if (x.lo >= y) {\\n            return Uint512({ hi: x.hi, lo: x.lo - y });\\n        }\\n        return Uint512({ hi: x.hi - 1, lo: _unsafeSub(x.lo, y) });\\n    }\\n\\n    /**\\n     * @dev returns the value of `x / pow2n`, given that `x` is divisible by `pow2n`\\n     */\\n    function _div512(Uint512 memory x, uint256 pow2n) private pure returns (uint256) {\\n        uint256 pow2nInv = _unsafeAdd(_unsafeSub(0, pow2n) / pow2n, 1); // `1 << (256 - n)`\\n        return _unsafeMul(x.hi, pow2nInv) | (x.lo / pow2n); // `(x.hi << (256 - n)) | (x.lo >> n)`\\n    }\\n\\n    /**\\n     * @dev returns the inverse of `d` modulo `2 ^ 256`, given that `d` is congruent to `1` modulo `2`\\n     */\\n    function _inv256(uint256 d) private pure returns (uint256) {\\n        // approximate the root of `f(x) = 1 / x - d` using the newton\\u2013raphson convergence method\\n        uint256 x = 1;\\n        for (uint256 i = 0; i < 8; i++) {\\n            x = _unsafeMul(x, _unsafeSub(2, _unsafeMul(x, d))); // `x = x * (2 - x * d) mod 2 ^ 256`\\n        }\\n        return x;\\n    }\\n\\n    /**\\n     * @dev returns `(x + y) % 2 ^ 256`\\n     */\\n    function _unsafeAdd(uint256 x, uint256 y) private pure returns (uint256) {\\n        unchecked {\\n            return x + y;\\n        }\\n    }\\n\\n    /**\\n     * @dev returns `(x - y) % 2 ^ 256`\\n     */\\n    function _unsafeSub(uint256 x, uint256 y) private pure returns (uint256) {\\n        unchecked {\\n            return x - y;\\n        }\\n    }\\n\\n    /**\\n     * @dev returns `(x * y) % 2 ^ 256`\\n     */\\n    function _unsafeMul(uint256 x, uint256 y) private pure returns (uint256) {\\n        unchecked {\\n            return x * y;\\n        }\\n    }\\n\\n    /**\\n     * @dev returns `x * y % (2 ^ 256 - 1)`\\n     */\\n    function _mulModMax(uint256 x, uint256 y) private pure returns (uint256) {\\n        return mulmod(x, y, type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev returns `x * y % z`\\n     */\\n    function _mulMod(\\n        uint256 x,\\n        uint256 y,\\n        uint256 z\\n    ) private pure returns (uint256) {\\n        return mulmod(x, y, z);\\n    }\\n}\\n\",\"keccak256\":\"0xfe497a0bf81052895be34fa2c8375d3078c89ada74998f975d85c857b37e952f\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/utility/Time.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.13;\\n\\n/**\\n * @dev this contract abstracts the block timestamp in order to allow for more flexible control in tests\\n */\\nabstract contract Time {\\n    /**\\n     * @dev returns the current time\\n     */\\n    function _time() internal view virtual returns (uint32) {\\n        return uint32(block.timestamp);\\n    }\\n}\\n\",\"keccak256\":\"0x9d1b2e564c5c980eeab286a14d39872b41b23b7adfba8df5d89f906d5a2e58ad\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/utility/Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.13;\\n\\nimport { AccessControlEnumerableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\\\";\\n\\nimport { IUpgradeable } from \\\"./interfaces/IUpgradeable.sol\\\";\\n\\nimport { AccessDenied } from \\\"./Utils.sol\\\";\\n\\n/**\\n * @dev this contract provides common utilities for upgradeable contracts\\n *\\n * note that we're using the Transparent Upgradeable Proxy pattern and *not* the Universal Upgradeable Proxy Standard\\n * (UUPS) pattern, therefore initializing the implementation contracts is not necessary or required\\n */\\nabstract contract Upgradeable is IUpgradeable, AccessControlEnumerableUpgradeable {\\n    error AlreadyInitialized();\\n\\n    // the admin role is used to allow a non-proxy admin to perform additional initialization/setup during contract\\n    // upgrades\\n    bytes32 internal constant ROLE_ADMIN = keccak256(\\\"ROLE_ADMIN\\\");\\n\\n    uint32 internal constant MAX_GAP = 50;\\n\\n    uint16 internal _initializations;\\n\\n    // upgrade forward-compatibility storage gap\\n    uint256[MAX_GAP - 1] private __gap;\\n\\n    // solhint-disable func-name-mixedcase\\n\\n    /**\\n     * @dev initializes the contract and its parents\\n     */\\n    function __Upgradeable_init() internal onlyInitializing {\\n        __AccessControl_init();\\n\\n        __Upgradeable_init_unchained();\\n    }\\n\\n    /**\\n     * @dev performs contract-specific initialization\\n     */\\n    function __Upgradeable_init_unchained() internal onlyInitializing {\\n        _initializations = 1;\\n\\n        // set up administrative roles\\n        _setRoleAdmin(ROLE_ADMIN, ROLE_ADMIN);\\n\\n        // allow the deployer to initially be the admin of the contract\\n        _setupRole(ROLE_ADMIN, msg.sender);\\n    }\\n\\n    // solhint-enable func-name-mixedcase\\n\\n    modifier onlyAdmin() {\\n        _hasRole(ROLE_ADMIN, msg.sender);\\n\\n        _;\\n    }\\n\\n    modifier onlyRoleMember(bytes32 role) {\\n        _hasRole(role, msg.sender);\\n\\n        _;\\n    }\\n\\n    function version() public view virtual override returns (uint16);\\n\\n    /**\\n     * @dev returns the admin role\\n     */\\n    function roleAdmin() external pure returns (bytes32) {\\n        return ROLE_ADMIN;\\n    }\\n\\n    /**\\n     * @dev performs post-upgrade initialization\\n     *\\n     * requirements:\\n     *\\n     * - this must can be called only once per-upgrade\\n     */\\n    function postUpgrade(bytes calldata data) external {\\n        uint16 initializations = _initializations + 1;\\n\\n        if (initializations != version()) {\\n            revert AlreadyInitialized();\\n        }\\n\\n        _initializations = initializations;\\n\\n        _postUpgrade(data);\\n    }\\n\\n    /**\\n     * @dev an optional post-upgrade callback that can be implemented by child contracts\\n     */\\n    function _postUpgrade(\\n        bytes calldata /* data */\\n    ) internal virtual {}\\n\\n    function _hasRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert AccessDenied();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x833d60d73beb19731946979be28aa8a7dd3d9cb845106fcfb113efc089235272\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/utility/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.13;\\n\\nimport { PPM_RESOLUTION } from \\\"./Constants.sol\\\";\\n\\nerror AccessDenied();\\nerror AlreadyExists();\\nerror DoesNotExist();\\nerror InvalidAddress();\\nerror InvalidExternalAddress();\\nerror InvalidFee();\\nerror InvalidPool();\\nerror InvalidPoolCollection();\\nerror InvalidStakedBalance();\\nerror InvalidToken();\\nerror InvalidParam();\\nerror NotEmpty();\\nerror NotPayable();\\nerror ZeroValue();\\n\\n/**\\n * @dev common utilities\\n */\\nabstract contract Utils {\\n    // allows execution by the caller only\\n    modifier only(address caller) {\\n        _only(caller);\\n\\n        _;\\n    }\\n\\n    function _only(address caller) internal view {\\n        if (msg.sender != caller) {\\n            revert AccessDenied();\\n        }\\n    }\\n\\n    // verifies that a value is greater than zero\\n    modifier greaterThanZero(uint256 value) {\\n        _greaterThanZero(value);\\n\\n        _;\\n    }\\n\\n    // error message binary size optimization\\n    function _greaterThanZero(uint256 value) internal pure {\\n        if (value == 0) {\\n            revert ZeroValue();\\n        }\\n    }\\n\\n    // validates an address - currently only checks that it isn't null\\n    modifier validAddress(address addr) {\\n        _validAddress(addr);\\n\\n        _;\\n    }\\n\\n    // error message binary size optimization\\n    function _validAddress(address addr) internal pure {\\n        if (addr == address(0)) {\\n            revert InvalidAddress();\\n        }\\n    }\\n\\n    // validates an external address - currently only checks that it isn't null or this\\n    modifier validExternalAddress(address addr) {\\n        _validExternalAddress(addr);\\n\\n        _;\\n    }\\n\\n    // error message binary size optimization\\n    function _validExternalAddress(address addr) internal view {\\n        if (addr == address(0) || addr == address(this)) {\\n            revert InvalidExternalAddress();\\n        }\\n    }\\n\\n    // ensures that the fee is valid\\n    modifier validFee(uint32 fee) {\\n        _validFee(fee);\\n\\n        _;\\n    }\\n\\n    // error message binary size optimization\\n    function _validFee(uint32 fee) internal pure {\\n        if (fee > PPM_RESOLUTION) {\\n            revert InvalidFee();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x62b8b81d3069467eb6402b8f61adcc24f5b2e310db1a2ee64d719229306ab823\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/utility/interfaces/IOwned.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.13;\\n\\n/**\\n * @dev Owned interface\\n */\\ninterface IOwned {\\n    /**\\n     * @dev returns the address of the current owner\\n     */\\n    function owner() external view returns (address);\\n\\n    /**\\n     * @dev allows transferring the contract ownership\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the owner of the contract\\n     * - the new owner still needs to accept the transfer\\n     */\\n    function transferOwnership(address ownerCandidate) external;\\n\\n    /**\\n     * @dev used by a new owner to accept an ownership transfer\\n     */\\n    function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0xe6141c9a7cb5853352f35dc83e9504e2c552feadac7c70dd1e029c1b4368b6bb\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/utility/interfaces/IUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.13;\\n\\nimport { IVersioned } from \\\"./IVersioned.sol\\\";\\n\\nimport { IAccessControlEnumerableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\\\";\\n\\n/**\\n * @dev this is the common interface for upgradeable contracts\\n */\\ninterface IUpgradeable is IAccessControlEnumerableUpgradeable, IVersioned {\\n\\n}\\n\",\"keccak256\":\"0x6019e5e9c706cc023b96313932f5aa7fc3734f446fd0936a2c6530d0d25330da\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/utility/interfaces/IVersioned.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.13;\\n\\n/**\\n * @dev an interface for a versioned contract\\n */\\ninterface IVersioned {\\n    function version() external view returns (uint16);\\n}\\n\",\"keccak256\":\"0x1969c895e9adc0bc8a85e975517d2f2b9357e0c9011f159d01b90f7d1a464d76\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/vaults/interfaces/IExternalRewardsVault.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.13;\\n\\nimport { IVault } from \\\"./IVault.sol\\\";\\n\\ninterface IExternalRewardsVault is IVault {}\\n\",\"keccak256\":\"0x56537125b84ae7ead3185149270b10709a5850d618816ac1b41a332ddd88325e\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/vaults/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.13;\\n\\nimport { IUpgradeable } from \\\"../../utility/interfaces/IUpgradeable.sol\\\";\\n\\nimport { Token } from \\\"../../token/Token.sol\\\";\\n\\n// the asset manager role is required to access all the funds\\nbytes32 constant ROLE_ASSET_MANAGER = keccak256(\\\"ROLE_ASSET_MANAGER\\\");\\n\\ninterface IVault is IUpgradeable {\\n    /**\\n     * @dev triggered when tokens have been withdrawn from the vault\\n     */\\n    event FundsWithdrawn(Token indexed token, address indexed caller, address indexed target, uint256 amount);\\n\\n    /**\\n     * @dev triggered when tokens have been burned from the vault\\n     */\\n    event FundsBurned(Token indexed token, address indexed caller, uint256 amount);\\n\\n    /**\\n     * @dev tells whether the vault accepts native token deposits\\n     */\\n    function isPayable() external view returns (bool);\\n\\n    /**\\n     * @dev withdraws funds held by the contract and sends them to an account\\n     */\\n    function withdrawFunds(\\n        Token token,\\n        address payable target,\\n        uint256 amount\\n    ) external;\\n\\n    /**\\n     * @dev burns funds held by the contract\\n     */\\n    function burn(Token token, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x1ac16bcccd209b3a73c00144df2b5c53fbd328434277e72457063c26645872d5\",\"license\":\"SEE LICENSE IN LICENSE\"}},\"version\":1}",
  "bytecode": "0x6101406040523480156200001257600080fd5b50604051620034ff380380620034ff83398101604081905262000035916200015c565b8462000041816200011b565b846200004d816200011b565b8462000059816200011b565b8462000065816200011b565b8462000071816200011b565b6001600160a01b03808b1660805289811660a05288811660c052871660e0819052604080516332f7ce0b60e21b8152905163cbdf382c916004808201926020929091908290030181865afa158015620000ce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000f49190620001dc565b6001600160a01b039081166101005295909516610120525062000203975050505050505050565b6001600160a01b038116620001435760405163e6c4247b60e01b815260040160405180910390fd5b50565b6001600160a01b03811681146200014357600080fd5b600080600080600060a086880312156200017557600080fd5b8551620001828162000146565b6020870151909550620001958162000146565b6040870151909450620001a88162000146565b6060870151909350620001bb8162000146565b6080870151909250620001ce8162000146565b809150509295509295909350565b600060208284031215620001ef57600080fd5b8151620001fc8162000146565b9392505050565b60805160a05160c05160e05161010051610120516132896200027660003960008181611bfb0152611d3301526000611022015260008181611ad20152611d59015260008181610ff601528181611a930152611cff0152600061106501526000818161110c0152611b6b01526132896000f3fe608060405234801561001057600080fd5b506004361061018e5760003560e01c80639010d07c116100de578063afc73e5611610097578063ca15c87311610071578063ca15c8731461037c578063ce2714901461038f578063d547741f146103af578063fce6be0b146103c257600080fd5b8063afc73e561461034b578063bfdbb4ac1461035e578063c5c51dca1461036757600080fd5b80639010d07c146102d657806391d148541461030157806393867fb514610314578063a217fddf14610328578063a24ef3fb14610330578063ae47796a1461033857600080fd5b806336568abe1161014b5780635cfc29f6116101255780635cfc29f6146102955780638129fc1c146102a85780638cd2403d146102b05780638ed68fb4146102c357600080fd5b806336568abe1461023c57806354fd4d501461024f578063557f07e21461025e57600080fd5b806301ffc9a714610193578063066ca449146101bb578063228dea4c146101d057806323cfcb10146101e5578063248a9ca3146101f85780632f2ff15d14610229575b600080fd5b6101a66101a1366004612c09565b6103d5565b60405190151581526020015b60405180910390f35b6101ce6101c9366004612c61565b610400565b005b6101d86104f8565b6040516101b29190612d46565b6101ce6101f3366004612d95565b61065b565b61021b610206366004612db2565b60009081526097602052604090206001015490565b6040519081526020016101b2565b6101ce610237366004612dcb565b610696565b6101ce61024a366004612dcb565b6106c1565b604051600181526020016101b2565b6101a661026c366004612d95565b6001600160a01b0316600090815261012d6020526040902060010154600160a01b900460ff1690565b6101ce6102a3366004612e09565b61073f565b6101ce6108d7565b6101ce6102be366004612e37565b610998565b6101ce6102d1366004612db2565b6109e9565b6102e96102e4366004612ea9565b610a14565b6040516001600160a01b0390911681526020016101b2565b6101a661030f366004612dcb565b610a33565b60008051602061325d83398151915261021b565b61021b600081565b6101ce610a5e565b6101ce610346366004612c61565b610b40565b6101a6610359366004612d95565b610c1c565b6101305461021b565b61036f610d2c565b6040516101b29190612ecb565b61021b61038a366004612db2565b610d3e565b6103a261039d366004612d95565b610d55565b6040516101b29190612f0c565b6101ce6103bd366004612dcb565b610e09565b6101ce6103d0366004612d95565b610e2f565b60006001600160e01b03198216635a05180f60e01b14806103fa57506103fa82610e7f565b92915050565b8361040a81610eb4565b8361041481610edb565b61042c60008051602061325d83398151915233610efc565b6002603354036104575760405162461bcd60e51b815260040161044e90612f1b565b60405180910390fd5b600260335563ffffffff8084169085161061048557604051633494a40d60e21b815260040160405180910390fd5b6104958686600087876000610f23565b6040805186815263ffffffff80871660208301528516918101919091526001600160a01b038716907f427740e0cc2a83abf623cd0c7b5914311900113df8c32f2111e117af7ec27b0b906060015b60405180910390a25050600160335550505050565b6060600061050761012e6113a0565b905060008167ffffffffffffffff81111561052457610524612f52565b60405190808252806020026020018201604052801561055d57816020015b61054a612bbd565b8152602001906001900390816105425790505b50905060005b828110156106545761012d600061057c61012e846113aa565b6001600160a01b0390811682526020808301939093526040918201600020825161012081018452815463ffffffff8082168352600160201b8204811696830196909652600160401b8104861694820194909452600160601b90930490931660608301526001830154908116608083015260ff600160a01b82048116151560a0840152600160a81b9091041660c0820152600282015460e0820152600390910154610100820152825183908390811061063657610636612f68565b6020026020010181905250808061064c90612f94565b915050610563565b5092915050565b60026033540361067d5760405162461bcd60e51b815260040161044e90612f1b565b600260335561068d8160006113b6565b50506001603355565b6000828152609760205260409020600101546106b281336117a6565b6106bc838361180a565b505050565b6001600160a01b03811633146107315760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161044e565b61073b828261182c565b5050565b61075760008051602061325d83398151915233610efc565b6002603354036107795760405162461bcd60e51b815260040161044e90612f1b565b600260338190556001600160a01b03838116600090815261012d6020908152604091829020825161012081018452815463ffffffff8082168352600160201b8204811694830194909452600160401b8104841694820194909452600160601b909304909116606083015260018101549283166080830181905260ff600160a01b85048116151560a0850152600160a81b90940490931660c08301529283015460e08201526003909201546101008301526108465760405163b0ce759160e01b815260040160405180910390fd5b60a08101518215158115150361085d57505061068d565b6001600160a01b038416600081815261012d6020526040908190206001018054861515600160a01b0260ff60a01b19909116179055517ff04e5ae6485687a4fd92bd206c45059bbc50fbd71bd6d103deee02c0e4858aa3906108c490861515815260200190565b60405180910390a2505050506001603355565b600054610100900460ff166108f25760005460ff16156108f6565b303b155b6109595760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161044e565b600054610100900460ff1615801561097b576000805461ffff19166101011790555b61098361184e565b8015610995576000805461ff00191690555b50565b60fb546000906109ad9061ffff166001612fad565b905061ffff81166001146109d35760405162dc149f60e41b815260040160405180910390fd5b60fb805461ffff191661ffff8316179055505050565b806109f381610edb565b610a0b60008051602061325d83398151915233610efc565b61073b8261188f565b600082815260c960205260408120610a2c90836113aa565b9392505050565b60009182526097602090815260408084206001600160a01b0393909316845291905290205460ff1690565b600260335403610a805760405162461bcd60e51b815260040161044e90612f1b565b60026033556000610a9261012e6113a0565b6101315461013054919250906000610ab4610aae600284612fd3565b856118e1565b905060005b81811015610b26576000610ae3610adc610ad38888613008565b61012e906113aa565b60016113b6565b905084610aef81612f94565b9550508015610b135783610b028161301c565b94505083600003610b135750610b26565b5080610b1e81612f94565b915050610ab9565b50610b318484613008565b61013155505060016033555050565b83610b4a81610eb4565b83610b5481610edb565b610b6c60008051602061325d83398151915233610efc565b600260335403610b8e5760405162461bcd60e51b815260040161044e90612f1b565b600260335563ffffffff8316600003610bba57604051633494a40d60e21b815260040160405180910390fd5b610bca8686600187600088610f23565b6040805186815263ffffffff80871660208301528516918101919091526001600160a01b038716907fef1b64d71be160c09852378cab79535f4e053cf73defcf8df2a402ba77a4dd0a906060016104e3565b6001600160a01b03818116600090815261012d60209081526040808320815161012081018352815463ffffffff8082168352600160201b8204811695830195909552600160401b8104851693820193909352600160601b909204909216606082015260018201549384166080820181905260ff600160a01b86048116151560a0840152600160a81b90950490941660c0820152600282015460e08201526003909101546101008201529091610cd45750600092915050565b60c0810151429060ff1660001901610cfa57905163ffffffff9182169116111592915050565b815163ffffffff808316911611801590610d245750816020015163ffffffff168163ffffffff1611155b949350505050565b6060610d3961012e6118f7565b905090565b600081815260c9602052604081206103fa906113a0565b610d5d612bbd565b506001600160a01b03908116600090815261012d6020908152604091829020825161012081018452815463ffffffff8082168352600160201b8204811694830194909452600160401b8104841694820194909452600160601b90930490911660608301526001810154928316608083015260ff600160a01b84048116151560a0840152600160a81b90930490921660c0820152600282015460e082015260039091015461010082015290565b600082815260976020526040902060010154610e2581336117a6565b6106bc838361182c565b610e4760008051602061325d83398151915233610efc565b600260335403610e695760405162461bcd60e51b815260040161044e90612f1b565b6002603355610e7781611904565b506001603355565b60006001600160e01b03198216637965db0b60e01b14806103fa57506301ffc9a760e01b6001600160e01b03198316146103fa565b6001600160a01b0381166109955760405163e6c4247b60e01b815260040160405180910390fd5b8060000361099557604051637c946ed760e01b815260040160405180910390fd5b610f068282610a33565b61073b57604051634ca8886760e01b815260040160405180910390fd5b6001600160a01b03868116600090815261012d6020908152604091829020825161012081018452815463ffffffff8082168352600160201b8204811694830194909452600160401b8104841694820194909452600160601b909304909116606083015260018101549283166080830181905260ff600160a01b85048116151560a0850152600160a81b90940490931660c0830152600281015460e0830152600301546101009091015215610fea5760405163119b4fd360e11b815260040160405180910390fd5b60006001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169088160361104657507f00000000000000000000000000000000000000000000000000000000000000006111e6565b60405163b5af090f60e01b81526001600160a01b0388811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063b5af090f90602401602060405180830381865afa1580156110ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d09190613033565b6110ed57604051630b094f2760e31b815260040160405180910390fd5b6040516309bca0e760e41b81526001600160a01b0388811660048301527f00000000000000000000000000000000000000000000000000000000000000001690639bca0e7090602401602060405180830381865afa158015611153573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111779190613050565b604051635768adcf60e01b81526001600160a01b0389811660048301529190911690635768adcf90602401602060405180830381865afa1580156111bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e39190613050565b90505b4263ffffffff168463ffffffff16101561121357604051633494a40d60e21b815260040160405180910390fd5b604080516101208101825263ffffffff808716825285811660208301528416918101919091526000606082018190526001600160a01b038316608083015260a082015260ff861660c082015260e08101879052610100810187905261128b61127c89838a611a87565b836112868b611cfb565b611d7e565b6001600160a01b03808916600090815261012d6020908152604091829020845181549286015193860151606087015163ffffffff908116600160601b0263ffffffff60601b19928216600160401b029290921667ffffffffffffffff60401b19968216600160201b0267ffffffffffffffff1990961693821693909317949094179490941617929092178255608084015160018301805460a087015160c088015160ff16600160a81b0260ff60a81b19911515600160a01b026001600160a81b0319909316949097169390931717919091169390931790925560e0830151600282015561010083015160039091015561138a9061012e908a90611e0816565b6113965761139661306d565b5050505050505050565b60006103fa825490565b6000610a2c8383611e1d565b6001600160a01b03808316600090815261012d60209081526040808320815161012081018352815463ffffffff8082168352600160201b8204811695830195909552600160401b8104851693820193909352600160601b90920490921660608201526001820154938416608082015260ff600160a01b85048116151560a0830152600160a81b90940490931660c0840152600281015460e08401526003015461010083015290816114644290565b90508160a00151806114855750816000015163ffffffff168163ffffffff16105b15611495576000925050506103fa565b8380156114be575060608201516114af90610e1090613083565b63ffffffff168163ffffffff16105b156114ce576000925050506103fa565b60006114da8383611e47565b9050806000036114f057600193505050506103fa565b60006114fd878584611a87565b9050806000036115145760019450505050506103fa565b6207a12063ffffffff1684608001516001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611560573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061158491906130a2565b61158e9190612fd3565b61159b620f424083612fd3565b106115b6576115a987611904565b60009450505050506103fa565b60006115c188611cfb565b90506115d282866080015183611d7e565b6080850151604051632770a7eb60e21b81526001600160a01b0391821660048201526024810184905290821690639dc29fac90604401600060405180830381600087803b15801561162257600080fd5b505af1158015611636573d6000803e3d6000fd5b5050505082856101000181815161164d91906130bb565b90525063ffffffff808516606087019081526001600160a01b03808b16600081815261012d60209081526040918290208b518154928d0151848e015197518916600160601b0263ffffffff60601b19988a16600160401b029890981667ffffffffffffffff60401b19918a16600160201b0267ffffffffffffffff199095169290991691909117929092179190911695909517939093178455608089015160018501805460a08c015160c08d015160ff16600160a81b0260ff60a81b19911515600160a01b026001600160a81b0319909316949096169390931717919091169290921790915560e088015160028401556101008801516003909301839055905190917f881da94e6d36e6bae1699f239cad069496fff81144d5970fe1525092e308e001916117909187918791909283526020830191909152604082015260600190565b60405180910390a2506001979650505050505050565b6117b08282610a33565b61073b576117c8816001600160a01b03166014611f58565b6117d3836020611f58565b6040516020016117e4929190613102565b60408051601f198184030181529082905262461bcd60e51b825261044e91600401613177565b61181482826120f4565b600082815260c9602052604090206106bc9082611e08565b611836828261217a565b600082815260c9602052604090206106bc90826121e1565b600054610100900460ff166118755760405162461bcd60e51b815260040161044e906131aa565b61187d6121f6565b611885612225565b61188d61225c565b565b6101305481810361189e575050565b61013082905560408051828152602081018490527fa231dc0799ea771270f5df10c137661dd8ae27ca9a881de34df22f2a41642e9c910160405180910390a15050565b60008183106118f05781610a2c565b5090919050565b60606000610a2c8361228d565b6001600160a01b03818116600090815261012d6020908152604091829020825161012081018452815463ffffffff8082168352600160201b8204811694830194909452600160401b8104841694820194909452600160601b909304909116606083015260018101549283166080830181905260ff600160a01b85048116151560a0850152600160a81b90940490931660c0830152600281015460e083015260030154610100820152906119ca5760405163b0ce759160e01b815260040160405180910390fd5b6001600160a01b038216600090815261012d6020526040812080546fffffffffffffffffffffffffffffffff191681556001810180546001600160b01b03191690556002810182905560030155611a2361012e836121e1565b611a2f57611a2f61306d565b6020808201516101008301516040805163ffffffff9093168352928201526001600160a01b038416917fcb39668bfa9686199ed9b4f9d196329d1d4a171d4d96fe7a05d2f364174d8c2c910160405180910390a25050565b60006001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811690851603611b4c5760405163e80e8a7d60e01b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e80e8a7d90602401602060405180830381865afa158015611b21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b4591906130a2565b9050610a2c565b6040516309bca0e760e41b81526001600160a01b0385811660048301527f00000000000000000000000000000000000000000000000000000000000000001690639bca0e7090602401602060405180830381865afa158015611bb2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bd69190613050565b6001600160a01b031663921a929e858486608001516001600160a01b03166370a082317f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b8152600401611c4591906001600160a01b0391909116815260200190565b602060405180830381865afa158015611c62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c8691906130a2565b6040516001600160e01b031960e086901b1681526001600160a01b03909316600484015260248301919091526044820152606401602060405180830381865afa158015611cd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2491906130a2565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811690831614611d57577f00000000000000000000000000000000000000000000000000000000000000006103fa565b7f000000000000000000000000000000000000000000000000000000000000000092915050565b6040516370a0823160e01b81526001600160a01b0382811660048301528316906370a0823190602401602060405180830381865afa158015611dc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611de891906130a2565b8311156106bc5760405163356680b760e01b815260040160405180910390fd5b6000610a2c836001600160a01b0384166122e9565b6000826000018281548110611e3457611e34612f68565b9060005260206000200154905092915050565b600080611e68846060015163ffffffff16856000015163ffffffff16612338565b60c085015190915060ff16611f055760008460000151611e988563ffffffff16876020015163ffffffff166118e1565b611ea291906131f5565b905060008560000151611ec58463ffffffff16886020015163ffffffff166118e1565b611ecf91906131f5565b9050611efb8660e001518284611ee591906131f5565b885160208a0151611ef691906131f5565b612348565b93505050506103fa565b8351600090611f1490856131f5565b8551909150600090611f2690846131f5565b9050611f3b8660e0015182886040015161237d565b611f4e8760e0015184896040015161237d565b611efb91906130bb565b60606000611f67836002612fd3565b611f7290600261321a565b67ffffffffffffffff811115611f8a57611f8a612f52565b6040519080825280601f01601f191660200182016040528015611fb4576020820181803683370190505b509050600360fc1b81600081518110611fcf57611fcf612f68565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611ffe57611ffe612f68565b60200101906001600160f81b031916908160001a9053506000612022846002612fd3565b61202d90600161321a565b90505b60018111156120a5576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061206157612061612f68565b1a60f81b82828151811061207757612077612f68565b60200101906001600160f81b031916908160001a90535060049490941c9361209e8161301c565b9050612030565b508315610a2c5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161044e565b6120fe8282610a33565b61073b5760008281526097602090815260408083206001600160a01b03851684529091529020805460ff191660011790556121363390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6121848282610a33565b1561073b5760008281526097602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610a2c836001600160a01b0384166123d0565b600054610100900460ff1661221d5760405162461bcd60e51b815260040161044e906131aa565b61188d6124c3565b600054610100900460ff1661224c5760405162461bcd60e51b815260040161044e906131aa565b6122546124f1565b61188d612518565b600054610100900460ff166122835760405162461bcd60e51b815260040161044e906131aa565b61188d600361188f565b6060816000018054806020026020016040519081016040528092919081815260200182805480156122dd57602002820191906000526020600020905b8154815260200190600101908083116122c9575b50505050509050919050565b6000818152600183016020526040812054612330575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556103fa565b5060006103fa565b6000818310156118f05781610a2c565b60008163ffffffff168363ffffffff1611156123665761236661306d565b610d24848463ffffffff168463ffffffff1661257d565b6040805180820190915263ffffffff808416825282166020820152600090816123a582612649565b90506123c686826020015183600001516123bf91906130bb565b835161257d565b9695505050505050565b600081815260018301602052604081205480156124b95760006123f46001836130bb565b8554909150600090612408906001906130bb565b905081811461246d57600086600001828154811061242857612428612f68565b906000526020600020015490508087600001848154811061244b5761244b612f68565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061247e5761247e613232565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506103fa565b60009150506103fa565b600054610100900460ff166124ea5760405162461bcd60e51b815260040161044e906131aa565b6001603355565b600054610100900460ff1661188d5760405162461bcd60e51b815260040161044e906131aa565b600054610100900460ff1661253f5760405162461bcd60e51b815260040161044e906131aa565b60fb805461ffff1916600117905561256560008051602061325d833981519152806129d0565b61188d60008051602061325d83398151915233612a1b565b60008061258a8585612a25565b80519091506000036125ae578281602001516125a69190613248565b915050610a2c565b805183116125cf57604051631a93c68960e11b815260040160405180910390fd5b60006125dc868686612aac565b905060006125ea8383612ac7565b8051909150600003612610578481602001516126069190613248565b9350505050610a2c565b60008581038616906126228383612b4c565b90506000612638612633848a613248565b612b83565b919091029998505050505050505050565b604080518082019091526000808252602082015260006126826f58b90bfbe8e7bcd5e4f1d9cc01f97b578460000151856020015161257d565b905060008080600160831b84106126ac57604051631a93c68960e11b815260040160405180910390fd5b6001607c1b840692508291506001607f1b8280020491506710e1b3be415a00008202016001607f1b8383020491506705a0913f6b1e00008202016001607f1b838302049150670168244fdac780008202016001607f1b838302049150664807432bc180008202016001607f1b838302049150660c0135dca040008202016001607f1b8383020491506601b707b1cdc0008202016001607f1b8383020491506536e0f639b8008202016001607f1b838302049150650618fee9f8008202016001607f1b838302049150649c197dcc008202016001607f1b838302049150640e30dce4008202016001607f1b83830204915064012ebd13008202016001607f1b8383020491506317499f008202016001607f1b8383020491506301a9d4808202016001607f1b838302049150621c63808202016001607f1b8383020491506201c6388202016001607f1b838302049150611ab88202016001607f1b83830204915061017c8202016001607f1b83830204915060148202016001607f1b83830204915081016001607f1b836721c3677c82b400008304010190506001607c1b8416156128795770018ebef9eac820ae8682b9793ac6d1e7767001c3d6a24ed82218787d624d3e5eba95f982020490505b6001607d1b8416156128af577001368b2fc6f9609fe7aceb46aa619baed470018ebef9eac820ae8682b9793ac6d1e77882020490505b6001607e1b8416156128e4576fbc5ab1b16779be3575bd8f0520a9f21f7001368b2fc6f9609fe7aceb46aa619baed582020490505b6001607f1b841615612918576f454aaa8efe072e7f6ddbab84b40a55c96fbc5ab1b16779be3575bd8f0520a9f21e82020490505b600160801b84161561294c576f0960aadc109e7a3bf4578099615711ea6f454aaa8efe072e7f6ddbab84b40a55c582020490505b600160811b84161561297f576e2bf84208204f5977f9a8cf01fdce3d6f0960aadc109e7a3bf4578099615711d782020490505b600160821b8416156129b0576d03c6ab775dd0b95b4cbee7e65d116e2bf84208204f5977f9a8cf01fdc30782020490505b604080518082019091529081526001607f1b602082015295945050505050565b600082815260976020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b61073b828261180a565b60408051808201909152600080825260208201526000612a458484612bae565b9050838302808210612a7a5760405180604001604052808284612a6891906130bb565b815260200182815250925050506103fa565b60405180604001604052806001612a918585900390565b612a9b91906130bb565b815260200191909152949350505050565b60008180612abc57612abc612ff2565b838509949350505050565b604080518082019091526000808252602082015281836020015110612b1457604051806040016040528084600001518152602001838560200151612b0b91906130bb565b905290506103fa565b604051806040016040528060018560000151612b3091906130bb565b8152602001612b43856020015185900390565b90529392505050565b600080612b64612b5e84808403613248565b60010190565b9050828460200151612b769190613248565b8451820217949350505050565b60006001815b6008811015610654578382026002038202915080612ba681612f94565b915050612b89565b60006000198284099392505050565b6040805161012081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081019190915290565b600060208284031215612c1b57600080fd5b81356001600160e01b031981168114610a2c57600080fd5b6001600160a01b038116811461099557600080fd5b803563ffffffff81168114612c5c57600080fd5b919050565b60008060008060808587031215612c7757600080fd5b8435612c8281612c33565b935060208501359250612c9760408601612c48565b9150612ca560608601612c48565b905092959194509250565b63ffffffff808251168352806020830151166020840152806040830151166040840152506060810151612ceb606084018263ffffffff169052565b506080810151612d0660808401826001600160a01b03169052565b5060a0810151612d1a60a084018215159052565b5060c0810151612d2f60c084018260ff169052565b5060e0818101519083015261010090810151910152565b6020808252825182820181905260009190848201906040850190845b81811015612d8957612d75838551612cb0565b928401926101209290920191600101612d62565b50909695505050505050565b600060208284031215612da757600080fd5b8135610a2c81612c33565b600060208284031215612dc457600080fd5b5035919050565b60008060408385031215612dde57600080fd5b823591506020830135612df081612c33565b809150509250929050565b801515811461099557600080fd5b60008060408385031215612e1c57600080fd5b8235612e2781612c33565b91506020830135612df081612dfb565b60008060208385031215612e4a57600080fd5b823567ffffffffffffffff80821115612e6257600080fd5b818501915085601f830112612e7657600080fd5b813581811115612e8557600080fd5b866020828501011115612e9757600080fd5b60209290920196919550909350505050565b60008060408385031215612ebc57600080fd5b50508035926020909101359150565b6020808252825182820181905260009190848201906040850190845b81811015612d895783516001600160a01b031683529284019291840191600101612ee7565b61012081016103fa8284612cb0565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201612fa657612fa6612f7e565b5060010190565b600061ffff808316818516808303821115612fca57612fca612f7e565b01949350505050565b6000816000190483118215151615612fed57612fed612f7e565b500290565b634e487b7160e01b600052601260045260246000fd5b60008261301757613017612ff2565b500690565b60008161302b5761302b612f7e565b506000190190565b60006020828403121561304557600080fd5b8151610a2c81612dfb565b60006020828403121561306257600080fd5b8151610a2c81612c33565b634e487b7160e01b600052600160045260246000fd5b600063ffffffff808316818516808303821115612fca57612fca612f7e565b6000602082840312156130b457600080fd5b5051919050565b6000828210156130cd576130cd612f7e565b500390565b60005b838110156130ed5781810151838201526020016130d5565b838111156130fc576000848401525b50505050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161313a8160178501602088016130d2565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161316b8160288401602088016130d2565b01602801949350505050565b60208152600082518060208401526131968160408501602087016130d2565b601f01601f19169190910160400192915050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600063ffffffff8381169083168181101561321257613212612f7e565b039392505050565b6000821982111561322d5761322d612f7e565b500190565b634e487b7160e01b600052603160045260246000fd5b60008261325757613257612ff2565b50049056fe2172861495e7b85edac73e3cd5fbb42dd675baadf627720e687bcfdaca025096a164736f6c634300080d000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061018e5760003560e01c80639010d07c116100de578063afc73e5611610097578063ca15c87311610071578063ca15c8731461037c578063ce2714901461038f578063d547741f146103af578063fce6be0b146103c257600080fd5b8063afc73e561461034b578063bfdbb4ac1461035e578063c5c51dca1461036757600080fd5b80639010d07c146102d657806391d148541461030157806393867fb514610314578063a217fddf14610328578063a24ef3fb14610330578063ae47796a1461033857600080fd5b806336568abe1161014b5780635cfc29f6116101255780635cfc29f6146102955780638129fc1c146102a85780638cd2403d146102b05780638ed68fb4146102c357600080fd5b806336568abe1461023c57806354fd4d501461024f578063557f07e21461025e57600080fd5b806301ffc9a714610193578063066ca449146101bb578063228dea4c146101d057806323cfcb10146101e5578063248a9ca3146101f85780632f2ff15d14610229575b600080fd5b6101a66101a1366004612c09565b6103d5565b60405190151581526020015b60405180910390f35b6101ce6101c9366004612c61565b610400565b005b6101d86104f8565b6040516101b29190612d46565b6101ce6101f3366004612d95565b61065b565b61021b610206366004612db2565b60009081526097602052604090206001015490565b6040519081526020016101b2565b6101ce610237366004612dcb565b610696565b6101ce61024a366004612dcb565b6106c1565b604051600181526020016101b2565b6101a661026c366004612d95565b6001600160a01b0316600090815261012d6020526040902060010154600160a01b900460ff1690565b6101ce6102a3366004612e09565b61073f565b6101ce6108d7565b6101ce6102be366004612e37565b610998565b6101ce6102d1366004612db2565b6109e9565b6102e96102e4366004612ea9565b610a14565b6040516001600160a01b0390911681526020016101b2565b6101a661030f366004612dcb565b610a33565b60008051602061325d83398151915261021b565b61021b600081565b6101ce610a5e565b6101ce610346366004612c61565b610b40565b6101a6610359366004612d95565b610c1c565b6101305461021b565b61036f610d2c565b6040516101b29190612ecb565b61021b61038a366004612db2565b610d3e565b6103a261039d366004612d95565b610d55565b6040516101b29190612f0c565b6101ce6103bd366004612dcb565b610e09565b6101ce6103d0366004612d95565b610e2f565b60006001600160e01b03198216635a05180f60e01b14806103fa57506103fa82610e7f565b92915050565b8361040a81610eb4565b8361041481610edb565b61042c60008051602061325d83398151915233610efc565b6002603354036104575760405162461bcd60e51b815260040161044e90612f1b565b60405180910390fd5b600260335563ffffffff8084169085161061048557604051633494a40d60e21b815260040160405180910390fd5b6104958686600087876000610f23565b6040805186815263ffffffff80871660208301528516918101919091526001600160a01b038716907f427740e0cc2a83abf623cd0c7b5914311900113df8c32f2111e117af7ec27b0b906060015b60405180910390a25050600160335550505050565b6060600061050761012e6113a0565b905060008167ffffffffffffffff81111561052457610524612f52565b60405190808252806020026020018201604052801561055d57816020015b61054a612bbd565b8152602001906001900390816105425790505b50905060005b828110156106545761012d600061057c61012e846113aa565b6001600160a01b0390811682526020808301939093526040918201600020825161012081018452815463ffffffff8082168352600160201b8204811696830196909652600160401b8104861694820194909452600160601b90930490931660608301526001830154908116608083015260ff600160a01b82048116151560a0840152600160a81b9091041660c0820152600282015460e0820152600390910154610100820152825183908390811061063657610636612f68565b6020026020010181905250808061064c90612f94565b915050610563565b5092915050565b60026033540361067d5760405162461bcd60e51b815260040161044e90612f1b565b600260335561068d8160006113b6565b50506001603355565b6000828152609760205260409020600101546106b281336117a6565b6106bc838361180a565b505050565b6001600160a01b03811633146107315760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161044e565b61073b828261182c565b5050565b61075760008051602061325d83398151915233610efc565b6002603354036107795760405162461bcd60e51b815260040161044e90612f1b565b600260338190556001600160a01b03838116600090815261012d6020908152604091829020825161012081018452815463ffffffff8082168352600160201b8204811694830194909452600160401b8104841694820194909452600160601b909304909116606083015260018101549283166080830181905260ff600160a01b85048116151560a0850152600160a81b90940490931660c08301529283015460e08201526003909201546101008301526108465760405163b0ce759160e01b815260040160405180910390fd5b60a08101518215158115150361085d57505061068d565b6001600160a01b038416600081815261012d6020526040908190206001018054861515600160a01b0260ff60a01b19909116179055517ff04e5ae6485687a4fd92bd206c45059bbc50fbd71bd6d103deee02c0e4858aa3906108c490861515815260200190565b60405180910390a2505050506001603355565b600054610100900460ff166108f25760005460ff16156108f6565b303b155b6109595760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161044e565b600054610100900460ff1615801561097b576000805461ffff19166101011790555b61098361184e565b8015610995576000805461ff00191690555b50565b60fb546000906109ad9061ffff166001612fad565b905061ffff81166001146109d35760405162dc149f60e41b815260040160405180910390fd5b60fb805461ffff191661ffff8316179055505050565b806109f381610edb565b610a0b60008051602061325d83398151915233610efc565b61073b8261188f565b600082815260c960205260408120610a2c90836113aa565b9392505050565b60009182526097602090815260408084206001600160a01b0393909316845291905290205460ff1690565b600260335403610a805760405162461bcd60e51b815260040161044e90612f1b565b60026033556000610a9261012e6113a0565b6101315461013054919250906000610ab4610aae600284612fd3565b856118e1565b905060005b81811015610b26576000610ae3610adc610ad38888613008565b61012e906113aa565b60016113b6565b905084610aef81612f94565b9550508015610b135783610b028161301c565b94505083600003610b135750610b26565b5080610b1e81612f94565b915050610ab9565b50610b318484613008565b61013155505060016033555050565b83610b4a81610eb4565b83610b5481610edb565b610b6c60008051602061325d83398151915233610efc565b600260335403610b8e5760405162461bcd60e51b815260040161044e90612f1b565b600260335563ffffffff8316600003610bba57604051633494a40d60e21b815260040160405180910390fd5b610bca8686600187600088610f23565b6040805186815263ffffffff80871660208301528516918101919091526001600160a01b038716907fef1b64d71be160c09852378cab79535f4e053cf73defcf8df2a402ba77a4dd0a906060016104e3565b6001600160a01b03818116600090815261012d60209081526040808320815161012081018352815463ffffffff8082168352600160201b8204811695830195909552600160401b8104851693820193909352600160601b909204909216606082015260018201549384166080820181905260ff600160a01b86048116151560a0840152600160a81b90950490941660c0820152600282015460e08201526003909101546101008201529091610cd45750600092915050565b60c0810151429060ff1660001901610cfa57905163ffffffff9182169116111592915050565b815163ffffffff808316911611801590610d245750816020015163ffffffff168163ffffffff1611155b949350505050565b6060610d3961012e6118f7565b905090565b600081815260c9602052604081206103fa906113a0565b610d5d612bbd565b506001600160a01b03908116600090815261012d6020908152604091829020825161012081018452815463ffffffff8082168352600160201b8204811694830194909452600160401b8104841694820194909452600160601b90930490911660608301526001810154928316608083015260ff600160a01b84048116151560a0840152600160a81b90930490921660c0820152600282015460e082015260039091015461010082015290565b600082815260976020526040902060010154610e2581336117a6565b6106bc838361182c565b610e4760008051602061325d83398151915233610efc565b600260335403610e695760405162461bcd60e51b815260040161044e90612f1b565b6002603355610e7781611904565b506001603355565b60006001600160e01b03198216637965db0b60e01b14806103fa57506301ffc9a760e01b6001600160e01b03198316146103fa565b6001600160a01b0381166109955760405163e6c4247b60e01b815260040160405180910390fd5b8060000361099557604051637c946ed760e01b815260040160405180910390fd5b610f068282610a33565b61073b57604051634ca8886760e01b815260040160405180910390fd5b6001600160a01b03868116600090815261012d6020908152604091829020825161012081018452815463ffffffff8082168352600160201b8204811694830194909452600160401b8104841694820194909452600160601b909304909116606083015260018101549283166080830181905260ff600160a01b85048116151560a0850152600160a81b90940490931660c0830152600281015460e0830152600301546101009091015215610fea5760405163119b4fd360e11b815260040160405180910390fd5b60006001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169088160361104657507f00000000000000000000000000000000000000000000000000000000000000006111e6565b60405163b5af090f60e01b81526001600160a01b0388811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063b5af090f90602401602060405180830381865afa1580156110ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d09190613033565b6110ed57604051630b094f2760e31b815260040160405180910390fd5b6040516309bca0e760e41b81526001600160a01b0388811660048301527f00000000000000000000000000000000000000000000000000000000000000001690639bca0e7090602401602060405180830381865afa158015611153573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111779190613050565b604051635768adcf60e01b81526001600160a01b0389811660048301529190911690635768adcf90602401602060405180830381865afa1580156111bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e39190613050565b90505b4263ffffffff168463ffffffff16101561121357604051633494a40d60e21b815260040160405180910390fd5b604080516101208101825263ffffffff808716825285811660208301528416918101919091526000606082018190526001600160a01b038316608083015260a082015260ff861660c082015260e08101879052610100810187905261128b61127c89838a611a87565b836112868b611cfb565b611d7e565b6001600160a01b03808916600090815261012d6020908152604091829020845181549286015193860151606087015163ffffffff908116600160601b0263ffffffff60601b19928216600160401b029290921667ffffffffffffffff60401b19968216600160201b0267ffffffffffffffff1990961693821693909317949094179490941617929092178255608084015160018301805460a087015160c088015160ff16600160a81b0260ff60a81b19911515600160a01b026001600160a81b0319909316949097169390931717919091169390931790925560e0830151600282015561010083015160039091015561138a9061012e908a90611e0816565b6113965761139661306d565b5050505050505050565b60006103fa825490565b6000610a2c8383611e1d565b6001600160a01b03808316600090815261012d60209081526040808320815161012081018352815463ffffffff8082168352600160201b8204811695830195909552600160401b8104851693820193909352600160601b90920490921660608201526001820154938416608082015260ff600160a01b85048116151560a0830152600160a81b90940490931660c0840152600281015460e08401526003015461010083015290816114644290565b90508160a00151806114855750816000015163ffffffff168163ffffffff16105b15611495576000925050506103fa565b8380156114be575060608201516114af90610e1090613083565b63ffffffff168163ffffffff16105b156114ce576000925050506103fa565b60006114da8383611e47565b9050806000036114f057600193505050506103fa565b60006114fd878584611a87565b9050806000036115145760019450505050506103fa565b6207a12063ffffffff1684608001516001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611560573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061158491906130a2565b61158e9190612fd3565b61159b620f424083612fd3565b106115b6576115a987611904565b60009450505050506103fa565b60006115c188611cfb565b90506115d282866080015183611d7e565b6080850151604051632770a7eb60e21b81526001600160a01b0391821660048201526024810184905290821690639dc29fac90604401600060405180830381600087803b15801561162257600080fd5b505af1158015611636573d6000803e3d6000fd5b5050505082856101000181815161164d91906130bb565b90525063ffffffff808516606087019081526001600160a01b03808b16600081815261012d60209081526040918290208b518154928d0151848e015197518916600160601b0263ffffffff60601b19988a16600160401b029890981667ffffffffffffffff60401b19918a16600160201b0267ffffffffffffffff199095169290991691909117929092179190911695909517939093178455608089015160018501805460a08c015160c08d015160ff16600160a81b0260ff60a81b19911515600160a01b026001600160a81b0319909316949096169390931717919091169290921790915560e088015160028401556101008801516003909301839055905190917f881da94e6d36e6bae1699f239cad069496fff81144d5970fe1525092e308e001916117909187918791909283526020830191909152604082015260600190565b60405180910390a2506001979650505050505050565b6117b08282610a33565b61073b576117c8816001600160a01b03166014611f58565b6117d3836020611f58565b6040516020016117e4929190613102565b60408051601f198184030181529082905262461bcd60e51b825261044e91600401613177565b61181482826120f4565b600082815260c9602052604090206106bc9082611e08565b611836828261217a565b600082815260c9602052604090206106bc90826121e1565b600054610100900460ff166118755760405162461bcd60e51b815260040161044e906131aa565b61187d6121f6565b611885612225565b61188d61225c565b565b6101305481810361189e575050565b61013082905560408051828152602081018490527fa231dc0799ea771270f5df10c137661dd8ae27ca9a881de34df22f2a41642e9c910160405180910390a15050565b60008183106118f05781610a2c565b5090919050565b60606000610a2c8361228d565b6001600160a01b03818116600090815261012d6020908152604091829020825161012081018452815463ffffffff8082168352600160201b8204811694830194909452600160401b8104841694820194909452600160601b909304909116606083015260018101549283166080830181905260ff600160a01b85048116151560a0850152600160a81b90940490931660c0830152600281015460e083015260030154610100820152906119ca5760405163b0ce759160e01b815260040160405180910390fd5b6001600160a01b038216600090815261012d6020526040812080546fffffffffffffffffffffffffffffffff191681556001810180546001600160b01b03191690556002810182905560030155611a2361012e836121e1565b611a2f57611a2f61306d565b6020808201516101008301516040805163ffffffff9093168352928201526001600160a01b038416917fcb39668bfa9686199ed9b4f9d196329d1d4a171d4d96fe7a05d2f364174d8c2c910160405180910390a25050565b60006001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811690851603611b4c5760405163e80e8a7d60e01b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e80e8a7d90602401602060405180830381865afa158015611b21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b4591906130a2565b9050610a2c565b6040516309bca0e760e41b81526001600160a01b0385811660048301527f00000000000000000000000000000000000000000000000000000000000000001690639bca0e7090602401602060405180830381865afa158015611bb2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bd69190613050565b6001600160a01b031663921a929e858486608001516001600160a01b03166370a082317f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b8152600401611c4591906001600160a01b0391909116815260200190565b602060405180830381865afa158015611c62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c8691906130a2565b6040516001600160e01b031960e086901b1681526001600160a01b03909316600484015260248301919091526044820152606401602060405180830381865afa158015611cd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2491906130a2565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811690831614611d57577f00000000000000000000000000000000000000000000000000000000000000006103fa565b7f000000000000000000000000000000000000000000000000000000000000000092915050565b6040516370a0823160e01b81526001600160a01b0382811660048301528316906370a0823190602401602060405180830381865afa158015611dc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611de891906130a2565b8311156106bc5760405163356680b760e01b815260040160405180910390fd5b6000610a2c836001600160a01b0384166122e9565b6000826000018281548110611e3457611e34612f68565b9060005260206000200154905092915050565b600080611e68846060015163ffffffff16856000015163ffffffff16612338565b60c085015190915060ff16611f055760008460000151611e988563ffffffff16876020015163ffffffff166118e1565b611ea291906131f5565b905060008560000151611ec58463ffffffff16886020015163ffffffff166118e1565b611ecf91906131f5565b9050611efb8660e001518284611ee591906131f5565b885160208a0151611ef691906131f5565b612348565b93505050506103fa565b8351600090611f1490856131f5565b8551909150600090611f2690846131f5565b9050611f3b8660e0015182886040015161237d565b611f4e8760e0015184896040015161237d565b611efb91906130bb565b60606000611f67836002612fd3565b611f7290600261321a565b67ffffffffffffffff811115611f8a57611f8a612f52565b6040519080825280601f01601f191660200182016040528015611fb4576020820181803683370190505b509050600360fc1b81600081518110611fcf57611fcf612f68565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611ffe57611ffe612f68565b60200101906001600160f81b031916908160001a9053506000612022846002612fd3565b61202d90600161321a565b90505b60018111156120a5576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061206157612061612f68565b1a60f81b82828151811061207757612077612f68565b60200101906001600160f81b031916908160001a90535060049490941c9361209e8161301c565b9050612030565b508315610a2c5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161044e565b6120fe8282610a33565b61073b5760008281526097602090815260408083206001600160a01b03851684529091529020805460ff191660011790556121363390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6121848282610a33565b1561073b5760008281526097602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610a2c836001600160a01b0384166123d0565b600054610100900460ff1661221d5760405162461bcd60e51b815260040161044e906131aa565b61188d6124c3565b600054610100900460ff1661224c5760405162461bcd60e51b815260040161044e906131aa565b6122546124f1565b61188d612518565b600054610100900460ff166122835760405162461bcd60e51b815260040161044e906131aa565b61188d600361188f565b6060816000018054806020026020016040519081016040528092919081815260200182805480156122dd57602002820191906000526020600020905b8154815260200190600101908083116122c9575b50505050509050919050565b6000818152600183016020526040812054612330575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556103fa565b5060006103fa565b6000818310156118f05781610a2c565b60008163ffffffff168363ffffffff1611156123665761236661306d565b610d24848463ffffffff168463ffffffff1661257d565b6040805180820190915263ffffffff808416825282166020820152600090816123a582612649565b90506123c686826020015183600001516123bf91906130bb565b835161257d565b9695505050505050565b600081815260018301602052604081205480156124b95760006123f46001836130bb565b8554909150600090612408906001906130bb565b905081811461246d57600086600001828154811061242857612428612f68565b906000526020600020015490508087600001848154811061244b5761244b612f68565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061247e5761247e613232565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506103fa565b60009150506103fa565b600054610100900460ff166124ea5760405162461bcd60e51b815260040161044e906131aa565b6001603355565b600054610100900460ff1661188d5760405162461bcd60e51b815260040161044e906131aa565b600054610100900460ff1661253f5760405162461bcd60e51b815260040161044e906131aa565b60fb805461ffff1916600117905561256560008051602061325d833981519152806129d0565b61188d60008051602061325d83398151915233612a1b565b60008061258a8585612a25565b80519091506000036125ae578281602001516125a69190613248565b915050610a2c565b805183116125cf57604051631a93c68960e11b815260040160405180910390fd5b60006125dc868686612aac565b905060006125ea8383612ac7565b8051909150600003612610578481602001516126069190613248565b9350505050610a2c565b60008581038616906126228383612b4c565b90506000612638612633848a613248565b612b83565b919091029998505050505050505050565b604080518082019091526000808252602082015260006126826f58b90bfbe8e7bcd5e4f1d9cc01f97b578460000151856020015161257d565b905060008080600160831b84106126ac57604051631a93c68960e11b815260040160405180910390fd5b6001607c1b840692508291506001607f1b8280020491506710e1b3be415a00008202016001607f1b8383020491506705a0913f6b1e00008202016001607f1b838302049150670168244fdac780008202016001607f1b838302049150664807432bc180008202016001607f1b838302049150660c0135dca040008202016001607f1b8383020491506601b707b1cdc0008202016001607f1b8383020491506536e0f639b8008202016001607f1b838302049150650618fee9f8008202016001607f1b838302049150649c197dcc008202016001607f1b838302049150640e30dce4008202016001607f1b83830204915064012ebd13008202016001607f1b8383020491506317499f008202016001607f1b8383020491506301a9d4808202016001607f1b838302049150621c63808202016001607f1b8383020491506201c6388202016001607f1b838302049150611ab88202016001607f1b83830204915061017c8202016001607f1b83830204915060148202016001607f1b83830204915081016001607f1b836721c3677c82b400008304010190506001607c1b8416156128795770018ebef9eac820ae8682b9793ac6d1e7767001c3d6a24ed82218787d624d3e5eba95f982020490505b6001607d1b8416156128af577001368b2fc6f9609fe7aceb46aa619baed470018ebef9eac820ae8682b9793ac6d1e77882020490505b6001607e1b8416156128e4576fbc5ab1b16779be3575bd8f0520a9f21f7001368b2fc6f9609fe7aceb46aa619baed582020490505b6001607f1b841615612918576f454aaa8efe072e7f6ddbab84b40a55c96fbc5ab1b16779be3575bd8f0520a9f21e82020490505b600160801b84161561294c576f0960aadc109e7a3bf4578099615711ea6f454aaa8efe072e7f6ddbab84b40a55c582020490505b600160811b84161561297f576e2bf84208204f5977f9a8cf01fdce3d6f0960aadc109e7a3bf4578099615711d782020490505b600160821b8416156129b0576d03c6ab775dd0b95b4cbee7e65d116e2bf84208204f5977f9a8cf01fdc30782020490505b604080518082019091529081526001607f1b602082015295945050505050565b600082815260976020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b61073b828261180a565b60408051808201909152600080825260208201526000612a458484612bae565b9050838302808210612a7a5760405180604001604052808284612a6891906130bb565b815260200182815250925050506103fa565b60405180604001604052806001612a918585900390565b612a9b91906130bb565b815260200191909152949350505050565b60008180612abc57612abc612ff2565b838509949350505050565b604080518082019091526000808252602082015281836020015110612b1457604051806040016040528084600001518152602001838560200151612b0b91906130bb565b905290506103fa565b604051806040016040528060018560000151612b3091906130bb565b8152602001612b43856020015185900390565b90529392505050565b600080612b64612b5e84808403613248565b60010190565b9050828460200151612b769190613248565b8451820217949350505050565b60006001815b6008811015610654578382026002038202915080612ba681612f94565b915050612b89565b60006000198284099392505050565b6040805161012081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081019190915290565b600060208284031215612c1b57600080fd5b81356001600160e01b031981168114610a2c57600080fd5b6001600160a01b038116811461099557600080fd5b803563ffffffff81168114612c5c57600080fd5b919050565b60008060008060808587031215612c7757600080fd5b8435612c8281612c33565b935060208501359250612c9760408601612c48565b9150612ca560608601612c48565b905092959194509250565b63ffffffff808251168352806020830151166020840152806040830151166040840152506060810151612ceb606084018263ffffffff169052565b506080810151612d0660808401826001600160a01b03169052565b5060a0810151612d1a60a084018215159052565b5060c0810151612d2f60c084018260ff169052565b5060e0818101519083015261010090810151910152565b6020808252825182820181905260009190848201906040850190845b81811015612d8957612d75838551612cb0565b928401926101209290920191600101612d62565b50909695505050505050565b600060208284031215612da757600080fd5b8135610a2c81612c33565b600060208284031215612dc457600080fd5b5035919050565b60008060408385031215612dde57600080fd5b823591506020830135612df081612c33565b809150509250929050565b801515811461099557600080fd5b60008060408385031215612e1c57600080fd5b8235612e2781612c33565b91506020830135612df081612dfb565b60008060208385031215612e4a57600080fd5b823567ffffffffffffffff80821115612e6257600080fd5b818501915085601f830112612e7657600080fd5b813581811115612e8557600080fd5b866020828501011115612e9757600080fd5b60209290920196919550909350505050565b60008060408385031215612ebc57600080fd5b50508035926020909101359150565b6020808252825182820181905260009190848201906040850190845b81811015612d895783516001600160a01b031683529284019291840191600101612ee7565b61012081016103fa8284612cb0565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201612fa657612fa6612f7e565b5060010190565b600061ffff808316818516808303821115612fca57612fca612f7e565b01949350505050565b6000816000190483118215151615612fed57612fed612f7e565b500290565b634e487b7160e01b600052601260045260246000fd5b60008261301757613017612ff2565b500690565b60008161302b5761302b612f7e565b506000190190565b60006020828403121561304557600080fd5b8151610a2c81612dfb565b60006020828403121561306257600080fd5b8151610a2c81612c33565b634e487b7160e01b600052600160045260246000fd5b600063ffffffff808316818516808303821115612fca57612fca612f7e565b6000602082840312156130b457600080fd5b5051919050565b6000828210156130cd576130cd612f7e565b500390565b60005b838110156130ed5781810151838201526020016130d5565b838111156130fc576000848401525b50505050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161313a8160178501602088016130d2565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161316b8160288401602088016130d2565b01602801949350505050565b60208152600082518060208401526131968160408501602087016130d2565b601f01601f19169190910160400192915050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600063ffffffff8381169083168181101561321257613212612f7e565b039392505050565b6000821982111561322d5761322d612f7e565b500190565b634e487b7160e01b600052603160045260246000fd5b60008261325757613257612ff2565b50049056fe2172861495e7b85edac73e3cd5fbb42dd675baadf627720e687bcfdaca025096a164736f6c634300080d000a",
  "devdoc": {
    "details": "Auto-compounding Rewards contract",
    "events": {
      "AutoProcessRewardsCountUpdated(uint256,uint256)": {
        "details": "triggered when the number of programs to auto-process the rewards for is updated"
      },
      "ExpDecayProgramCreated(address,uint256,uint32,uint32)": {
        "details": "triggered when an exponential-decay program is created"
      },
      "FlatProgramCreated(address,uint256,uint32,uint32)": {
        "details": "triggered when a flat program is created"
      },
      "ProgramPaused(address,bool)": {
        "details": "triggered when a program is paused/resumed"
      },
      "ProgramTerminated(address,uint32,uint256)": {
        "details": "triggered when a program is terminated prematurely"
      },
      "RewardsDistributed(address,uint256,uint256,uint256)": {
        "details": "triggered when rewards are distributed"
      }
    },
    "kind": "dev",
    "methods": {
      "autoProcessRewards()": {
        "details": "processes program rewards based on internal logic, without requiring any input"
      },
      "autoProcessRewardsCount()": {
        "details": "returns the number of programs to auto-process the rewards for"
      },
      "constructor": {
        "details": "a \"virtual\" constructor that is only used to set immutable state variables"
      },
      "createExpDecayProgram(address,uint256,uint32,uint32)": {
        "details": "creates a rewards program with exponential-decay distribution for a given pool requirements: - the caller must be the admin of the contract - the pool must not have an active program"
      },
      "createFlatProgram(address,uint256,uint32,uint32)": {
        "details": "creates a rewards program with flat distribution for a given pool requirements: - the caller must be the admin of the contract - the pool must not have an active program"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize()": {
        "details": "fully initializes the contract and its parents"
      },
      "isProgramActive(address)": {
        "details": "returns whether a program is currently active"
      },
      "isProgramPaused(address)": {
        "details": "returns whether the specified program is paused"
      },
      "pauseProgram(address,bool)": {
        "details": "pauses or resumes a program requirements: - the caller must be the admin of the contract"
      },
      "pools()": {
        "details": "returns a list of all the pools which have a program associated with them"
      },
      "postUpgrade(bytes)": {
        "details": "performs post-upgrade initialization requirements: - this must can be called only once per-upgrade"
      },
      "processRewards(address)": {
        "details": "processes program rewards"
      },
      "program(address)": {
        "details": "returns the program data of a pool"
      },
      "programs()": {
        "details": "returns a list of all pools' program data"
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "roleAdmin()": {
        "details": "returns the admin role"
      },
      "setAutoProcessRewardsCount(uint256)": {
        "details": "sets the number of programs to auto-process the rewards for requirements: - the caller must be the admin of the contract"
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "terminateProgram(address)": {
        "details": "terminates a rewards program requirements: - the caller must be the admin of the contract - the program must be active"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 644,
        "contract": "contracts/rewards/AutoCompoundingRewards.sol:AutoCompoundingRewards",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 647,
        "contract": "contracts/rewards/AutoCompoundingRewards.sol:AutoCompoundingRewards",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1165,
        "contract": "contracts/rewards/AutoCompoundingRewards.sol:AutoCompoundingRewards",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 836,
        "contract": "contracts/rewards/AutoCompoundingRewards.sol:AutoCompoundingRewards",
        "label": "_status",
        "offset": 0,
        "slot": "51",
        "type": "t_uint256"
      },
      {
        "astId": 880,
        "contract": "contracts/rewards/AutoCompoundingRewards.sol:AutoCompoundingRewards",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1412,
        "contract": "contracts/rewards/AutoCompoundingRewards.sol:AutoCompoundingRewards",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 250,
        "contract": "contracts/rewards/AutoCompoundingRewards.sol:AutoCompoundingRewards",
        "label": "_roles",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)245_storage)"
      },
      {
        "astId": 538,
        "contract": "contracts/rewards/AutoCompoundingRewards.sol:AutoCompoundingRewards",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 99,
        "contract": "contracts/rewards/AutoCompoundingRewards.sol:AutoCompoundingRewards",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)1737_storage)"
      },
      {
        "astId": 209,
        "contract": "contracts/rewards/AutoCompoundingRewards.sol:AutoCompoundingRewards",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 31643,
        "contract": "contracts/rewards/AutoCompoundingRewards.sol:AutoCompoundingRewards",
        "label": "_initializations",
        "offset": 0,
        "slot": "251",
        "type": "t_uint16"
      },
      {
        "astId": 31649,
        "contract": "contracts/rewards/AutoCompoundingRewards.sol:AutoCompoundingRewards",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 25669,
        "contract": "contracts/rewards/AutoCompoundingRewards.sol:AutoCompoundingRewards",
        "label": "_programs",
        "offset": 0,
        "slot": "301",
        "type": "t_mapping(t_contract(Token)29515,t_struct(ProgramData)29063_storage)"
      },
      {
        "astId": 25672,
        "contract": "contracts/rewards/AutoCompoundingRewards.sol:AutoCompoundingRewards",
        "label": "_pools",
        "offset": 0,
        "slot": "302",
        "type": "t_struct(AddressSet)1737_storage"
      },
      {
        "astId": 25674,
        "contract": "contracts/rewards/AutoCompoundingRewards.sol:AutoCompoundingRewards",
        "label": "_autoProcessRewardsCount",
        "offset": 0,
        "slot": "304",
        "type": "t_uint256"
      },
      {
        "astId": 25676,
        "contract": "contracts/rewards/AutoCompoundingRewards.sol:AutoCompoundingRewards",
        "label": "_autoProcessRewardsIndex",
        "offset": 0,
        "slot": "305",
        "type": "t_uint256"
      },
      {
        "astId": 25682,
        "contract": "contracts/rewards/AutoCompoundingRewards.sol:AutoCompoundingRewards",
        "label": "__gap",
        "offset": 0,
        "slot": "306",
        "type": "t_array(t_uint256)45_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IPoolToken)24480": {
        "encoding": "inplace",
        "label": "contract IPoolToken",
        "numberOfBytes": "20"
      },
      "t_contract(Token)29515": {
        "encoding": "inplace",
        "label": "contract Token",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)1737_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)1737_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)245_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)245_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(Token)29515,t_struct(ProgramData)29063_storage)": {
        "encoding": "mapping",
        "key": "t_contract(Token)29515",
        "label": "mapping(contract Token => struct ProgramData)",
        "numberOfBytes": "32",
        "value": "t_struct(ProgramData)29063_storage"
      },
      "t_struct(AddressSet)1737_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.AddressSet",
        "members": [
          {
            "astId": 1736,
            "contract": "contracts/rewards/AutoCompoundingRewards.sol:AutoCompoundingRewards",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1436_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(ProgramData)29063_storage": {
        "encoding": "inplace",
        "label": "struct ProgramData",
        "members": [
          {
            "astId": 29045,
            "contract": "contracts/rewards/AutoCompoundingRewards.sol:AutoCompoundingRewards",
            "label": "startTime",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 29047,
            "contract": "contracts/rewards/AutoCompoundingRewards.sol:AutoCompoundingRewards",
            "label": "endTime",
            "offset": 4,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 29049,
            "contract": "contracts/rewards/AutoCompoundingRewards.sol:AutoCompoundingRewards",
            "label": "halfLife",
            "offset": 8,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 29051,
            "contract": "contracts/rewards/AutoCompoundingRewards.sol:AutoCompoundingRewards",
            "label": "prevDistributionTimestamp",
            "offset": 12,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 29054,
            "contract": "contracts/rewards/AutoCompoundingRewards.sol:AutoCompoundingRewards",
            "label": "poolToken",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IPoolToken)24480"
          },
          {
            "astId": 29056,
            "contract": "contracts/rewards/AutoCompoundingRewards.sol:AutoCompoundingRewards",
            "label": "isPaused",
            "offset": 20,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 29058,
            "contract": "contracts/rewards/AutoCompoundingRewards.sol:AutoCompoundingRewards",
            "label": "distributionType",
            "offset": 21,
            "slot": "1",
            "type": "t_uint8"
          },
          {
            "astId": 29060,
            "contract": "contracts/rewards/AutoCompoundingRewards.sol:AutoCompoundingRewards",
            "label": "totalRewards",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 29062,
            "contract": "contracts/rewards/AutoCompoundingRewards.sol:AutoCompoundingRewards",
            "label": "remainingRewards",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(RoleData)245_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 242,
            "contract": "contracts/rewards/AutoCompoundingRewards.sol:AutoCompoundingRewards",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 244,
            "contract": "contracts/rewards/AutoCompoundingRewards.sol:AutoCompoundingRewards",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)1436_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.Set",
        "members": [
          {
            "astId": 1431,
            "contract": "contracts/rewards/AutoCompoundingRewards.sol:AutoCompoundingRewards",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1435,
            "contract": "contracts/rewards/AutoCompoundingRewards.sol:AutoCompoundingRewards",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}